
Reddy FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000633c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080064e0  080064e0  000164e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006894  08006894  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800689c  0800689c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080068a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001ec  08006a90  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08006a90  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af46  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212c  00000000  00000000  0002b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000850  00000000  00000000  0002ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183fc  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e575  00000000  00000000  00046a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c46e  00000000  00000000  00054f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bbc  00000000  00000000  000e1400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e4fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064c4 	.word	0x080064c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080064c4 	.word	0x080064c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <bno_reset>:
    HAL_GPIO_WritePin(bno->cs_port, bno->cs_pin, GPIO_PIN_RESET);
    HAL_SPI_TransmitReceive(bno->spi, tx_buffer, rx_buffer, tx_len, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(bno->cs_port, bno->cs_pin, GPIO_PIN_RESET);
}

void bno_reset(BNO08X *bno){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bno->reset_port, bno->reset_pin, GPIO_PIN_RESET);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6858      	ldr	r0, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f001 fba5 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ece:	2014      	movs	r0, #20
 8000ed0:	f001 f914 	bl	80020fc <HAL_Delay>
	HAL_GPIO_WritePin(bno->reset_port, bno->reset_pin, GPIO_PIN_SET);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6858      	ldr	r0, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f001 fb99 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eea:	f001 f907 	bl	80020fc <HAL_Delay>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <SELECT+0x18>)
 8000f02:	f001 fb89 	bl	8002618 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f001 f8f8 	bl	80020fc <HAL_Delay>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020000 	.word	0x40020000

08000f14 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <DESELECT+0x18>)
 8000f1e:	f001 fb7b 	bl	8002618 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f001 f8ea 	bl	80020fc <HAL_Delay>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020000 	.word	0x40020000

08000f30 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f3a:	bf00      	nop
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SPI_TxByte+0x30>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d1f8      	bne.n	8000f3c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f4a:	1df9      	adds	r1, r7, #7
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <SPI_TxByte+0x30>)
 8000f52:	f002 f98c 	bl	800326e <HAL_SPI_Transmit>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000264 	.word	0x20000264

08000f64 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f70:	bf00      	nop
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <SPI_TxBuffer+0x30>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d1f8      	bne.n	8000f72 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <SPI_TxBuffer+0x30>)
 8000f88:	f002 f971 	bl	800326e <HAL_SPI_Transmit>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000264 	.word	0x20000264

08000f98 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f9e:	23ff      	movs	r3, #255	; 0xff
 8000fa0:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fa2:	bf00      	nop
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <SPI_RxByte+0x34>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d1f8      	bne.n	8000fa4 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fb2:	1dba      	adds	r2, r7, #6
 8000fb4:	1df9      	adds	r1, r7, #7
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <SPI_RxByte+0x34>)
 8000fbe:	f002 fa92 	bl	80034e6 <HAL_SPI_TransmitReceive>

  return data;
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000264 	.word	0x20000264

08000fd0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000fd8:	f7ff ffde 	bl	8000f98 <SPI_RxByte>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <SD_ReadyWait+0x30>)
 8000ff4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff8:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000ffa:	f7ff ffcd 	bl	8000f98 <SPI_RxByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2bff      	cmp	r3, #255	; 0xff
 8001006:	d003      	beq.n	8001010 <SD_ReadyWait+0x24>
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SD_ReadyWait+0x30>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f4      	bne.n	8000ffa <SD_ReadyWait+0xe>

  return res;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000020a 	.word	0x2000020a

08001020 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8001026:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800102a:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 800102c:	f7ff ff72 	bl	8000f14 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	e005      	b.n	8001042 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001036:	20ff      	movs	r0, #255	; 0xff
 8001038:	f7ff ff7a 	bl	8000f30 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3301      	adds	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b09      	cmp	r3, #9
 8001046:	ddf6      	ble.n	8001036 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001048:	f7ff ff56 	bl	8000ef8 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001060:	2395      	movs	r3, #149	; 0x95
 8001062:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001064:	463b      	mov	r3, r7
 8001066:	2106      	movs	r1, #6
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff7b 	bl	8000f64 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800106e:	e002      	b.n	8001076 <SD_PowerOn+0x56>
  {
    cnt--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3b01      	subs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001076:	f7ff ff8f 	bl	8000f98 <SPI_RxByte>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d002      	beq.n	8001086 <SD_PowerOn+0x66>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f4      	bne.n	8001070 <SD_PowerOn+0x50>
  }

  DESELECT();
 8001086:	f7ff ff45 	bl	8000f14 <DESELECT>
  SPI_TxByte(0XFF);
 800108a:	20ff      	movs	r0, #255	; 0xff
 800108c:	f7ff ff50 	bl	8000f30 <SPI_TxByte>

  PowerFlag = 1;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <SD_PowerOn+0x80>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000020d 	.word	0x2000020d

080010a4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <SD_PowerOff+0x14>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	2000020d 	.word	0x2000020d

080010bc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return PowerFlag;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <SD_CheckPower+0x14>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000020d 	.word	0x2000020d

080010d4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <SD_RxDataBlock+0x58>)
 80010e0:	22c8      	movs	r2, #200	; 0xc8
 80010e2:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80010e4:	f7ff ff58 	bl	8000f98 <SPI_RxByte>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2bff      	cmp	r3, #255	; 0xff
 80010f0:	d103      	bne.n	80010fa <SD_RxDataBlock+0x26>
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <SD_RxDataBlock+0x58>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f4      	bne.n	80010e4 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2bfe      	cmp	r3, #254	; 0xfe
 80010fe:	d001      	beq.n	8001104 <SD_RxDataBlock+0x30>
 8001100:	2300      	movs	r3, #0
 8001102:	e00f      	b.n	8001124 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff60 	bl	8000fd0 <SPI_RxBytePtr>
  } while(len--);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	603a      	str	r2, [r7, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f4      	bne.n	8001104 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 800111a:	f7ff ff3d 	bl	8000f98 <SPI_RxByte>
  SPI_RxByte();
 800111e:	f7ff ff3b 	bl	8000f98 <SPI_RxByte>

  return TRUE;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000208 	.word	0x20000208

08001130 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001140:	f7ff ff54 	bl	8000fec <SD_ReadyWait>
 8001144:	4603      	mov	r3, r0
 8001146:	2bff      	cmp	r3, #255	; 0xff
 8001148:	d001      	beq.n	800114e <SD_TxDataBlock+0x1e>
 800114a:	2300      	movs	r3, #0
 800114c:	e02f      	b.n	80011ae <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff feed 	bl	8000f30 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	2bfd      	cmp	r3, #253	; 0xfd
 800115a:	d020      	beq.n	800119e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff feff 	bl	8000f64 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8001166:	f7ff ff17 	bl	8000f98 <SPI_RxByte>
    SPI_RxByte();
 800116a:	f7ff ff15 	bl	8000f98 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800116e:	e00b      	b.n	8001188 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001170:	f7ff ff12 	bl	8000f98 <SPI_RxByte>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	2b05      	cmp	r3, #5
 8001180:	d006      	beq.n	8001190 <SD_TxDataBlock+0x60>
      i++;
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	3301      	adds	r3, #1
 8001186:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	2b40      	cmp	r3, #64	; 0x40
 800118c:	d9f0      	bls.n	8001170 <SD_TxDataBlock+0x40>
 800118e:	e000      	b.n	8001192 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001190:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001192:	bf00      	nop
 8001194:	f7ff ff00 	bl	8000f98 <SPI_RxByte>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0fa      	beq.n	8001194 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	d101      	bne.n	80011ac <SD_TxDataBlock+0x7c>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <SD_TxDataBlock+0x7e>

  return FALSE;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011c2:	f7ff ff13 	bl	8000fec <SD_ReadyWait>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d001      	beq.n	80011d0 <SD_SendCmd+0x1a>
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	e042      	b.n	8001256 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff feac 	bl	8000f30 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	0e1b      	lsrs	r3, r3, #24
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fea6 	bl	8000f30 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fea0 	bl	8000f30 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fe9a 	bl	8000f30 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fe95 	bl	8000f30 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b40      	cmp	r3, #64	; 0x40
 800120a:	d102      	bne.n	8001212 <SD_SendCmd+0x5c>
 800120c:	2395      	movs	r3, #149	; 0x95
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e007      	b.n	8001222 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b48      	cmp	r3, #72	; 0x48
 8001216:	d102      	bne.n	800121e <SD_SendCmd+0x68>
 8001218:	2387      	movs	r3, #135	; 0x87
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e001      	b.n	8001222 <SD_SendCmd+0x6c>
  else crc = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fe83 	bl	8000f30 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b4c      	cmp	r3, #76	; 0x4c
 800122e:	d101      	bne.n	8001234 <SD_SendCmd+0x7e>
 8001230:	f7ff feb2 	bl	8000f98 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8001234:	230a      	movs	r3, #10
 8001236:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001238:	f7ff feae 	bl	8000f98 <SPI_RxByte>
 800123c:	4603      	mov	r3, r0
 800123e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001240:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da05      	bge.n	8001254 <SD_SendCmd+0x9e>
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	3b01      	subs	r3, #1
 800124c:	73bb      	strb	r3, [r7, #14]
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f1      	bne.n	8001238 <SD_SendCmd+0x82>

  return res;
 8001254:	7b7b      	ldrb	r3, [r7, #13]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SD_disk_initialize+0x14>
 8001270:	2301      	movs	r3, #1
 8001272:	e0d1      	b.n	8001418 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <SD_disk_initialize+0x1c0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <SD_disk_initialize+0x2a>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <SD_disk_initialize+0x1c0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	e0c6      	b.n	8001418 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800128a:	f7ff fec9 	bl	8001020 <SD_PowerOn>

  /* slave select */
  SELECT();
 800128e:	f7ff fe33 	bl	8000ef8 <SELECT>

  /* check disk type */
  type = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001296:	2100      	movs	r1, #0
 8001298:	2040      	movs	r0, #64	; 0x40
 800129a:	f7ff ff8c 	bl	80011b6 <SD_SendCmd>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 80a1 	bne.w	80013e8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <SD_disk_initialize+0x1c4>)
 80012a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ac:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012b2:	2048      	movs	r0, #72	; 0x48
 80012b4:	f7ff ff7f 	bl	80011b6 <SD_SendCmd>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d155      	bne.n	800136a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e00c      	b.n	80012de <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80012c4:	7bfc      	ldrb	r4, [r7, #15]
 80012c6:	f7ff fe67 	bl	8000f98 <SPI_RxByte>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	f104 0310 	add.w	r3, r4, #16
 80012d2:	443b      	add	r3, r7
 80012d4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d9ef      	bls.n	80012c4 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012e4:	7abb      	ldrb	r3, [r7, #10]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d17e      	bne.n	80013e8 <SD_disk_initialize+0x188>
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2baa      	cmp	r3, #170	; 0xaa
 80012ee:	d17b      	bne.n	80013e8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012f0:	2100      	movs	r1, #0
 80012f2:	2077      	movs	r0, #119	; 0x77
 80012f4:	f7ff ff5f 	bl	80011b6 <SD_SendCmd>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d807      	bhi.n	800130e <SD_disk_initialize+0xae>
 80012fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001302:	2069      	movs	r0, #105	; 0x69
 8001304:	f7ff ff57 	bl	80011b6 <SD_SendCmd>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <SD_disk_initialize+0x1c4>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ec      	bne.n	80012f0 <SD_disk_initialize+0x90>
 8001316:	e000      	b.n	800131a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001318:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800131a:	4b42      	ldr	r3, [pc, #264]	; (8001424 <SD_disk_initialize+0x1c4>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d062      	beq.n	80013e8 <SD_disk_initialize+0x188>
 8001322:	2100      	movs	r1, #0
 8001324:	207a      	movs	r0, #122	; 0x7a
 8001326:	f7ff ff46 	bl	80011b6 <SD_SendCmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d15b      	bne.n	80013e8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e00c      	b.n	8001350 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8001336:	7bfc      	ldrb	r4, [r7, #15]
 8001338:	f7ff fe2e 	bl	8000f98 <SPI_RxByte>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	f104 0310 	add.w	r3, r4, #16
 8001344:	443b      	add	r3, r7
 8001346:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	3301      	adds	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d9ef      	bls.n	8001336 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001356:	7a3b      	ldrb	r3, [r7, #8]
 8001358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SD_disk_initialize+0x104>
 8001360:	230c      	movs	r3, #12
 8001362:	e000      	b.n	8001366 <SD_disk_initialize+0x106>
 8001364:	2304      	movs	r3, #4
 8001366:	73bb      	strb	r3, [r7, #14]
 8001368:	e03e      	b.n	80013e8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800136a:	2100      	movs	r1, #0
 800136c:	2077      	movs	r0, #119	; 0x77
 800136e:	f7ff ff22 	bl	80011b6 <SD_SendCmd>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d808      	bhi.n	800138a <SD_disk_initialize+0x12a>
 8001378:	2100      	movs	r1, #0
 800137a:	2069      	movs	r0, #105	; 0x69
 800137c:	f7ff ff1b 	bl	80011b6 <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d801      	bhi.n	800138a <SD_disk_initialize+0x12a>
 8001386:	2302      	movs	r3, #2
 8001388:	e000      	b.n	800138c <SD_disk_initialize+0x12c>
 800138a:	2301      	movs	r3, #1
 800138c:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d10e      	bne.n	80013b2 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001394:	2100      	movs	r1, #0
 8001396:	2077      	movs	r0, #119	; 0x77
 8001398:	f7ff ff0d 	bl	80011b6 <SD_SendCmd>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d80e      	bhi.n	80013c0 <SD_disk_initialize+0x160>
 80013a2:	2100      	movs	r1, #0
 80013a4:	2069      	movs	r0, #105	; 0x69
 80013a6:	f7ff ff06 	bl	80011b6 <SD_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <SD_disk_initialize+0x160>
 80013b0:	e00c      	b.n	80013cc <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013b2:	2100      	movs	r1, #0
 80013b4:	2041      	movs	r0, #65	; 0x41
 80013b6:	f7ff fefe 	bl	80011b6 <SD_SendCmd>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <SD_disk_initialize+0x1c4>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e2      	bne.n	800138e <SD_disk_initialize+0x12e>
 80013c8:	e000      	b.n	80013cc <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ca:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <SD_disk_initialize+0x1c4>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <SD_disk_initialize+0x184>
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	2050      	movs	r0, #80	; 0x50
 80013da:	f7ff feec 	bl	80011b6 <SD_SendCmd>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SD_disk_initialize+0x188>
 80013e4:	2300      	movs	r3, #0
 80013e6:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <SD_disk_initialize+0x1c8>)
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80013ee:	f7ff fd91 	bl	8000f14 <DESELECT>
  SPI_RxByte();
 80013f2:	f7ff fdd1 	bl	8000f98 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SD_disk_initialize+0x1c0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SD_disk_initialize+0x1c0>)
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e001      	b.n	8001412 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800140e:	f7ff fe49 	bl	80010a4 <SD_PowerOff>
  }

  return Stat;
 8001412:	4b03      	ldr	r3, [pc, #12]	; (8001420 <SD_disk_initialize+0x1c0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	20000000 	.word	0x20000000
 8001424:	20000208 	.word	0x20000208
 8001428:	2000020c 	.word	0x2000020c

0800142c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SD_disk_status+0x14>
 800143c:	2301      	movs	r3, #1
 800143e:	e002      	b.n	8001446 <SD_disk_status+0x1a>
  return Stat;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SD_disk_status+0x28>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000

08001458 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <SD_disk_read+0x1c>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <SD_disk_read+0x20>
 8001474:	2304      	movs	r3, #4
 8001476:	e051      	b.n	800151c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <SD_disk_read+0xcc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SD_disk_read+0x32>
 8001486:	2303      	movs	r3, #3
 8001488:	e048      	b.n	800151c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <SD_disk_read+0xd0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <SD_disk_read+0x44>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	607b      	str	r3, [r7, #4]

  SELECT();
 800149c:	f7ff fd2c 	bl	8000ef8 <SELECT>

  if (count == 1)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d111      	bne.n	80014ca <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	2051      	movs	r0, #81	; 0x51
 80014aa:	f7ff fe84 	bl	80011b6 <SD_SendCmd>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d129      	bne.n	8001508 <SD_disk_read+0xb0>
 80014b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b8:	68b8      	ldr	r0, [r7, #8]
 80014ba:	f7ff fe0b 	bl	80010d4 <SD_RxDataBlock>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d021      	beq.n	8001508 <SD_disk_read+0xb0>
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	e01e      	b.n	8001508 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	2052      	movs	r0, #82	; 0x52
 80014ce:	f7ff fe72 	bl	80011b6 <SD_SendCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d117      	bne.n	8001508 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80014d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f7ff fdf9 	bl	80010d4 <SD_RxDataBlock>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00a      	beq.n	80014fe <SD_disk_read+0xa6>
        buff += 512;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014ee:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ed      	bne.n	80014d8 <SD_disk_read+0x80>
 80014fc:	e000      	b.n	8001500 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80014fe:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001500:	2100      	movs	r1, #0
 8001502:	204c      	movs	r0, #76	; 0x4c
 8001504:	f7ff fe57 	bl	80011b6 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001508:	f7ff fd04 	bl	8000f14 <DESELECT>
  SPI_RxByte();
 800150c:	f7ff fd44 	bl	8000f98 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf14      	ite	ne
 8001516:	2301      	movne	r3, #1
 8001518:	2300      	moveq	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	2000020c 	.word	0x2000020c

0800152c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <SD_disk_write+0x1c>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <SD_disk_write+0x20>
 8001548:	2304      	movs	r3, #4
 800154a:	e06b      	b.n	8001624 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <SD_disk_write+0x100>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SD_disk_write+0x32>
 800155a:	2303      	movs	r3, #3
 800155c:	e062      	b.n	8001624 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <SD_disk_write+0x100>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SD_disk_write+0x44>
 800156c:	2302      	movs	r3, #2
 800156e:	e059      	b.n	8001624 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <SD_disk_write+0x104>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <SD_disk_write+0x56>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	025b      	lsls	r3, r3, #9
 8001580:	607b      	str	r3, [r7, #4]

  SELECT();
 8001582:	f7ff fcb9 	bl	8000ef8 <SELECT>

  if (count == 1)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d110      	bne.n	80015ae <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	2058      	movs	r0, #88	; 0x58
 8001590:	f7ff fe11 	bl	80011b6 <SD_SendCmd>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d13a      	bne.n	8001610 <SD_disk_write+0xe4>
 800159a:	21fe      	movs	r1, #254	; 0xfe
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f7ff fdc7 	bl	8001130 <SD_TxDataBlock>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d033      	beq.n	8001610 <SD_disk_write+0xe4>
      count = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	e030      	b.n	8001610 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <SD_disk_write+0x104>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015ba:	2100      	movs	r1, #0
 80015bc:	2077      	movs	r0, #119	; 0x77
 80015be:	f7ff fdfa 	bl	80011b6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	2057      	movs	r0, #87	; 0x57
 80015c6:	f7ff fdf6 	bl	80011b6 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2059      	movs	r0, #89	; 0x59
 80015ce:	f7ff fdf2 	bl	80011b6 <SD_SendCmd>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11b      	bne.n	8001610 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015d8:	21fc      	movs	r1, #252	; 0xfc
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f7ff fda8 	bl	8001130 <SD_TxDataBlock>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <SD_disk_write+0xd0>
        buff += 512;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015ec:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ee      	bne.n	80015d8 <SD_disk_write+0xac>
 80015fa:	e000      	b.n	80015fe <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015fc:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80015fe:	21fd      	movs	r1, #253	; 0xfd
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fd95 	bl	8001130 <SD_TxDataBlock>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <SD_disk_write+0xe4>
      {
        count = 1;
 800160c:	2301      	movs	r3, #1
 800160e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001610:	f7ff fc80 	bl	8000f14 <DESELECT>
  SPI_RxByte();
 8001614:	f7ff fcc0 	bl	8000f98 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	b2db      	uxtb	r3, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	2000020c 	.word	0x2000020c

08001634 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b08b      	sub	sp, #44	; 0x2c
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	603a      	str	r2, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	460b      	mov	r3, r1
 8001642:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SD_disk_ioctl+0x1e>
 800164e:	2304      	movs	r3, #4
 8001650:	e115      	b.n	800187e <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d124      	bne.n	80016a8 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d012      	beq.n	800168c <SD_disk_ioctl+0x58>
 8001666:	2b02      	cmp	r3, #2
 8001668:	dc1a      	bgt.n	80016a0 <SD_disk_ioctl+0x6c>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <SD_disk_ioctl+0x40>
 800166e:	2b01      	cmp	r3, #1
 8001670:	d006      	beq.n	8001680 <SD_disk_ioctl+0x4c>
 8001672:	e015      	b.n	80016a0 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001674:	f7ff fd16 	bl	80010a4 <SD_PowerOff>
      res = RES_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800167e:	e0fc      	b.n	800187a <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001680:	f7ff fcce 	bl	8001020 <SD_PowerOn>
      res = RES_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800168a:	e0f6      	b.n	800187a <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	1c5c      	adds	r4, r3, #1
 8001690:	f7ff fd14 	bl	80010bc <SD_CheckPower>
 8001694:	4603      	mov	r3, r0
 8001696:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800169e:	e0ec      	b.n	800187a <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 80016a0:	2304      	movs	r3, #4
 80016a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a6:	e0e8      	b.n	800187a <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a8:	4b77      	ldr	r3, [pc, #476]	; (8001888 <SD_disk_ioctl+0x254>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SD_disk_ioctl+0x86>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0e1      	b.n	800187e <SD_disk_ioctl+0x24a>

    SELECT();
 80016ba:	f7ff fc1d 	bl	8000ef8 <SELECT>

    switch (ctrl)
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	2b0d      	cmp	r3, #13
 80016c2:	f200 80cb 	bhi.w	800185c <SD_disk_ioctl+0x228>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <SD_disk_ioctl+0x98>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	080017c7 	.word	0x080017c7
 80016d0:	08001705 	.word	0x08001705
 80016d4:	080017b7 	.word	0x080017b7
 80016d8:	0800185d 	.word	0x0800185d
 80016dc:	0800185d 	.word	0x0800185d
 80016e0:	0800185d 	.word	0x0800185d
 80016e4:	0800185d 	.word	0x0800185d
 80016e8:	0800185d 	.word	0x0800185d
 80016ec:	0800185d 	.word	0x0800185d
 80016f0:	0800185d 	.word	0x0800185d
 80016f4:	0800185d 	.word	0x0800185d
 80016f8:	080017d9 	.word	0x080017d9
 80016fc:	080017fd 	.word	0x080017fd
 8001700:	08001821 	.word	0x08001821
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001704:	2100      	movs	r1, #0
 8001706:	2049      	movs	r0, #73	; 0x49
 8001708:	f7ff fd55 	bl	80011b6 <SD_SendCmd>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 80a8 	bne.w	8001864 <SD_disk_ioctl+0x230>
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2110      	movs	r1, #16
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fcda 	bl	80010d4 <SD_RxDataBlock>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 809e 	beq.w	8001864 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001728:	7b3b      	ldrb	r3, [r7, #12]
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10e      	bne.n	8001750 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001732:	7d7b      	ldrb	r3, [r7, #21]
 8001734:	b29a      	uxth	r2, r3
 8001736:	7d3b      	ldrb	r3, [r7, #20]
 8001738:	b29b      	uxth	r3, r3
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b29b      	uxth	r3, r3
 800173e:	4413      	add	r3, r2
 8001740:	b29b      	uxth	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001746:	8bfb      	ldrh	r3, [r7, #30]
 8001748:	029a      	lsls	r2, r3, #10
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e02e      	b.n	80017ae <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001750:	7c7b      	ldrb	r3, [r7, #17]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	b2da      	uxtb	r2, r3
 8001758:	7dbb      	ldrb	r3, [r7, #22]
 800175a:	09db      	lsrs	r3, r3, #7
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b2da      	uxtb	r2, r3
 8001762:	7d7b      	ldrb	r3, [r7, #21]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 0306 	and.w	r3, r3, #6
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3302      	adds	r3, #2
 8001774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001778:	7d3b      	ldrb	r3, [r7, #20]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	b2db      	uxtb	r3, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	b29b      	uxth	r3, r3
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	b29b      	uxth	r3, r3
 8001788:	4413      	add	r3, r2
 800178a:	b29a      	uxth	r2, r3
 800178c:	7cbb      	ldrb	r3, [r7, #18]
 800178e:	029b      	lsls	r3, r3, #10
 8001790:	b29b      	uxth	r3, r3
 8001792:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001796:	b29b      	uxth	r3, r3
 8001798:	4413      	add	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80017a0:	8bfa      	ldrh	r2, [r7, #30]
 80017a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a6:	3b09      	subs	r3, #9
 80017a8:	409a      	lsls	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80017b4:	e056      	b.n	8001864 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017c4:	e055      	b.n	8001872 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017c6:	f7ff fc11 	bl	8000fec <SD_ReadyWait>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2bff      	cmp	r3, #255	; 0xff
 80017ce:	d14b      	bne.n	8001868 <SD_disk_ioctl+0x234>
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017d6:	e047      	b.n	8001868 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017d8:	2100      	movs	r1, #0
 80017da:	2049      	movs	r0, #73	; 0x49
 80017dc:	f7ff fceb 	bl	80011b6 <SD_SendCmd>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d142      	bne.n	800186c <SD_disk_ioctl+0x238>
 80017e6:	2110      	movs	r1, #16
 80017e8:	6a38      	ldr	r0, [r7, #32]
 80017ea:	f7ff fc73 	bl	80010d4 <SD_RxDataBlock>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03b      	beq.n	800186c <SD_disk_ioctl+0x238>
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017fa:	e037      	b.n	800186c <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017fc:	2100      	movs	r1, #0
 80017fe:	204a      	movs	r0, #74	; 0x4a
 8001800:	f7ff fcd9 	bl	80011b6 <SD_SendCmd>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d132      	bne.n	8001870 <SD_disk_ioctl+0x23c>
 800180a:	2110      	movs	r1, #16
 800180c:	6a38      	ldr	r0, [r7, #32]
 800180e:	f7ff fc61 	bl	80010d4 <SD_RxDataBlock>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02b      	beq.n	8001870 <SD_disk_ioctl+0x23c>
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800181e:	e027      	b.n	8001870 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001820:	2100      	movs	r1, #0
 8001822:	207a      	movs	r0, #122	; 0x7a
 8001824:	f7ff fcc7 	bl	80011b6 <SD_SendCmd>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001834:	e00b      	b.n	800184e <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001836:	6a3c      	ldr	r4, [r7, #32]
 8001838:	1c63      	adds	r3, r4, #1
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	f7ff fbac 	bl	8000f98 <SPI_RxByte>
 8001840:	4603      	mov	r3, r0
 8001842:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001848:	3301      	adds	r3, #1
 800184a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800184e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001852:	2b03      	cmp	r3, #3
 8001854:	d9ef      	bls.n	8001836 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 800185c:	2304      	movs	r3, #4
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001862:	e006      	b.n	8001872 <SD_disk_ioctl+0x23e>
      break;
 8001864:	bf00      	nop
 8001866:	e004      	b.n	8001872 <SD_disk_ioctl+0x23e>
      break;
 8001868:	bf00      	nop
 800186a:	e002      	b.n	8001872 <SD_disk_ioctl+0x23e>
      break;
 800186c:	bf00      	nop
 800186e:	e000      	b.n	8001872 <SD_disk_ioctl+0x23e>
      break;
 8001870:	bf00      	nop
    }

    DESELECT();
 8001872:	f7ff fb4f 	bl	8000f14 <DESELECT>
    SPI_RxByte();
 8001876:	f7ff fb8f 	bl	8000f98 <SPI_RxByte>
  }

  return res;
 800187a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800187e:	4618      	mov	r0, r3
 8001880:	372c      	adds	r7, #44	; 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000

0800188c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001892:	f000 fbc1 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001896:	f000 f825 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189a:	f000 f91b 	bl	8001ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800189e:	f000 f87f 	bl	80019a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018a2:	f000 f8ab 	bl	80019fc <MX_SPI1_Init>
  MX_FATFS_Init();
 80018a6:	f002 f88b 	bl	80039c0 <MX_FATFS_Init>
  MX_SPI2_Init();
 80018aa:	f000 f8dd 	bl	8001a68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]


  BNO08X bno = { .spi = &hspi2, .reset_port = BNO_RESET_GPIO_Port, .reset_pin =
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <main+0x54>)
 80018b4:	463c      	mov	r4, r7
 80018b6:	461d      	mov	r5, r3
 80018b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	BNO_RESET_Pin, .int_port = BNO_INT_GPIO_Port, .int_pin = BNO_INT_Pin,
  			.cs_port = BNO_CS_GPIO_Port, .cs_pin = BNO_CS_Pin };

  bno_reset(&bno);
 80018c4:	463b      	mov	r3, r7
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff faf4 	bl	8000eb4 <bno_reset>
  //if(sd_open_file(&fil)) return 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (i < 100)
 80018cc:	bf00      	nop
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2b63      	cmp	r3, #99	; 0x63
 80018d2:	ddfc      	ble.n	80018ce <main+0x42>
 80018d4:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  }
  //if(sd_close_file(&fil)) return 1;
  //if(sd_unmount_card) return 1;
  /* USER CODE END 3 */
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bdb0      	pop	{r4, r5, r7, pc}
 80018de:	bf00      	nop
 80018e0:	080064e0 	.word	0x080064e0

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2230      	movs	r2, #48	; 0x30
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fe50 	bl	8004598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <SystemClock_Config+0xb4>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <SystemClock_Config+0xb4>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <SystemClock_Config+0xb4>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <SystemClock_Config+0xb8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <SystemClock_Config+0xb8>)
 800192e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <SystemClock_Config+0xb8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001948:	2310      	movs	r3, #16
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4618      	mov	r0, r3
 8001956:	f000 ffbd 	bl	80028d4 <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001960:	f000 f922 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fa20 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800198a:	f000 f90d 	bl	8001ba8 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	3750      	adds	r7, #80	; 0x50
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000

080019a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <MX_I2C1_Init+0x54>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <MX_I2C1_Init+0x58>)
 80019ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_I2C1_Init+0x50>)
 80019de:	f000 fe35 	bl	800264c <HAL_I2C_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e8:	f000 f8de 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000210 	.word	0x20000210
 80019f4:	40005400 	.word	0x40005400
 80019f8:	000186a0 	.word	0x000186a0

080019fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a02:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <MX_SPI1_Init+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a48:	220a      	movs	r2, #10
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_SPI1_Init+0x64>)
 8001a4e:	f001 fb85 	bl	800315c <HAL_SPI_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a58:	f000 f8a6 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000264 	.word	0x20000264
 8001a64:	40013000 	.word	0x40013000

08001a68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <MX_SPI2_Init+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI2_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <MX_SPI2_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI2_Init+0x64>)
 8001ab4:	220a      	movs	r2, #10
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_SPI2_Init+0x64>)
 8001aba:	f001 fb4f 	bl	800315c <HAL_SPI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ac4:	f000 f870 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200002bc 	.word	0x200002bc
 8001ad0:	40003800 	.word	0x40003800

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_GPIO_Init+0xc8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b44:	4816      	ldr	r0, [pc, #88]	; (8001ba0 <MX_GPIO_Init+0xcc>)
 8001b46:	f000 fd67 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8001b50:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_GPIO_Init+0xd0>)
 8001b52:	f000 fd61 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_GPIO_Init+0xcc>)
 8001b70:	f000 fbce 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b74:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8001b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_GPIO_Init+0xd0>)
 8001b8e:	f000 fbbf 	bl	8002310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_I2C_MspInit+0x84>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12b      	bne.n	8001c7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_I2C_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_I2C_MspInit+0x88>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_I2C_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c42:	23c0      	movs	r3, #192	; 0xc0
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c46:	2312      	movs	r3, #18
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c52:	2304      	movs	r3, #4
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <HAL_I2C_MspInit+0x8c>)
 8001c5e:	f000 fb57 	bl	8002310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_I2C_MspInit+0x88>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_I2C_MspInit+0x88>)
 8001c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_I2C_MspInit+0x88>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020400 	.word	0x40020400

08001c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <HAL_SPI_MspInit+0xe8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12c      	bne.n	8001d10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cee:	23e0      	movs	r3, #224	; 0xe0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	481e      	ldr	r0, [pc, #120]	; (8001d84 <HAL_SPI_MspInit+0xf0>)
 8001d0a:	f000 fb01 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d0e:	e031      	b.n	8001d74 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_SPI_MspInit+0xf4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_SPI_MspInit+0xec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001d52:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d64:	2305      	movs	r3, #5
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <HAL_SPI_MspInit+0xf8>)
 8001d70:	f000 face 	bl	8002310 <HAL_GPIO_Init>
}
 8001d74:	bf00      	nop
 8001d76:	3730      	adds	r7, #48	; 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40003800 	.word	0x40003800
 8001d8c:	40020400 	.word	0x40020400

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <SysTick_Handler+0x34>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <SysTick_Handler+0x18>
	  Timer1--;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <SysTick_Handler+0x34>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <SysTick_Handler+0x34>)
 8001dee:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <SysTick_Handler+0x38>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <SysTick_Handler+0x2c>
	  Timer2--;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Handler+0x38>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <SysTick_Handler+0x38>)
 8001e02:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 f95a 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000208 	.word	0x20000208
 8001e10:	2000020a 	.word	0x2000020a

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_kill>:

int _kill(int pid, int sig)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e2e:	f002 fbbf 	bl	80045b0 <__errno>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2216      	movs	r2, #22
 8001e36:	601a      	str	r2, [r3, #0]
  return -1;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_exit>:

void _exit (int status)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ffe7 	bl	8001e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e56:	e7fe      	b.n	8001e56 <_exit+0x12>

08001e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e00a      	b.n	8001e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6a:	f3af 8000 	nop.w
 8001e6e:	4601      	mov	r1, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf0      	blt.n	8001e6a <_read+0x12>
  }

  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e009      	b.n	8001eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf1      	blt.n	8001ea4 <_write+0x12>
  }
  return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_isatty>:

int _isatty(int file)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f002 fb24 	bl	80045b0 <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20020000 	.word	0x20020000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	20000314 	.word	0x20000314
 8001f9c:	20000480 	.word	0x20000480

08001fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fca:	490e      	ldr	r1, [pc, #56]	; (8002004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0b      	ldr	r2, [pc, #44]	; (800200c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe0:	4c0b      	ldr	r4, [pc, #44]	; (8002010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fee:	f7ff ffd7 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f002 fae3 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7ff fc49 	bl	800188c <main>
  bx  lr    
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002008:	080068a4 	.word	0x080068a4
  ldr r2, =_sbss
 800200c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002010:	2000047c 	.word	0x2000047c

08002014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <HAL_Init+0x40>)
 8002022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_Init+0x40>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_Init+0x40>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 f931 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	200f      	movs	r0, #15
 8002048:	f000 f808 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fdb2 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f93b 	bl	80022f6 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002098:	f000 f911 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000004 	.word	0x20000004
 80020b4:	2000000c 	.word	0x2000000c
 80020b8:	20000008 	.word	0x20000008

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000318 	.word	0x20000318

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000318 	.word	0x20000318

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000000c 	.word	0x2000000c

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff47 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff5c 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffb0 	bl	8002264 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e159      	b.n	80025e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 8148 	bne.w	80025da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	2b02      	cmp	r3, #2
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a2 	beq.w	80025da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x202>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2f4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x1fe>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a47      	ldr	r2, [pc, #284]	; (8002608 <HAL_GPIO_Init+0x2f8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x1fa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_GPIO_Init+0x2fc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x1f6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_GPIO_Init+0x300>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x1f2>
 80024fe:	2304      	movs	r3, #4
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002502:	2307      	movs	r3, #7
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x304>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f aea2 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e12b      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fac6 	bl	8001c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b0:	f000 fd40 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a81      	ldr	r2, [pc, #516]	; (80028c0 <HAL_I2C_Init+0x274>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d807      	bhi.n	80026d0 <HAL_I2C_Init+0x84>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a80      	ldr	r2, [pc, #512]	; (80028c4 <HAL_I2C_Init+0x278>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e006      	b.n	80026de <HAL_I2C_Init+0x92>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a7d      	ldr	r2, [pc, #500]	; (80028c8 <HAL_I2C_Init+0x27c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0e7      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a78      	ldr	r2, [pc, #480]	; (80028cc <HAL_I2C_Init+0x280>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d802      	bhi.n	8002720 <HAL_I2C_Init+0xd4>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	e009      	b.n	8002734 <HAL_I2C_Init+0xe8>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_I2C_Init+0x284>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	3301      	adds	r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	495c      	ldr	r1, [pc, #368]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d819      	bhi.n	8002788 <HAL_I2C_Init+0x13c>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e59      	subs	r1, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002768:	400b      	ands	r3, r1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_I2C_Init+0x138>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e59      	subs	r1, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fbb1 f3f3 	udiv	r3, r1, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	e051      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002784:	2304      	movs	r3, #4
 8002786:	e04f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_I2C_Init+0x168>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_I2C_Init+0x18e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x196>
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_I2C_Init+0x1bc>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e58      	subs	r0, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	e00f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6911      	ldr	r1, [r2, #16]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	001e847f 	.word	0x001e847f
 80028c8:	003d08ff 	.word	0x003d08ff
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e267      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d075      	beq.n	80029de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d00c      	beq.n	8002918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b85      	ldr	r3, [pc, #532]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002906:	2b08      	cmp	r3, #8
 8002908:	d112      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002916:	d10b      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	4b7e      	ldr	r3, [pc, #504]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05b      	beq.n	80029dc <HAL_RCC_OscConfig+0x108>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d157      	bne.n	80029dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e242      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x74>
 800293a:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a75      	ldr	r2, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xb0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x98>
 8002952:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6f      	ldr	r2, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6d      	ldr	r3, [pc, #436]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6c      	ldr	r2, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xb0>
 800296c:	4b69      	ldr	r3, [pc, #420]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a68      	ldr	r2, [pc, #416]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a65      	ldr	r2, [pc, #404]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff fbaa 	bl	80020e4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002994:	f7ff fba6 	bl	80020e4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e207      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b5b      	ldr	r3, [pc, #364]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xc0>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fb96 	bl	80020e4 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff fb92 	bl	80020e4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1f3      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b51      	ldr	r3, [pc, #324]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0xe8>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x152>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c7      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4937      	ldr	r1, [pc, #220]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x244>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fb4b 	bl	80020e4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff fb47 	bl	80020e4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1a8      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4925      	ldr	r1, [pc, #148]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_OscConfig+0x244>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7ff fb2a 	bl	80020e4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7ff fb26 	bl	80020e4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e187      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d036      	beq.n	8002b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_RCC_OscConfig+0x248>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7ff fb0a 	bl	80020e4 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7ff fb06 	bl	80020e4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e167      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x200>
 8002af2:	e01b      	b.n	8002b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_OscConfig+0x248>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7ff faf3 	bl	80020e4 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e00e      	b.n	8002b20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b02:	f7ff faef 	bl	80020e4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d907      	bls.n	8002b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e150      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
 8002b14:	40023800 	.word	0x40023800
 8002b18:	42470000 	.word	0x42470000
 8002b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ea      	bne.n	8002b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8097 	beq.w	8002c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b81      	ldr	r3, [pc, #516]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a7c      	ldr	r2, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b7a      	ldr	r3, [pc, #488]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b77      	ldr	r3, [pc, #476]	; (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b74      	ldr	r3, [pc, #464]	; (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a73      	ldr	r2, [pc, #460]	; (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7ff faaf 	bl	80020e4 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7ff faab 	bl	80020e4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e10c      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x474>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2ea>
 8002bb0:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a63      	ldr	r2, [pc, #396]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x324>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x30c>
 8002bc6:	4b5f      	ldr	r3, [pc, #380]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a5e      	ldr	r2, [pc, #376]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	4b5c      	ldr	r3, [pc, #368]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a5b      	ldr	r2, [pc, #364]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x324>
 8002be0:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	4b55      	ldr	r3, [pc, #340]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f023 0304 	bic.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7ff fa70 	bl	80020e4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7ff fa6c 	bl	80020e4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0cb      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ee      	beq.n	8002c08 <HAL_RCC_OscConfig+0x334>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7ff fa5a 	bl	80020e4 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7ff fa56 	bl	80020e4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0b5      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ee      	bne.n	8002c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a38      	ldr	r2, [pc, #224]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a1 	beq.w	8002db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d05c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d141      	bne.n	8002d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_RCC_OscConfig+0x478>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7ff fa2a 	bl	80020e4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7ff fa26 	bl	80020e4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e087      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	019b      	lsls	r3, r3, #6
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	491b      	ldr	r1, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x478>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7ff f9ff 	bl	80020e4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7ff f9fb 	bl	80020e4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e05c      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x416>
 8002d08:	e054      	b.n	8002db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_RCC_OscConfig+0x478>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff f9e8 	bl	80020e4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7ff f9e4 	bl	80020e4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e045      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x444>
 8002d36:	e03d      	b.n	8002db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e038      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x4ec>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d028      	beq.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d121      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d11a      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0cc      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b68      	ldr	r3, [pc, #416]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d90c      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d044      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d119      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e067      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4934      	ldr	r1, [pc, #208]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7ff f916 	bl	80020e4 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7ff f912 	bl	80020e4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e04f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d20c      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	490a      	ldr	r1, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	5ccb      	ldrb	r3, [r1, r3]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f876 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	0800650c 	.word	0x0800650c
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	20000008 	.word	0x20000008

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b090      	sub	sp, #64	; 0x40
 8002f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa8:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_GetSysClockFreq+0x180>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	f200 80a1 	bhi.w	80030fc <HAL_RCC_GetSysClockFreq+0x16c>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc2:	e09b      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fc8:	e09b      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b53      	ldr	r3, [pc, #332]	; (8003118 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fce:	e098      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fda:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d028      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4b47      	ldr	r3, [pc, #284]	; (8003118 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ffc:	fb03 f201 	mul.w	r2, r3, r1
 8003000:	2300      	movs	r3, #0
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	4413      	add	r3, r2
 8003008:	4a43      	ldr	r2, [pc, #268]	; (8003118 <HAL_RCC_GetSysClockFreq+0x188>)
 800300a:	fba0 1202 	umull	r1, r2, r0, r2
 800300e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003010:	460a      	mov	r2, r1
 8003012:	62ba      	str	r2, [r7, #40]	; 0x28
 8003014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003016:	4413      	add	r3, r2
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	2200      	movs	r2, #0
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	61fa      	str	r2, [r7, #28]
 8003022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003026:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800302a:	f7fd fdc5 	bl	8000bb8 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4613      	mov	r3, r2
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	e053      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003038:	4b35      	ldr	r3, [pc, #212]	; (8003110 <HAL_RCC_GetSysClockFreq+0x180>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	2200      	movs	r2, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	617a      	str	r2, [r7, #20]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800304a:	f04f 0b00 	mov.w	fp, #0
 800304e:	4652      	mov	r2, sl
 8003050:	465b      	mov	r3, fp
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	0159      	lsls	r1, r3, #5
 800305c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003060:	0150      	lsls	r0, r2, #5
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	ebb2 080a 	subs.w	r8, r2, sl
 800306a:	eb63 090b 	sbc.w	r9, r3, fp
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800307a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800307e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003082:	ebb2 0408 	subs.w	r4, r2, r8
 8003086:	eb63 0509 	sbc.w	r5, r3, r9
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	00eb      	lsls	r3, r5, #3
 8003094:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003098:	00e2      	lsls	r2, r4, #3
 800309a:	4614      	mov	r4, r2
 800309c:	461d      	mov	r5, r3
 800309e:	eb14 030a 	adds.w	r3, r4, sl
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	eb45 030b 	adc.w	r3, r5, fp
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030b6:	4629      	mov	r1, r5
 80030b8:	028b      	lsls	r3, r1, #10
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c0:	4621      	mov	r1, r4
 80030c2:	028a      	lsls	r2, r1, #10
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	2200      	movs	r2, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	60fa      	str	r2, [r7, #12]
 80030d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d4:	f7fd fd70 	bl	8000bb8 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	3301      	adds	r3, #1
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030fa:	e002      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetSysClockFreq+0x184>)
 80030fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003104:	4618      	mov	r0, r3
 8003106:	3740      	adds	r7, #64	; 0x40
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	017d7840 	.word	0x017d7840

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	0800651c 	.word	0x0800651c

0800315c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07b      	b.n	8003266 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317e:	d009      	beq.n	8003194 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
 8003186:	e005      	b.n	8003194 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe fd70 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	ea42 0103 	orr.w	r1, r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0104 	and.w	r1, r3, #4
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0210 	and.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003254:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b088      	sub	sp, #32
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_SPI_Transmit+0x22>
 800328c:	2302      	movs	r3, #2
 800328e:	e126      	b.n	80034de <HAL_SPI_Transmit+0x270>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003298:	f7fe ff24 	bl	80020e4 <HAL_GetTick>
 800329c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032b2:	e10b      	b.n	80034cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Transmit+0x52>
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c4:	e102      	b.n	80034cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330c:	d10f      	bne.n	800332e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800332c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d007      	beq.n	800334c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003354:	d14b      	bne.n	80033ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Transmit+0xf6>
 800335e:	8afb      	ldrh	r3, [r7, #22]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d13e      	bne.n	80033e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003388:	e02b      	b.n	80033e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d112      	bne.n	80033be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80033bc:	e011      	b.n	80033e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033be:	f7fe fe91 	bl	80020e4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d803      	bhi.n	80033d6 <HAL_SPI_Transmit+0x168>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_Transmit+0x16e>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e0:	e074      	b.n	80034cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ce      	bne.n	800338a <HAL_SPI_Transmit+0x11c>
 80033ec:	e04c      	b.n	8003488 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_Transmit+0x18e>
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d140      	bne.n	800347e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003422:	e02c      	b.n	800347e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d113      	bne.n	800345a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	7812      	ldrb	r2, [r2, #0]
 800343e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	86da      	strh	r2, [r3, #54]	; 0x36
 8003458:	e011      	b.n	800347e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345a:	f7fe fe43 	bl	80020e4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d803      	bhi.n	8003472 <HAL_SPI_Transmit+0x204>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003470:	d102      	bne.n	8003478 <HAL_SPI_Transmit+0x20a>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800347c:	e026      	b.n	80034cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1cd      	bne.n	8003424 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	6839      	ldr	r1, [r7, #0]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fa55 	bl	800393c <SPI_EndRxTxTransaction>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e000      	b.n	80034cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80034ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b08c      	sub	sp, #48	; 0x30
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034f4:	2301      	movs	r3, #1
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_SPI_TransmitReceive+0x26>
 8003508:	2302      	movs	r3, #2
 800350a:	e18a      	b.n	8003822 <HAL_SPI_TransmitReceive+0x33c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003514:	f7fe fde6 	bl	80020e4 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800352e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00f      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x70>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353c:	d107      	bne.n	800354e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_SPI_TransmitReceive+0x68>
 8003546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800354a:	2b04      	cmp	r3, #4
 800354c:	d003      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003554:	e15b      	b.n	800380e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x82>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x82>
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800356e:	e14e      	b.n	800380e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b04      	cmp	r3, #4
 800357a:	d003      	beq.n	8003584 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2205      	movs	r2, #5
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	887a      	ldrh	r2, [r7, #2]
 800359a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e0:	d178      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x10a>
 80035ea:	8b7b      	ldrh	r3, [r7, #26]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d166      	bne.n	80036be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003614:	e053      	b.n	80036be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d11b      	bne.n	800365c <HAL_SPI_TransmitReceive+0x176>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d016      	beq.n	800365c <HAL_SPI_TransmitReceive+0x176>
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d113      	bne.n	800365c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d119      	bne.n	800369e <HAL_SPI_TransmitReceive+0x1b8>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d014      	beq.n	800369e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	b292      	uxth	r2, r2
 8003680:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800369a:	2301      	movs	r3, #1
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800369e:	f7fe fd21 	bl	80020e4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d807      	bhi.n	80036be <HAL_SPI_TransmitReceive+0x1d8>
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b4:	d003      	beq.n	80036be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036bc:	e0a7      	b.n	800380e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1a6      	bne.n	8003616 <HAL_SPI_TransmitReceive+0x130>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1a1      	bne.n	8003616 <HAL_SPI_TransmitReceive+0x130>
 80036d2:	e07c      	b.n	80037ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_TransmitReceive+0x1fc>
 80036dc:	8b7b      	ldrh	r3, [r7, #26]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d16b      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003708:	e057      	b.n	80037ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d11c      	bne.n	8003752 <HAL_SPI_TransmitReceive+0x26c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d017      	beq.n	8003752 <HAL_SPI_TransmitReceive+0x26c>
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d114      	bne.n	8003752 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d119      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x2ae>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d014      	beq.n	8003794 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003790:	2301      	movs	r3, #1
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003794:	f7fe fca6 	bl	80020e4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d803      	bhi.n	80037ac <HAL_SPI_TransmitReceive+0x2c6>
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x2cc>
 80037ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037b8:	e029      	b.n	800380e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1a2      	bne.n	800370a <HAL_SPI_TransmitReceive+0x224>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d19d      	bne.n	800370a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f8b2 	bl	800393c <SPI_EndRxTxTransaction>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037ea:	e010      	b.n	800380e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	e000      	b.n	800380e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800380c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800381e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003822:	4618      	mov	r0, r3
 8003824:	3730      	adds	r7, #48	; 0x30
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800383c:	f7fe fc52 	bl	80020e4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	4413      	add	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800384c:	f7fe fc4a 	bl	80020e4 <HAL_GetTick>
 8003850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003852:	4b39      	ldr	r3, [pc, #228]	; (8003938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	015b      	lsls	r3, r3, #5
 8003858:	0d1b      	lsrs	r3, r3, #20
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003862:	e054      	b.n	800390e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386a:	d050      	beq.n	800390e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800386c:	f7fe fc3a 	bl	80020e4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	429a      	cmp	r2, r3
 800387a:	d902      	bls.n	8003882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d13d      	bne.n	80038fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389a:	d111      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a4:	d004      	beq.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ae:	d107      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c8:	d10f      	bne.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e017      	b.n	800392e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3b01      	subs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4013      	ands	r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	429a      	cmp	r2, r3
 800392a:	d19b      	bne.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000004 	.word	0x20000004

0800393c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <SPI_EndRxTxTransaction+0x7c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <SPI_EndRxTxTransaction+0x80>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0d5b      	lsrs	r3, r3, #21
 8003954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003966:	d112      	bne.n	800398e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff ff5a 	bl	800382c <SPI_WaitFlagStateUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e00f      	b.n	80039ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3b01      	subs	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d0f2      	beq.n	800398e <SPI_EndRxTxTransaction+0x52>
 80039a8:	e000      	b.n	80039ac <SPI_EndRxTxTransaction+0x70>
        break;
 80039aa:	bf00      	nop
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000004 	.word	0x20000004
 80039bc:	165e9f81 	.word	0x165e9f81

080039c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80039c4:	4904      	ldr	r1, [pc, #16]	; (80039d8 <MX_FATFS_Init+0x18>)
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_FATFS_Init+0x1c>)
 80039c8:	f000 f8ae 	bl	8003b28 <FATFS_LinkDriver>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <MX_FATFS_Init+0x20>)
 80039d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000320 	.word	0x20000320
 80039dc:	20000010 	.word	0x20000010
 80039e0:	2000031c 	.word	0x2000031c

080039e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fc35 	bl	8001260 <SD_disk_initialize>
 80039f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fd0d 	bl	800142c <SD_disk_status>
 8003a12:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003a2c:	7bf8      	ldrb	r0, [r7, #15]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	f7fd fd10 	bl	8001458 <SD_disk_read>
 8003a38:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003a52:	7bf8      	ldrb	r0, [r7, #15]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	f7fd fd67 	bl	800152c <SD_disk_write>
 8003a5e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	603a      	str	r2, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
 8003a74:	460b      	mov	r3, r1
 8003a76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003a78:	79b9      	ldrb	r1, [r7, #6]
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fdd8 	bl	8001634 <SD_disk_ioctl>
 8003a84:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003aa8:	7a5b      	ldrb	r3, [r3, #9]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d131      	bne.n	8003b14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003ab2:	7a5b      	ldrb	r3, [r3, #9]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003ac0:	7a5b      	ldrb	r3, [r3, #9]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003ad0:	7a5b      	ldrb	r3, [r3, #9]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	79fa      	ldrb	r2, [r7, #7]
 8003adc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003ae0:	7a5b      	ldrb	r3, [r3, #9]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	b2d1      	uxtb	r1, r2
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <FATFS_LinkDriverEx+0x94>)
 8003aea:	7251      	strb	r1, [r2, #9]
 8003aec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003aee:	7dbb      	ldrb	r3, [r7, #22]
 8003af0:	3330      	adds	r3, #48	; 0x30
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3301      	adds	r3, #1
 8003afc:	223a      	movs	r2, #58	; 0x3a
 8003afe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3302      	adds	r3, #2
 8003b04:	222f      	movs	r2, #47	; 0x2f
 8003b06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3303      	adds	r3, #3
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000324 	.word	0x20000324

08003b28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ffaa 	bl	8003a90 <FATFS_LinkDriverEx>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <__cvt>:
 8003b46:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4a:	ec55 4b10 	vmov	r4, r5, d0
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	460e      	mov	r6, r1
 8003b52:	4619      	mov	r1, r3
 8003b54:	462b      	mov	r3, r5
 8003b56:	bfbb      	ittet	lt
 8003b58:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b5c:	461d      	movlt	r5, r3
 8003b5e:	2300      	movge	r3, #0
 8003b60:	232d      	movlt	r3, #45	; 0x2d
 8003b62:	700b      	strb	r3, [r1, #0]
 8003b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b6a:	4691      	mov	r9, r2
 8003b6c:	f023 0820 	bic.w	r8, r3, #32
 8003b70:	bfbc      	itt	lt
 8003b72:	4622      	movlt	r2, r4
 8003b74:	4614      	movlt	r4, r2
 8003b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b7a:	d005      	beq.n	8003b88 <__cvt+0x42>
 8003b7c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b80:	d100      	bne.n	8003b84 <__cvt+0x3e>
 8003b82:	3601      	adds	r6, #1
 8003b84:	2102      	movs	r1, #2
 8003b86:	e000      	b.n	8003b8a <__cvt+0x44>
 8003b88:	2103      	movs	r1, #3
 8003b8a:	ab03      	add	r3, sp, #12
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	ab02      	add	r3, sp, #8
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	ec45 4b10 	vmov	d0, r4, r5
 8003b96:	4653      	mov	r3, sl
 8003b98:	4632      	mov	r2, r6
 8003b9a:	f000 fdc1 	bl	8004720 <_dtoa_r>
 8003b9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	d102      	bne.n	8003bac <__cvt+0x66>
 8003ba6:	f019 0f01 	tst.w	r9, #1
 8003baa:	d022      	beq.n	8003bf2 <__cvt+0xac>
 8003bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bb0:	eb07 0906 	add.w	r9, r7, r6
 8003bb4:	d110      	bne.n	8003bd8 <__cvt+0x92>
 8003bb6:	783b      	ldrb	r3, [r7, #0]
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d10a      	bne.n	8003bd2 <__cvt+0x8c>
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc ff88 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bc8:	b918      	cbnz	r0, 8003bd2 <__cvt+0x8c>
 8003bca:	f1c6 0601 	rsb	r6, r6, #1
 8003bce:	f8ca 6000 	str.w	r6, [sl]
 8003bd2:	f8da 3000 	ldr.w	r3, [sl]
 8003bd6:	4499      	add	r9, r3
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fc ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003be4:	b108      	cbz	r0, 8003bea <__cvt+0xa4>
 8003be6:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bea:	2230      	movs	r2, #48	; 0x30
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	454b      	cmp	r3, r9
 8003bf0:	d307      	bcc.n	8003c02 <__cvt+0xbc>
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bf6:	1bdb      	subs	r3, r3, r7
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	b004      	add	sp, #16
 8003bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	9103      	str	r1, [sp, #12]
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e7f0      	b.n	8003bec <__cvt+0xa6>

08003c0a <__exponent>:
 8003c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	bfb8      	it	lt
 8003c12:	4249      	neglt	r1, r1
 8003c14:	f803 2b02 	strb.w	r2, [r3], #2
 8003c18:	bfb4      	ite	lt
 8003c1a:	222d      	movlt	r2, #45	; 0x2d
 8003c1c:	222b      	movge	r2, #43	; 0x2b
 8003c1e:	2909      	cmp	r1, #9
 8003c20:	7042      	strb	r2, [r0, #1]
 8003c22:	dd2a      	ble.n	8003c7a <__exponent+0x70>
 8003c24:	f10d 0207 	add.w	r2, sp, #7
 8003c28:	4617      	mov	r7, r2
 8003c2a:	260a      	movs	r6, #10
 8003c2c:	4694      	mov	ip, r2
 8003c2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c32:	fb06 1415 	mls	r4, r6, r5, r1
 8003c36:	3430      	adds	r4, #48	; 0x30
 8003c38:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	2c63      	cmp	r4, #99	; 0x63
 8003c40:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003c44:	4629      	mov	r1, r5
 8003c46:	dcf1      	bgt.n	8003c2c <__exponent+0x22>
 8003c48:	3130      	adds	r1, #48	; 0x30
 8003c4a:	f1ac 0402 	sub.w	r4, ip, #2
 8003c4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c52:	1c41      	adds	r1, r0, #1
 8003c54:	4622      	mov	r2, r4
 8003c56:	42ba      	cmp	r2, r7
 8003c58:	d30a      	bcc.n	8003c70 <__exponent+0x66>
 8003c5a:	f10d 0209 	add.w	r2, sp, #9
 8003c5e:	eba2 020c 	sub.w	r2, r2, ip
 8003c62:	42bc      	cmp	r4, r7
 8003c64:	bf88      	it	hi
 8003c66:	2200      	movhi	r2, #0
 8003c68:	4413      	add	r3, r2
 8003c6a:	1a18      	subs	r0, r3, r0
 8003c6c:	b003      	add	sp, #12
 8003c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c70:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c74:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003c78:	e7ed      	b.n	8003c56 <__exponent+0x4c>
 8003c7a:	2330      	movs	r3, #48	; 0x30
 8003c7c:	3130      	adds	r1, #48	; 0x30
 8003c7e:	7083      	strb	r3, [r0, #2]
 8003c80:	70c1      	strb	r1, [r0, #3]
 8003c82:	1d03      	adds	r3, r0, #4
 8003c84:	e7f1      	b.n	8003c6a <__exponent+0x60>
	...

08003c88 <_printf_float>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	ed2d 8b02 	vpush	{d8}
 8003c90:	b08d      	sub	sp, #52	; 0x34
 8003c92:	460c      	mov	r4, r1
 8003c94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c98:	4616      	mov	r6, r2
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	f000 fc83 	bl	80045a8 <_localeconv_r>
 8003ca2:	f8d0 a000 	ldr.w	sl, [r0]
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	f7fc faea 	bl	8000280 <strlen>
 8003cac:	2300      	movs	r3, #0
 8003cae:	930a      	str	r3, [sp, #40]	; 0x28
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	9305      	str	r3, [sp, #20]
 8003cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003cbc:	3307      	adds	r3, #7
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	f103 0208 	add.w	r2, r3, #8
 8003cc6:	f8c8 2000 	str.w	r2, [r8]
 8003cca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cd2:	9307      	str	r3, [sp, #28]
 8003cd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cd8:	ee08 0a10 	vmov	s16, r0
 8003cdc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ce4:	4b9e      	ldr	r3, [pc, #632]	; (8003f60 <_printf_float+0x2d8>)
 8003ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cea:	f7fc ff27 	bl	8000b3c <__aeabi_dcmpun>
 8003cee:	bb88      	cbnz	r0, 8003d54 <_printf_float+0xcc>
 8003cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cf4:	4b9a      	ldr	r3, [pc, #616]	; (8003f60 <_printf_float+0x2d8>)
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cfa:	f7fc ff01 	bl	8000b00 <__aeabi_dcmple>
 8003cfe:	bb48      	cbnz	r0, 8003d54 <_printf_float+0xcc>
 8003d00:	2200      	movs	r2, #0
 8003d02:	2300      	movs	r3, #0
 8003d04:	4640      	mov	r0, r8
 8003d06:	4649      	mov	r1, r9
 8003d08:	f7fc fef0 	bl	8000aec <__aeabi_dcmplt>
 8003d0c:	b110      	cbz	r0, 8003d14 <_printf_float+0x8c>
 8003d0e:	232d      	movs	r3, #45	; 0x2d
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d14:	4a93      	ldr	r2, [pc, #588]	; (8003f64 <_printf_float+0x2dc>)
 8003d16:	4b94      	ldr	r3, [pc, #592]	; (8003f68 <_printf_float+0x2e0>)
 8003d18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d1c:	bf94      	ite	ls
 8003d1e:	4690      	movls	r8, r2
 8003d20:	4698      	movhi	r8, r3
 8003d22:	2303      	movs	r3, #3
 8003d24:	6123      	str	r3, [r4, #16]
 8003d26:	9b05      	ldr	r3, [sp, #20]
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	f04f 0900 	mov.w	r9, #0
 8003d32:	9700      	str	r7, [sp, #0]
 8003d34:	4633      	mov	r3, r6
 8003d36:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 f9da 	bl	80040f4 <_printf_common>
 8003d40:	3001      	adds	r0, #1
 8003d42:	f040 8090 	bne.w	8003e66 <_printf_float+0x1de>
 8003d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4a:	b00d      	add	sp, #52	; 0x34
 8003d4c:	ecbd 8b02 	vpop	{d8}
 8003d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d54:	4642      	mov	r2, r8
 8003d56:	464b      	mov	r3, r9
 8003d58:	4640      	mov	r0, r8
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	f7fc feee 	bl	8000b3c <__aeabi_dcmpun>
 8003d60:	b140      	cbz	r0, 8003d74 <_printf_float+0xec>
 8003d62:	464b      	mov	r3, r9
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bfbc      	itt	lt
 8003d68:	232d      	movlt	r3, #45	; 0x2d
 8003d6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d6e:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <_printf_float+0x2e4>)
 8003d70:	4b7f      	ldr	r3, [pc, #508]	; (8003f70 <_printf_float+0x2e8>)
 8003d72:	e7d1      	b.n	8003d18 <_printf_float+0x90>
 8003d74:	6863      	ldr	r3, [r4, #4]
 8003d76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d7a:	9206      	str	r2, [sp, #24]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	d13f      	bne.n	8003e00 <_printf_float+0x178>
 8003d80:	2306      	movs	r3, #6
 8003d82:	6063      	str	r3, [r4, #4]
 8003d84:	9b05      	ldr	r3, [sp, #20]
 8003d86:	6861      	ldr	r1, [r4, #4]
 8003d88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9303      	str	r3, [sp, #12]
 8003d90:	ab0a      	add	r3, sp, #40	; 0x28
 8003d92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d96:	ab09      	add	r3, sp, #36	; 0x24
 8003d98:	ec49 8b10 	vmov	d0, r8, r9
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	6022      	str	r2, [r4, #0]
 8003da0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003da4:	4628      	mov	r0, r5
 8003da6:	f7ff fece 	bl	8003b46 <__cvt>
 8003daa:	9b06      	ldr	r3, [sp, #24]
 8003dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dae:	2b47      	cmp	r3, #71	; 0x47
 8003db0:	4680      	mov	r8, r0
 8003db2:	d108      	bne.n	8003dc6 <_printf_float+0x13e>
 8003db4:	1cc8      	adds	r0, r1, #3
 8003db6:	db02      	blt.n	8003dbe <_printf_float+0x136>
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	4299      	cmp	r1, r3
 8003dbc:	dd41      	ble.n	8003e42 <_printf_float+0x1ba>
 8003dbe:	f1ab 0302 	sub.w	r3, fp, #2
 8003dc2:	fa5f fb83 	uxtb.w	fp, r3
 8003dc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dca:	d820      	bhi.n	8003e0e <_printf_float+0x186>
 8003dcc:	3901      	subs	r1, #1
 8003dce:	465a      	mov	r2, fp
 8003dd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dd4:	9109      	str	r1, [sp, #36]	; 0x24
 8003dd6:	f7ff ff18 	bl	8003c0a <__exponent>
 8003dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ddc:	1813      	adds	r3, r2, r0
 8003dde:	2a01      	cmp	r2, #1
 8003de0:	4681      	mov	r9, r0
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	dc02      	bgt.n	8003dec <_printf_float+0x164>
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	07d2      	lsls	r2, r2, #31
 8003dea:	d501      	bpl.n	8003df0 <_printf_float+0x168>
 8003dec:	3301      	adds	r3, #1
 8003dee:	6123      	str	r3, [r4, #16]
 8003df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d09c      	beq.n	8003d32 <_printf_float+0xaa>
 8003df8:	232d      	movs	r3, #45	; 0x2d
 8003dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfe:	e798      	b.n	8003d32 <_printf_float+0xaa>
 8003e00:	9a06      	ldr	r2, [sp, #24]
 8003e02:	2a47      	cmp	r2, #71	; 0x47
 8003e04:	d1be      	bne.n	8003d84 <_printf_float+0xfc>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1bc      	bne.n	8003d84 <_printf_float+0xfc>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e7b9      	b.n	8003d82 <_printf_float+0xfa>
 8003e0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e12:	d118      	bne.n	8003e46 <_printf_float+0x1be>
 8003e14:	2900      	cmp	r1, #0
 8003e16:	6863      	ldr	r3, [r4, #4]
 8003e18:	dd0b      	ble.n	8003e32 <_printf_float+0x1aa>
 8003e1a:	6121      	str	r1, [r4, #16]
 8003e1c:	b913      	cbnz	r3, 8003e24 <_printf_float+0x19c>
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	07d0      	lsls	r0, r2, #31
 8003e22:	d502      	bpl.n	8003e2a <_printf_float+0x1a2>
 8003e24:	3301      	adds	r3, #1
 8003e26:	440b      	add	r3, r1
 8003e28:	6123      	str	r3, [r4, #16]
 8003e2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e2c:	f04f 0900 	mov.w	r9, #0
 8003e30:	e7de      	b.n	8003df0 <_printf_float+0x168>
 8003e32:	b913      	cbnz	r3, 8003e3a <_printf_float+0x1b2>
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	07d2      	lsls	r2, r2, #31
 8003e38:	d501      	bpl.n	8003e3e <_printf_float+0x1b6>
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	e7f4      	b.n	8003e28 <_printf_float+0x1a0>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e7f2      	b.n	8003e28 <_printf_float+0x1a0>
 8003e42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	db05      	blt.n	8003e58 <_printf_float+0x1d0>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	6121      	str	r1, [r4, #16]
 8003e50:	07d8      	lsls	r0, r3, #31
 8003e52:	d5ea      	bpl.n	8003e2a <_printf_float+0x1a2>
 8003e54:	1c4b      	adds	r3, r1, #1
 8003e56:	e7e7      	b.n	8003e28 <_printf_float+0x1a0>
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	bfd4      	ite	le
 8003e5c:	f1c1 0202 	rsble	r2, r1, #2
 8003e60:	2201      	movgt	r2, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	e7e0      	b.n	8003e28 <_printf_float+0x1a0>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	055a      	lsls	r2, r3, #21
 8003e6a:	d407      	bmi.n	8003e7c <_printf_float+0x1f4>
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	4642      	mov	r2, r8
 8003e70:	4631      	mov	r1, r6
 8003e72:	4628      	mov	r0, r5
 8003e74:	47b8      	blx	r7
 8003e76:	3001      	adds	r0, #1
 8003e78:	d12c      	bne.n	8003ed4 <_printf_float+0x24c>
 8003e7a:	e764      	b.n	8003d46 <_printf_float+0xbe>
 8003e7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e80:	f240 80e0 	bls.w	8004044 <_printf_float+0x3bc>
 8003e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f7fc fe24 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d034      	beq.n	8003efe <_printf_float+0x276>
 8003e94:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <_printf_float+0x2ec>)
 8003e96:	2301      	movs	r3, #1
 8003e98:	4631      	mov	r1, r6
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	47b8      	blx	r7
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	f43f af51 	beq.w	8003d46 <_printf_float+0xbe>
 8003ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	db02      	blt.n	8003eb2 <_printf_float+0x22a>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	07d8      	lsls	r0, r3, #31
 8003eb0:	d510      	bpl.n	8003ed4 <_printf_float+0x24c>
 8003eb2:	ee18 3a10 	vmov	r3, s16
 8003eb6:	4652      	mov	r2, sl
 8003eb8:	4631      	mov	r1, r6
 8003eba:	4628      	mov	r0, r5
 8003ebc:	47b8      	blx	r7
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	f43f af41 	beq.w	8003d46 <_printf_float+0xbe>
 8003ec4:	f04f 0800 	mov.w	r8, #0
 8003ec8:	f104 091a 	add.w	r9, r4, #26
 8003ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4543      	cmp	r3, r8
 8003ed2:	dc09      	bgt.n	8003ee8 <_printf_float+0x260>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	079b      	lsls	r3, r3, #30
 8003ed8:	f100 8107 	bmi.w	80040ea <_printf_float+0x462>
 8003edc:	68e0      	ldr	r0, [r4, #12]
 8003ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ee0:	4298      	cmp	r0, r3
 8003ee2:	bfb8      	it	lt
 8003ee4:	4618      	movlt	r0, r3
 8003ee6:	e730      	b.n	8003d4a <_printf_float+0xc2>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	464a      	mov	r2, r9
 8003eec:	4631      	mov	r1, r6
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f43f af27 	beq.w	8003d46 <_printf_float+0xbe>
 8003ef8:	f108 0801 	add.w	r8, r8, #1
 8003efc:	e7e6      	b.n	8003ecc <_printf_float+0x244>
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dc39      	bgt.n	8003f78 <_printf_float+0x2f0>
 8003f04:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <_printf_float+0x2ec>)
 8003f06:	2301      	movs	r3, #1
 8003f08:	4631      	mov	r1, r6
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	47b8      	blx	r7
 8003f0e:	3001      	adds	r0, #1
 8003f10:	f43f af19 	beq.w	8003d46 <_printf_float+0xbe>
 8003f14:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <_printf_float+0x29a>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	07d9      	lsls	r1, r3, #31
 8003f20:	d5d8      	bpl.n	8003ed4 <_printf_float+0x24c>
 8003f22:	ee18 3a10 	vmov	r3, s16
 8003f26:	4652      	mov	r2, sl
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f af09 	beq.w	8003d46 <_printf_float+0xbe>
 8003f34:	f04f 0900 	mov.w	r9, #0
 8003f38:	f104 0a1a 	add.w	sl, r4, #26
 8003f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3e:	425b      	negs	r3, r3
 8003f40:	454b      	cmp	r3, r9
 8003f42:	dc01      	bgt.n	8003f48 <_printf_float+0x2c0>
 8003f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f46:	e792      	b.n	8003e6e <_printf_float+0x1e6>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	4652      	mov	r2, sl
 8003f4c:	4631      	mov	r1, r6
 8003f4e:	4628      	mov	r0, r5
 8003f50:	47b8      	blx	r7
 8003f52:	3001      	adds	r0, #1
 8003f54:	f43f aef7 	beq.w	8003d46 <_printf_float+0xbe>
 8003f58:	f109 0901 	add.w	r9, r9, #1
 8003f5c:	e7ee      	b.n	8003f3c <_printf_float+0x2b4>
 8003f5e:	bf00      	nop
 8003f60:	7fefffff 	.word	0x7fefffff
 8003f64:	08006524 	.word	0x08006524
 8003f68:	08006528 	.word	0x08006528
 8003f6c:	0800652c 	.word	0x0800652c
 8003f70:	08006530 	.word	0x08006530
 8003f74:	08006534 	.word	0x08006534
 8003f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bfa8      	it	ge
 8003f80:	461a      	movge	r2, r3
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	4691      	mov	r9, r2
 8003f86:	dc37      	bgt.n	8003ff8 <_printf_float+0x370>
 8003f88:	f04f 0b00 	mov.w	fp, #0
 8003f8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f90:	f104 021a 	add.w	r2, r4, #26
 8003f94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f96:	9305      	str	r3, [sp, #20]
 8003f98:	eba3 0309 	sub.w	r3, r3, r9
 8003f9c:	455b      	cmp	r3, fp
 8003f9e:	dc33      	bgt.n	8004008 <_printf_float+0x380>
 8003fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	db3b      	blt.n	8004020 <_printf_float+0x398>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	07da      	lsls	r2, r3, #31
 8003fac:	d438      	bmi.n	8004020 <_printf_float+0x398>
 8003fae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003fb2:	eba2 0903 	sub.w	r9, r2, r3
 8003fb6:	9b05      	ldr	r3, [sp, #20]
 8003fb8:	1ad2      	subs	r2, r2, r3
 8003fba:	4591      	cmp	r9, r2
 8003fbc:	bfa8      	it	ge
 8003fbe:	4691      	movge	r9, r2
 8003fc0:	f1b9 0f00 	cmp.w	r9, #0
 8003fc4:	dc35      	bgt.n	8004032 <_printf_float+0x3aa>
 8003fc6:	f04f 0800 	mov.w	r8, #0
 8003fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fce:	f104 0a1a 	add.w	sl, r4, #26
 8003fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	eba3 0309 	sub.w	r3, r3, r9
 8003fdc:	4543      	cmp	r3, r8
 8003fde:	f77f af79 	ble.w	8003ed4 <_printf_float+0x24c>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4652      	mov	r2, sl
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f aeaa 	beq.w	8003d46 <_printf_float+0xbe>
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	e7ec      	b.n	8003fd2 <_printf_float+0x34a>
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	d1c0      	bne.n	8003f88 <_printf_float+0x300>
 8004006:	e69e      	b.n	8003d46 <_printf_float+0xbe>
 8004008:	2301      	movs	r3, #1
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
 800400e:	9205      	str	r2, [sp, #20]
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f ae97 	beq.w	8003d46 <_printf_float+0xbe>
 8004018:	9a05      	ldr	r2, [sp, #20]
 800401a:	f10b 0b01 	add.w	fp, fp, #1
 800401e:	e7b9      	b.n	8003f94 <_printf_float+0x30c>
 8004020:	ee18 3a10 	vmov	r3, s16
 8004024:	4652      	mov	r2, sl
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	d1be      	bne.n	8003fae <_printf_float+0x326>
 8004030:	e689      	b.n	8003d46 <_printf_float+0xbe>
 8004032:	9a05      	ldr	r2, [sp, #20]
 8004034:	464b      	mov	r3, r9
 8004036:	4442      	add	r2, r8
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	d1c1      	bne.n	8003fc6 <_printf_float+0x33e>
 8004042:	e680      	b.n	8003d46 <_printf_float+0xbe>
 8004044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004046:	2a01      	cmp	r2, #1
 8004048:	dc01      	bgt.n	800404e <_printf_float+0x3c6>
 800404a:	07db      	lsls	r3, r3, #31
 800404c:	d53a      	bpl.n	80040c4 <_printf_float+0x43c>
 800404e:	2301      	movs	r3, #1
 8004050:	4642      	mov	r2, r8
 8004052:	4631      	mov	r1, r6
 8004054:	4628      	mov	r0, r5
 8004056:	47b8      	blx	r7
 8004058:	3001      	adds	r0, #1
 800405a:	f43f ae74 	beq.w	8003d46 <_printf_float+0xbe>
 800405e:	ee18 3a10 	vmov	r3, s16
 8004062:	4652      	mov	r2, sl
 8004064:	4631      	mov	r1, r6
 8004066:	4628      	mov	r0, r5
 8004068:	47b8      	blx	r7
 800406a:	3001      	adds	r0, #1
 800406c:	f43f ae6b 	beq.w	8003d46 <_printf_float+0xbe>
 8004070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004074:	2200      	movs	r2, #0
 8004076:	2300      	movs	r3, #0
 8004078:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800407c:	f7fc fd2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004080:	b9d8      	cbnz	r0, 80040ba <_printf_float+0x432>
 8004082:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004086:	f108 0201 	add.w	r2, r8, #1
 800408a:	4631      	mov	r1, r6
 800408c:	4628      	mov	r0, r5
 800408e:	47b8      	blx	r7
 8004090:	3001      	adds	r0, #1
 8004092:	d10e      	bne.n	80040b2 <_printf_float+0x42a>
 8004094:	e657      	b.n	8003d46 <_printf_float+0xbe>
 8004096:	2301      	movs	r3, #1
 8004098:	4652      	mov	r2, sl
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	f43f ae50 	beq.w	8003d46 <_printf_float+0xbe>
 80040a6:	f108 0801 	add.w	r8, r8, #1
 80040aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4543      	cmp	r3, r8
 80040b0:	dcf1      	bgt.n	8004096 <_printf_float+0x40e>
 80040b2:	464b      	mov	r3, r9
 80040b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040b8:	e6da      	b.n	8003e70 <_printf_float+0x1e8>
 80040ba:	f04f 0800 	mov.w	r8, #0
 80040be:	f104 0a1a 	add.w	sl, r4, #26
 80040c2:	e7f2      	b.n	80040aa <_printf_float+0x422>
 80040c4:	2301      	movs	r3, #1
 80040c6:	4642      	mov	r2, r8
 80040c8:	e7df      	b.n	800408a <_printf_float+0x402>
 80040ca:	2301      	movs	r3, #1
 80040cc:	464a      	mov	r2, r9
 80040ce:	4631      	mov	r1, r6
 80040d0:	4628      	mov	r0, r5
 80040d2:	47b8      	blx	r7
 80040d4:	3001      	adds	r0, #1
 80040d6:	f43f ae36 	beq.w	8003d46 <_printf_float+0xbe>
 80040da:	f108 0801 	add.w	r8, r8, #1
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040e2:	1a5b      	subs	r3, r3, r1
 80040e4:	4543      	cmp	r3, r8
 80040e6:	dcf0      	bgt.n	80040ca <_printf_float+0x442>
 80040e8:	e6f8      	b.n	8003edc <_printf_float+0x254>
 80040ea:	f04f 0800 	mov.w	r8, #0
 80040ee:	f104 0919 	add.w	r9, r4, #25
 80040f2:	e7f4      	b.n	80040de <_printf_float+0x456>

080040f4 <_printf_common>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	4616      	mov	r6, r2
 80040fa:	4699      	mov	r9, r3
 80040fc:	688a      	ldr	r2, [r1, #8]
 80040fe:	690b      	ldr	r3, [r1, #16]
 8004100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004104:	4293      	cmp	r3, r2
 8004106:	bfb8      	it	lt
 8004108:	4613      	movlt	r3, r2
 800410a:	6033      	str	r3, [r6, #0]
 800410c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004110:	4607      	mov	r7, r0
 8004112:	460c      	mov	r4, r1
 8004114:	b10a      	cbz	r2, 800411a <_printf_common+0x26>
 8004116:	3301      	adds	r3, #1
 8004118:	6033      	str	r3, [r6, #0]
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	0699      	lsls	r1, r3, #26
 800411e:	bf42      	ittt	mi
 8004120:	6833      	ldrmi	r3, [r6, #0]
 8004122:	3302      	addmi	r3, #2
 8004124:	6033      	strmi	r3, [r6, #0]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	f015 0506 	ands.w	r5, r5, #6
 800412c:	d106      	bne.n	800413c <_printf_common+0x48>
 800412e:	f104 0a19 	add.w	sl, r4, #25
 8004132:	68e3      	ldr	r3, [r4, #12]
 8004134:	6832      	ldr	r2, [r6, #0]
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	42ab      	cmp	r3, r5
 800413a:	dc26      	bgt.n	800418a <_printf_common+0x96>
 800413c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004140:	1e13      	subs	r3, r2, #0
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	bf18      	it	ne
 8004146:	2301      	movne	r3, #1
 8004148:	0692      	lsls	r2, r2, #26
 800414a:	d42b      	bmi.n	80041a4 <_printf_common+0xb0>
 800414c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004150:	4649      	mov	r1, r9
 8004152:	4638      	mov	r0, r7
 8004154:	47c0      	blx	r8
 8004156:	3001      	adds	r0, #1
 8004158:	d01e      	beq.n	8004198 <_printf_common+0xa4>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	6922      	ldr	r2, [r4, #16]
 800415e:	f003 0306 	and.w	r3, r3, #6
 8004162:	2b04      	cmp	r3, #4
 8004164:	bf02      	ittt	eq
 8004166:	68e5      	ldreq	r5, [r4, #12]
 8004168:	6833      	ldreq	r3, [r6, #0]
 800416a:	1aed      	subeq	r5, r5, r3
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	bf0c      	ite	eq
 8004170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004174:	2500      	movne	r5, #0
 8004176:	4293      	cmp	r3, r2
 8004178:	bfc4      	itt	gt
 800417a:	1a9b      	subgt	r3, r3, r2
 800417c:	18ed      	addgt	r5, r5, r3
 800417e:	2600      	movs	r6, #0
 8004180:	341a      	adds	r4, #26
 8004182:	42b5      	cmp	r5, r6
 8004184:	d11a      	bne.n	80041bc <_printf_common+0xc8>
 8004186:	2000      	movs	r0, #0
 8004188:	e008      	b.n	800419c <_printf_common+0xa8>
 800418a:	2301      	movs	r3, #1
 800418c:	4652      	mov	r2, sl
 800418e:	4649      	mov	r1, r9
 8004190:	4638      	mov	r0, r7
 8004192:	47c0      	blx	r8
 8004194:	3001      	adds	r0, #1
 8004196:	d103      	bne.n	80041a0 <_printf_common+0xac>
 8004198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800419c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a0:	3501      	adds	r5, #1
 80041a2:	e7c6      	b.n	8004132 <_printf_common+0x3e>
 80041a4:	18e1      	adds	r1, r4, r3
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	2030      	movs	r0, #48	; 0x30
 80041aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ae:	4422      	add	r2, r4
 80041b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041b8:	3302      	adds	r3, #2
 80041ba:	e7c7      	b.n	800414c <_printf_common+0x58>
 80041bc:	2301      	movs	r3, #1
 80041be:	4622      	mov	r2, r4
 80041c0:	4649      	mov	r1, r9
 80041c2:	4638      	mov	r0, r7
 80041c4:	47c0      	blx	r8
 80041c6:	3001      	adds	r0, #1
 80041c8:	d0e6      	beq.n	8004198 <_printf_common+0xa4>
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7d9      	b.n	8004182 <_printf_common+0x8e>
	...

080041d0 <_printf_i>:
 80041d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	7e0f      	ldrb	r7, [r1, #24]
 80041d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041d8:	2f78      	cmp	r7, #120	; 0x78
 80041da:	4691      	mov	r9, r2
 80041dc:	4680      	mov	r8, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	469a      	mov	sl, r3
 80041e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041e6:	d807      	bhi.n	80041f8 <_printf_i+0x28>
 80041e8:	2f62      	cmp	r7, #98	; 0x62
 80041ea:	d80a      	bhi.n	8004202 <_printf_i+0x32>
 80041ec:	2f00      	cmp	r7, #0
 80041ee:	f000 80d4 	beq.w	800439a <_printf_i+0x1ca>
 80041f2:	2f58      	cmp	r7, #88	; 0x58
 80041f4:	f000 80c0 	beq.w	8004378 <_printf_i+0x1a8>
 80041f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004200:	e03a      	b.n	8004278 <_printf_i+0xa8>
 8004202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004206:	2b15      	cmp	r3, #21
 8004208:	d8f6      	bhi.n	80041f8 <_printf_i+0x28>
 800420a:	a101      	add	r1, pc, #4	; (adr r1, 8004210 <_printf_i+0x40>)
 800420c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004210:	08004269 	.word	0x08004269
 8004214:	0800427d 	.word	0x0800427d
 8004218:	080041f9 	.word	0x080041f9
 800421c:	080041f9 	.word	0x080041f9
 8004220:	080041f9 	.word	0x080041f9
 8004224:	080041f9 	.word	0x080041f9
 8004228:	0800427d 	.word	0x0800427d
 800422c:	080041f9 	.word	0x080041f9
 8004230:	080041f9 	.word	0x080041f9
 8004234:	080041f9 	.word	0x080041f9
 8004238:	080041f9 	.word	0x080041f9
 800423c:	08004381 	.word	0x08004381
 8004240:	080042a9 	.word	0x080042a9
 8004244:	0800433b 	.word	0x0800433b
 8004248:	080041f9 	.word	0x080041f9
 800424c:	080041f9 	.word	0x080041f9
 8004250:	080043a3 	.word	0x080043a3
 8004254:	080041f9 	.word	0x080041f9
 8004258:	080042a9 	.word	0x080042a9
 800425c:	080041f9 	.word	0x080041f9
 8004260:	080041f9 	.word	0x080041f9
 8004264:	08004343 	.word	0x08004343
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	602a      	str	r2, [r5, #0]
 8004270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004278:	2301      	movs	r3, #1
 800427a:	e09f      	b.n	80043bc <_printf_i+0x1ec>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	0607      	lsls	r7, r0, #24
 8004282:	f103 0104 	add.w	r1, r3, #4
 8004286:	6029      	str	r1, [r5, #0]
 8004288:	d501      	bpl.n	800428e <_printf_i+0xbe>
 800428a:	681e      	ldr	r6, [r3, #0]
 800428c:	e003      	b.n	8004296 <_printf_i+0xc6>
 800428e:	0646      	lsls	r6, r0, #25
 8004290:	d5fb      	bpl.n	800428a <_printf_i+0xba>
 8004292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004296:	2e00      	cmp	r6, #0
 8004298:	da03      	bge.n	80042a2 <_printf_i+0xd2>
 800429a:	232d      	movs	r3, #45	; 0x2d
 800429c:	4276      	negs	r6, r6
 800429e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a2:	485a      	ldr	r0, [pc, #360]	; (800440c <_printf_i+0x23c>)
 80042a4:	230a      	movs	r3, #10
 80042a6:	e012      	b.n	80042ce <_printf_i+0xfe>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	6820      	ldr	r0, [r4, #0]
 80042ac:	1d19      	adds	r1, r3, #4
 80042ae:	6029      	str	r1, [r5, #0]
 80042b0:	0605      	lsls	r5, r0, #24
 80042b2:	d501      	bpl.n	80042b8 <_printf_i+0xe8>
 80042b4:	681e      	ldr	r6, [r3, #0]
 80042b6:	e002      	b.n	80042be <_printf_i+0xee>
 80042b8:	0641      	lsls	r1, r0, #25
 80042ba:	d5fb      	bpl.n	80042b4 <_printf_i+0xe4>
 80042bc:	881e      	ldrh	r6, [r3, #0]
 80042be:	4853      	ldr	r0, [pc, #332]	; (800440c <_printf_i+0x23c>)
 80042c0:	2f6f      	cmp	r7, #111	; 0x6f
 80042c2:	bf0c      	ite	eq
 80042c4:	2308      	moveq	r3, #8
 80042c6:	230a      	movne	r3, #10
 80042c8:	2100      	movs	r1, #0
 80042ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ce:	6865      	ldr	r5, [r4, #4]
 80042d0:	60a5      	str	r5, [r4, #8]
 80042d2:	2d00      	cmp	r5, #0
 80042d4:	bfa2      	ittt	ge
 80042d6:	6821      	ldrge	r1, [r4, #0]
 80042d8:	f021 0104 	bicge.w	r1, r1, #4
 80042dc:	6021      	strge	r1, [r4, #0]
 80042de:	b90e      	cbnz	r6, 80042e4 <_printf_i+0x114>
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	d04b      	beq.n	800437c <_printf_i+0x1ac>
 80042e4:	4615      	mov	r5, r2
 80042e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80042ea:	fb03 6711 	mls	r7, r3, r1, r6
 80042ee:	5dc7      	ldrb	r7, [r0, r7]
 80042f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042f4:	4637      	mov	r7, r6
 80042f6:	42bb      	cmp	r3, r7
 80042f8:	460e      	mov	r6, r1
 80042fa:	d9f4      	bls.n	80042e6 <_printf_i+0x116>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d10b      	bne.n	8004318 <_printf_i+0x148>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	07de      	lsls	r6, r3, #31
 8004304:	d508      	bpl.n	8004318 <_printf_i+0x148>
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	6861      	ldr	r1, [r4, #4]
 800430a:	4299      	cmp	r1, r3
 800430c:	bfde      	ittt	le
 800430e:	2330      	movle	r3, #48	; 0x30
 8004310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004314:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004318:	1b52      	subs	r2, r2, r5
 800431a:	6122      	str	r2, [r4, #16]
 800431c:	f8cd a000 	str.w	sl, [sp]
 8004320:	464b      	mov	r3, r9
 8004322:	aa03      	add	r2, sp, #12
 8004324:	4621      	mov	r1, r4
 8004326:	4640      	mov	r0, r8
 8004328:	f7ff fee4 	bl	80040f4 <_printf_common>
 800432c:	3001      	adds	r0, #1
 800432e:	d14a      	bne.n	80043c6 <_printf_i+0x1f6>
 8004330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004334:	b004      	add	sp, #16
 8004336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f043 0320 	orr.w	r3, r3, #32
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	4833      	ldr	r0, [pc, #204]	; (8004410 <_printf_i+0x240>)
 8004344:	2778      	movs	r7, #120	; 0x78
 8004346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	6829      	ldr	r1, [r5, #0]
 800434e:	061f      	lsls	r7, r3, #24
 8004350:	f851 6b04 	ldr.w	r6, [r1], #4
 8004354:	d402      	bmi.n	800435c <_printf_i+0x18c>
 8004356:	065f      	lsls	r7, r3, #25
 8004358:	bf48      	it	mi
 800435a:	b2b6      	uxthmi	r6, r6
 800435c:	07df      	lsls	r7, r3, #31
 800435e:	bf48      	it	mi
 8004360:	f043 0320 	orrmi.w	r3, r3, #32
 8004364:	6029      	str	r1, [r5, #0]
 8004366:	bf48      	it	mi
 8004368:	6023      	strmi	r3, [r4, #0]
 800436a:	b91e      	cbnz	r6, 8004374 <_printf_i+0x1a4>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	f023 0320 	bic.w	r3, r3, #32
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	2310      	movs	r3, #16
 8004376:	e7a7      	b.n	80042c8 <_printf_i+0xf8>
 8004378:	4824      	ldr	r0, [pc, #144]	; (800440c <_printf_i+0x23c>)
 800437a:	e7e4      	b.n	8004346 <_printf_i+0x176>
 800437c:	4615      	mov	r5, r2
 800437e:	e7bd      	b.n	80042fc <_printf_i+0x12c>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	6826      	ldr	r6, [r4, #0]
 8004384:	6961      	ldr	r1, [r4, #20]
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	6028      	str	r0, [r5, #0]
 800438a:	0635      	lsls	r5, r6, #24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1c4>
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1ca>
 8004394:	0670      	lsls	r0, r6, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x1c0>
 8004398:	8019      	strh	r1, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	4615      	mov	r5, r2
 80043a0:	e7bc      	b.n	800431c <_printf_i+0x14c>
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	602a      	str	r2, [r5, #0]
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f7fb ff16 	bl	80001e0 <memchr>
 80043b4:	b108      	cbz	r0, 80043ba <_printf_i+0x1ea>
 80043b6:	1b40      	subs	r0, r0, r5
 80043b8:	6060      	str	r0, [r4, #4]
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	2300      	movs	r3, #0
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c4:	e7aa      	b.n	800431c <_printf_i+0x14c>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	462a      	mov	r2, r5
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	47d0      	blx	sl
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0ad      	beq.n	8004330 <_printf_i+0x160>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	d413      	bmi.n	8004402 <_printf_i+0x232>
 80043da:	68e0      	ldr	r0, [r4, #12]
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	4298      	cmp	r0, r3
 80043e0:	bfb8      	it	lt
 80043e2:	4618      	movlt	r0, r3
 80043e4:	e7a6      	b.n	8004334 <_printf_i+0x164>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4632      	mov	r2, r6
 80043ea:	4649      	mov	r1, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	47d0      	blx	sl
 80043f0:	3001      	adds	r0, #1
 80043f2:	d09d      	beq.n	8004330 <_printf_i+0x160>
 80043f4:	3501      	adds	r5, #1
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	9903      	ldr	r1, [sp, #12]
 80043fa:	1a5b      	subs	r3, r3, r1
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dcf2      	bgt.n	80043e6 <_printf_i+0x216>
 8004400:	e7eb      	b.n	80043da <_printf_i+0x20a>
 8004402:	2500      	movs	r5, #0
 8004404:	f104 0619 	add.w	r6, r4, #25
 8004408:	e7f5      	b.n	80043f6 <_printf_i+0x226>
 800440a:	bf00      	nop
 800440c:	08006536 	.word	0x08006536
 8004410:	08006547 	.word	0x08006547

08004414 <std>:
 8004414:	2300      	movs	r3, #0
 8004416:	b510      	push	{r4, lr}
 8004418:	4604      	mov	r4, r0
 800441a:	e9c0 3300 	strd	r3, r3, [r0]
 800441e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004422:	6083      	str	r3, [r0, #8]
 8004424:	8181      	strh	r1, [r0, #12]
 8004426:	6643      	str	r3, [r0, #100]	; 0x64
 8004428:	81c2      	strh	r2, [r0, #14]
 800442a:	6183      	str	r3, [r0, #24]
 800442c:	4619      	mov	r1, r3
 800442e:	2208      	movs	r2, #8
 8004430:	305c      	adds	r0, #92	; 0x5c
 8004432:	f000 f8b1 	bl	8004598 <memset>
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <std+0x58>)
 8004438:	6263      	str	r3, [r4, #36]	; 0x24
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <std+0x5c>)
 800443c:	62a3      	str	r3, [r4, #40]	; 0x28
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <std+0x60>)
 8004440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <std+0x64>)
 8004444:	6323      	str	r3, [r4, #48]	; 0x30
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <std+0x68>)
 8004448:	6224      	str	r4, [r4, #32]
 800444a:	429c      	cmp	r4, r3
 800444c:	d006      	beq.n	800445c <std+0x48>
 800444e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004452:	4294      	cmp	r4, r2
 8004454:	d002      	beq.n	800445c <std+0x48>
 8004456:	33d0      	adds	r3, #208	; 0xd0
 8004458:	429c      	cmp	r4, r3
 800445a:	d105      	bne.n	8004468 <std+0x54>
 800445c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004464:	f000 b8ce 	b.w	8004604 <__retarget_lock_init_recursive>
 8004468:	bd10      	pop	{r4, pc}
 800446a:	bf00      	nop
 800446c:	08005cc1 	.word	0x08005cc1
 8004470:	08005ce3 	.word	0x08005ce3
 8004474:	08005d1b 	.word	0x08005d1b
 8004478:	08005d3f 	.word	0x08005d3f
 800447c:	20000330 	.word	0x20000330

08004480 <stdio_exit_handler>:
 8004480:	4a02      	ldr	r2, [pc, #8]	; (800448c <stdio_exit_handler+0xc>)
 8004482:	4903      	ldr	r1, [pc, #12]	; (8004490 <stdio_exit_handler+0x10>)
 8004484:	4803      	ldr	r0, [pc, #12]	; (8004494 <stdio_exit_handler+0x14>)
 8004486:	f000 b869 	b.w	800455c <_fwalk_sglue>
 800448a:	bf00      	nop
 800448c:	20000024 	.word	0x20000024
 8004490:	08005561 	.word	0x08005561
 8004494:	20000030 	.word	0x20000030

08004498 <cleanup_stdio>:
 8004498:	6841      	ldr	r1, [r0, #4]
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <cleanup_stdio+0x34>)
 800449c:	4299      	cmp	r1, r3
 800449e:	b510      	push	{r4, lr}
 80044a0:	4604      	mov	r4, r0
 80044a2:	d001      	beq.n	80044a8 <cleanup_stdio+0x10>
 80044a4:	f001 f85c 	bl	8005560 <_fflush_r>
 80044a8:	68a1      	ldr	r1, [r4, #8]
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <cleanup_stdio+0x38>)
 80044ac:	4299      	cmp	r1, r3
 80044ae:	d002      	beq.n	80044b6 <cleanup_stdio+0x1e>
 80044b0:	4620      	mov	r0, r4
 80044b2:	f001 f855 	bl	8005560 <_fflush_r>
 80044b6:	68e1      	ldr	r1, [r4, #12]
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <cleanup_stdio+0x3c>)
 80044ba:	4299      	cmp	r1, r3
 80044bc:	d004      	beq.n	80044c8 <cleanup_stdio+0x30>
 80044be:	4620      	mov	r0, r4
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c4:	f001 b84c 	b.w	8005560 <_fflush_r>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	bf00      	nop
 80044cc:	20000330 	.word	0x20000330
 80044d0:	20000398 	.word	0x20000398
 80044d4:	20000400 	.word	0x20000400

080044d8 <global_stdio_init.part.0>:
 80044d8:	b510      	push	{r4, lr}
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <global_stdio_init.part.0+0x30>)
 80044dc:	4c0b      	ldr	r4, [pc, #44]	; (800450c <global_stdio_init.part.0+0x34>)
 80044de:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <global_stdio_init.part.0+0x38>)
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	4620      	mov	r0, r4
 80044e4:	2200      	movs	r2, #0
 80044e6:	2104      	movs	r1, #4
 80044e8:	f7ff ff94 	bl	8004414 <std>
 80044ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80044f0:	2201      	movs	r2, #1
 80044f2:	2109      	movs	r1, #9
 80044f4:	f7ff ff8e 	bl	8004414 <std>
 80044f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80044fc:	2202      	movs	r2, #2
 80044fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004502:	2112      	movs	r1, #18
 8004504:	f7ff bf86 	b.w	8004414 <std>
 8004508:	20000468 	.word	0x20000468
 800450c:	20000330 	.word	0x20000330
 8004510:	08004481 	.word	0x08004481

08004514 <__sfp_lock_acquire>:
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <__sfp_lock_acquire+0x8>)
 8004516:	f000 b876 	b.w	8004606 <__retarget_lock_acquire_recursive>
 800451a:	bf00      	nop
 800451c:	2000046d 	.word	0x2000046d

08004520 <__sfp_lock_release>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__sfp_lock_release+0x8>)
 8004522:	f000 b871 	b.w	8004608 <__retarget_lock_release_recursive>
 8004526:	bf00      	nop
 8004528:	2000046d 	.word	0x2000046d

0800452c <__sinit>:
 800452c:	b510      	push	{r4, lr}
 800452e:	4604      	mov	r4, r0
 8004530:	f7ff fff0 	bl	8004514 <__sfp_lock_acquire>
 8004534:	6a23      	ldr	r3, [r4, #32]
 8004536:	b11b      	cbz	r3, 8004540 <__sinit+0x14>
 8004538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800453c:	f7ff bff0 	b.w	8004520 <__sfp_lock_release>
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__sinit+0x28>)
 8004542:	6223      	str	r3, [r4, #32]
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <__sinit+0x2c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f5      	bne.n	8004538 <__sinit+0xc>
 800454c:	f7ff ffc4 	bl	80044d8 <global_stdio_init.part.0>
 8004550:	e7f2      	b.n	8004538 <__sinit+0xc>
 8004552:	bf00      	nop
 8004554:	08004499 	.word	0x08004499
 8004558:	20000468 	.word	0x20000468

0800455c <_fwalk_sglue>:
 800455c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004560:	4607      	mov	r7, r0
 8004562:	4688      	mov	r8, r1
 8004564:	4614      	mov	r4, r2
 8004566:	2600      	movs	r6, #0
 8004568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800456c:	f1b9 0901 	subs.w	r9, r9, #1
 8004570:	d505      	bpl.n	800457e <_fwalk_sglue+0x22>
 8004572:	6824      	ldr	r4, [r4, #0]
 8004574:	2c00      	cmp	r4, #0
 8004576:	d1f7      	bne.n	8004568 <_fwalk_sglue+0xc>
 8004578:	4630      	mov	r0, r6
 800457a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800457e:	89ab      	ldrh	r3, [r5, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d907      	bls.n	8004594 <_fwalk_sglue+0x38>
 8004584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004588:	3301      	adds	r3, #1
 800458a:	d003      	beq.n	8004594 <_fwalk_sglue+0x38>
 800458c:	4629      	mov	r1, r5
 800458e:	4638      	mov	r0, r7
 8004590:	47c0      	blx	r8
 8004592:	4306      	orrs	r6, r0
 8004594:	3568      	adds	r5, #104	; 0x68
 8004596:	e7e9      	b.n	800456c <_fwalk_sglue+0x10>

08004598 <memset>:
 8004598:	4402      	add	r2, r0
 800459a:	4603      	mov	r3, r0
 800459c:	4293      	cmp	r3, r2
 800459e:	d100      	bne.n	80045a2 <memset+0xa>
 80045a0:	4770      	bx	lr
 80045a2:	f803 1b01 	strb.w	r1, [r3], #1
 80045a6:	e7f9      	b.n	800459c <memset+0x4>

080045a8 <_localeconv_r>:
 80045a8:	4800      	ldr	r0, [pc, #0]	; (80045ac <_localeconv_r+0x4>)
 80045aa:	4770      	bx	lr
 80045ac:	20000170 	.word	0x20000170

080045b0 <__errno>:
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <__errno+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	2000007c 	.word	0x2000007c

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	; (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	; (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	; (8004600 <__libc_init_array+0x44>)
 80045d0:	f001 ff78 	bl	80064c4 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	0800689c 	.word	0x0800689c
 80045f8:	0800689c 	.word	0x0800689c
 80045fc:	0800689c 	.word	0x0800689c
 8004600:	080068a0 	.word	0x080068a0

08004604 <__retarget_lock_init_recursive>:
 8004604:	4770      	bx	lr

08004606 <__retarget_lock_acquire_recursive>:
 8004606:	4770      	bx	lr

08004608 <__retarget_lock_release_recursive>:
 8004608:	4770      	bx	lr

0800460a <quorem>:
 800460a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460e:	6903      	ldr	r3, [r0, #16]
 8004610:	690c      	ldr	r4, [r1, #16]
 8004612:	42a3      	cmp	r3, r4
 8004614:	4607      	mov	r7, r0
 8004616:	db7e      	blt.n	8004716 <quorem+0x10c>
 8004618:	3c01      	subs	r4, #1
 800461a:	f101 0814 	add.w	r8, r1, #20
 800461e:	f100 0514 	add.w	r5, r0, #20
 8004622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800462c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004630:	3301      	adds	r3, #1
 8004632:	429a      	cmp	r2, r3
 8004634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800463c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004640:	d331      	bcc.n	80046a6 <quorem+0x9c>
 8004642:	f04f 0e00 	mov.w	lr, #0
 8004646:	4640      	mov	r0, r8
 8004648:	46ac      	mov	ip, r5
 800464a:	46f2      	mov	sl, lr
 800464c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004650:	b293      	uxth	r3, r2
 8004652:	fb06 e303 	mla	r3, r6, r3, lr
 8004656:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800465a:	0c1a      	lsrs	r2, r3, #16
 800465c:	b29b      	uxth	r3, r3
 800465e:	ebaa 0303 	sub.w	r3, sl, r3
 8004662:	f8dc a000 	ldr.w	sl, [ip]
 8004666:	fa13 f38a 	uxtah	r3, r3, sl
 800466a:	fb06 220e 	mla	r2, r6, lr, r2
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	9b00      	ldr	r3, [sp, #0]
 8004672:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004676:	b292      	uxth	r2, r2
 8004678:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800467c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004680:	f8bd 3000 	ldrh.w	r3, [sp]
 8004684:	4581      	cmp	r9, r0
 8004686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800468a:	f84c 3b04 	str.w	r3, [ip], #4
 800468e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004692:	d2db      	bcs.n	800464c <quorem+0x42>
 8004694:	f855 300b 	ldr.w	r3, [r5, fp]
 8004698:	b92b      	cbnz	r3, 80046a6 <quorem+0x9c>
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	3b04      	subs	r3, #4
 800469e:	429d      	cmp	r5, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	d32c      	bcc.n	80046fe <quorem+0xf4>
 80046a4:	613c      	str	r4, [r7, #16]
 80046a6:	4638      	mov	r0, r7
 80046a8:	f001 fa0a 	bl	8005ac0 <__mcmp>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	db22      	blt.n	80046f6 <quorem+0xec>
 80046b0:	3601      	adds	r6, #1
 80046b2:	4629      	mov	r1, r5
 80046b4:	2000      	movs	r0, #0
 80046b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80046ba:	f8d1 c000 	ldr.w	ip, [r1]
 80046be:	b293      	uxth	r3, r2
 80046c0:	1ac3      	subs	r3, r0, r3
 80046c2:	0c12      	lsrs	r2, r2, #16
 80046c4:	fa13 f38c 	uxtah	r3, r3, ip
 80046c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80046cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046d6:	45c1      	cmp	r9, r8
 80046d8:	f841 3b04 	str.w	r3, [r1], #4
 80046dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80046e0:	d2e9      	bcs.n	80046b6 <quorem+0xac>
 80046e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046ea:	b922      	cbnz	r2, 80046f6 <quorem+0xec>
 80046ec:	3b04      	subs	r3, #4
 80046ee:	429d      	cmp	r5, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	d30a      	bcc.n	800470a <quorem+0x100>
 80046f4:	613c      	str	r4, [r7, #16]
 80046f6:	4630      	mov	r0, r6
 80046f8:	b003      	add	sp, #12
 80046fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	3b04      	subs	r3, #4
 8004702:	2a00      	cmp	r2, #0
 8004704:	d1ce      	bne.n	80046a4 <quorem+0x9a>
 8004706:	3c01      	subs	r4, #1
 8004708:	e7c9      	b.n	800469e <quorem+0x94>
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	3b04      	subs	r3, #4
 800470e:	2a00      	cmp	r2, #0
 8004710:	d1f0      	bne.n	80046f4 <quorem+0xea>
 8004712:	3c01      	subs	r4, #1
 8004714:	e7eb      	b.n	80046ee <quorem+0xe4>
 8004716:	2000      	movs	r0, #0
 8004718:	e7ee      	b.n	80046f8 <quorem+0xee>
 800471a:	0000      	movs	r0, r0
 800471c:	0000      	movs	r0, r0
	...

08004720 <_dtoa_r>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	ed2d 8b04 	vpush	{d8-d9}
 8004728:	69c5      	ldr	r5, [r0, #28]
 800472a:	b093      	sub	sp, #76	; 0x4c
 800472c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004730:	ec57 6b10 	vmov	r6, r7, d0
 8004734:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004738:	9107      	str	r1, [sp, #28]
 800473a:	4604      	mov	r4, r0
 800473c:	920a      	str	r2, [sp, #40]	; 0x28
 800473e:	930d      	str	r3, [sp, #52]	; 0x34
 8004740:	b975      	cbnz	r5, 8004760 <_dtoa_r+0x40>
 8004742:	2010      	movs	r0, #16
 8004744:	f000 fdde 	bl	8005304 <malloc>
 8004748:	4602      	mov	r2, r0
 800474a:	61e0      	str	r0, [r4, #28]
 800474c:	b920      	cbnz	r0, 8004758 <_dtoa_r+0x38>
 800474e:	4bae      	ldr	r3, [pc, #696]	; (8004a08 <_dtoa_r+0x2e8>)
 8004750:	21ef      	movs	r1, #239	; 0xef
 8004752:	48ae      	ldr	r0, [pc, #696]	; (8004a0c <_dtoa_r+0x2ec>)
 8004754:	f001 fb5c 	bl	8005e10 <__assert_func>
 8004758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800475c:	6005      	str	r5, [r0, #0]
 800475e:	60c5      	str	r5, [r0, #12]
 8004760:	69e3      	ldr	r3, [r4, #28]
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	b151      	cbz	r1, 800477c <_dtoa_r+0x5c>
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	604a      	str	r2, [r1, #4]
 800476a:	2301      	movs	r3, #1
 800476c:	4093      	lsls	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
 8004770:	4620      	mov	r0, r4
 8004772:	f000 ff69 	bl	8005648 <_Bfree>
 8004776:	69e3      	ldr	r3, [r4, #28]
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	1e3b      	subs	r3, r7, #0
 800477e:	bfbb      	ittet	lt
 8004780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004784:	9303      	strlt	r3, [sp, #12]
 8004786:	2300      	movge	r3, #0
 8004788:	2201      	movlt	r2, #1
 800478a:	bfac      	ite	ge
 800478c:	f8c8 3000 	strge.w	r3, [r8]
 8004790:	f8c8 2000 	strlt.w	r2, [r8]
 8004794:	4b9e      	ldr	r3, [pc, #632]	; (8004a10 <_dtoa_r+0x2f0>)
 8004796:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800479a:	ea33 0308 	bics.w	r3, r3, r8
 800479e:	d11b      	bne.n	80047d8 <_dtoa_r+0xb8>
 80047a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80047ac:	4333      	orrs	r3, r6
 80047ae:	f000 8593 	beq.w	80052d8 <_dtoa_r+0xbb8>
 80047b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047b4:	b963      	cbnz	r3, 80047d0 <_dtoa_r+0xb0>
 80047b6:	4b97      	ldr	r3, [pc, #604]	; (8004a14 <_dtoa_r+0x2f4>)
 80047b8:	e027      	b.n	800480a <_dtoa_r+0xea>
 80047ba:	4b97      	ldr	r3, [pc, #604]	; (8004a18 <_dtoa_r+0x2f8>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	9800      	ldr	r0, [sp, #0]
 80047c6:	b013      	add	sp, #76	; 0x4c
 80047c8:	ecbd 8b04 	vpop	{d8-d9}
 80047cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d0:	4b90      	ldr	r3, [pc, #576]	; (8004a14 <_dtoa_r+0x2f4>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	3303      	adds	r3, #3
 80047d6:	e7f3      	b.n	80047c0 <_dtoa_r+0xa0>
 80047d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047dc:	2200      	movs	r2, #0
 80047de:	ec51 0b17 	vmov	r0, r1, d7
 80047e2:	eeb0 8a47 	vmov.f32	s16, s14
 80047e6:	eef0 8a67 	vmov.f32	s17, s15
 80047ea:	2300      	movs	r3, #0
 80047ec:	f7fc f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80047f0:	4681      	mov	r9, r0
 80047f2:	b160      	cbz	r0, 800480e <_dtoa_r+0xee>
 80047f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047f6:	2301      	movs	r3, #1
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8568 	beq.w	80052d2 <_dtoa_r+0xbb2>
 8004802:	4b86      	ldr	r3, [pc, #536]	; (8004a1c <_dtoa_r+0x2fc>)
 8004804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	3b01      	subs	r3, #1
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	e7da      	b.n	80047c4 <_dtoa_r+0xa4>
 800480e:	aa10      	add	r2, sp, #64	; 0x40
 8004810:	a911      	add	r1, sp, #68	; 0x44
 8004812:	4620      	mov	r0, r4
 8004814:	eeb0 0a48 	vmov.f32	s0, s16
 8004818:	eef0 0a68 	vmov.f32	s1, s17
 800481c:	f001 f9f6 	bl	8005c0c <__d2b>
 8004820:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004824:	4682      	mov	sl, r0
 8004826:	2d00      	cmp	r5, #0
 8004828:	d07f      	beq.n	800492a <_dtoa_r+0x20a>
 800482a:	ee18 3a90 	vmov	r3, s17
 800482e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004832:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004836:	ec51 0b18 	vmov	r0, r1, d8
 800483a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800483e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004842:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004846:	4619      	mov	r1, r3
 8004848:	2200      	movs	r2, #0
 800484a:	4b75      	ldr	r3, [pc, #468]	; (8004a20 <_dtoa_r+0x300>)
 800484c:	f7fb fd24 	bl	8000298 <__aeabi_dsub>
 8004850:	a367      	add	r3, pc, #412	; (adr r3, 80049f0 <_dtoa_r+0x2d0>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f7fb fed7 	bl	8000608 <__aeabi_dmul>
 800485a:	a367      	add	r3, pc, #412	; (adr r3, 80049f8 <_dtoa_r+0x2d8>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fd1c 	bl	800029c <__adddf3>
 8004864:	4606      	mov	r6, r0
 8004866:	4628      	mov	r0, r5
 8004868:	460f      	mov	r7, r1
 800486a:	f7fb fe63 	bl	8000534 <__aeabi_i2d>
 800486e:	a364      	add	r3, pc, #400	; (adr r3, 8004a00 <_dtoa_r+0x2e0>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f7fb fec8 	bl	8000608 <__aeabi_dmul>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	f7fb fd0c 	bl	800029c <__adddf3>
 8004884:	4606      	mov	r6, r0
 8004886:	460f      	mov	r7, r1
 8004888:	f7fc f96e 	bl	8000b68 <__aeabi_d2iz>
 800488c:	2200      	movs	r2, #0
 800488e:	4683      	mov	fp, r0
 8004890:	2300      	movs	r3, #0
 8004892:	4630      	mov	r0, r6
 8004894:	4639      	mov	r1, r7
 8004896:	f7fc f929 	bl	8000aec <__aeabi_dcmplt>
 800489a:	b148      	cbz	r0, 80048b0 <_dtoa_r+0x190>
 800489c:	4658      	mov	r0, fp
 800489e:	f7fb fe49 	bl	8000534 <__aeabi_i2d>
 80048a2:	4632      	mov	r2, r6
 80048a4:	463b      	mov	r3, r7
 80048a6:	f7fc f917 	bl	8000ad8 <__aeabi_dcmpeq>
 80048aa:	b908      	cbnz	r0, 80048b0 <_dtoa_r+0x190>
 80048ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80048b0:	f1bb 0f16 	cmp.w	fp, #22
 80048b4:	d857      	bhi.n	8004966 <_dtoa_r+0x246>
 80048b6:	4b5b      	ldr	r3, [pc, #364]	; (8004a24 <_dtoa_r+0x304>)
 80048b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	ec51 0b18 	vmov	r0, r1, d8
 80048c4:	f7fc f912 	bl	8000aec <__aeabi_dcmplt>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d04e      	beq.n	800496a <_dtoa_r+0x24a>
 80048cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80048d0:	2300      	movs	r3, #0
 80048d2:	930c      	str	r3, [sp, #48]	; 0x30
 80048d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048d6:	1b5b      	subs	r3, r3, r5
 80048d8:	1e5a      	subs	r2, r3, #1
 80048da:	bf45      	ittet	mi
 80048dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80048e0:	9305      	strmi	r3, [sp, #20]
 80048e2:	2300      	movpl	r3, #0
 80048e4:	2300      	movmi	r3, #0
 80048e6:	9206      	str	r2, [sp, #24]
 80048e8:	bf54      	ite	pl
 80048ea:	9305      	strpl	r3, [sp, #20]
 80048ec:	9306      	strmi	r3, [sp, #24]
 80048ee:	f1bb 0f00 	cmp.w	fp, #0
 80048f2:	db3c      	blt.n	800496e <_dtoa_r+0x24e>
 80048f4:	9b06      	ldr	r3, [sp, #24]
 80048f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80048fa:	445b      	add	r3, fp
 80048fc:	9306      	str	r3, [sp, #24]
 80048fe:	2300      	movs	r3, #0
 8004900:	9308      	str	r3, [sp, #32]
 8004902:	9b07      	ldr	r3, [sp, #28]
 8004904:	2b09      	cmp	r3, #9
 8004906:	d868      	bhi.n	80049da <_dtoa_r+0x2ba>
 8004908:	2b05      	cmp	r3, #5
 800490a:	bfc4      	itt	gt
 800490c:	3b04      	subgt	r3, #4
 800490e:	9307      	strgt	r3, [sp, #28]
 8004910:	9b07      	ldr	r3, [sp, #28]
 8004912:	f1a3 0302 	sub.w	r3, r3, #2
 8004916:	bfcc      	ite	gt
 8004918:	2500      	movgt	r5, #0
 800491a:	2501      	movle	r5, #1
 800491c:	2b03      	cmp	r3, #3
 800491e:	f200 8085 	bhi.w	8004a2c <_dtoa_r+0x30c>
 8004922:	e8df f003 	tbb	[pc, r3]
 8004926:	3b2e      	.short	0x3b2e
 8004928:	5839      	.short	0x5839
 800492a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800492e:	441d      	add	r5, r3
 8004930:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004934:	2b20      	cmp	r3, #32
 8004936:	bfc1      	itttt	gt
 8004938:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800493c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004940:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004944:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004948:	bfd6      	itet	le
 800494a:	f1c3 0320 	rsble	r3, r3, #32
 800494e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004952:	fa06 f003 	lslle.w	r0, r6, r3
 8004956:	f7fb fddd 	bl	8000514 <__aeabi_ui2d>
 800495a:	2201      	movs	r2, #1
 800495c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004960:	3d01      	subs	r5, #1
 8004962:	920e      	str	r2, [sp, #56]	; 0x38
 8004964:	e76f      	b.n	8004846 <_dtoa_r+0x126>
 8004966:	2301      	movs	r3, #1
 8004968:	e7b3      	b.n	80048d2 <_dtoa_r+0x1b2>
 800496a:	900c      	str	r0, [sp, #48]	; 0x30
 800496c:	e7b2      	b.n	80048d4 <_dtoa_r+0x1b4>
 800496e:	9b05      	ldr	r3, [sp, #20]
 8004970:	eba3 030b 	sub.w	r3, r3, fp
 8004974:	9305      	str	r3, [sp, #20]
 8004976:	f1cb 0300 	rsb	r3, fp, #0
 800497a:	9308      	str	r3, [sp, #32]
 800497c:	2300      	movs	r3, #0
 800497e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004980:	e7bf      	b.n	8004902 <_dtoa_r+0x1e2>
 8004982:	2300      	movs	r3, #0
 8004984:	9309      	str	r3, [sp, #36]	; 0x24
 8004986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	dc52      	bgt.n	8004a32 <_dtoa_r+0x312>
 800498c:	2301      	movs	r3, #1
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	461a      	mov	r2, r3
 8004994:	920a      	str	r2, [sp, #40]	; 0x28
 8004996:	e00b      	b.n	80049b0 <_dtoa_r+0x290>
 8004998:	2301      	movs	r3, #1
 800499a:	e7f3      	b.n	8004984 <_dtoa_r+0x264>
 800499c:	2300      	movs	r3, #0
 800499e:	9309      	str	r3, [sp, #36]	; 0x24
 80049a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a2:	445b      	add	r3, fp
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	3301      	adds	r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	bfb8      	it	lt
 80049ae:	2301      	movlt	r3, #1
 80049b0:	69e0      	ldr	r0, [r4, #28]
 80049b2:	2100      	movs	r1, #0
 80049b4:	2204      	movs	r2, #4
 80049b6:	f102 0614 	add.w	r6, r2, #20
 80049ba:	429e      	cmp	r6, r3
 80049bc:	d93d      	bls.n	8004a3a <_dtoa_r+0x31a>
 80049be:	6041      	str	r1, [r0, #4]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fe01 	bl	80055c8 <_Balloc>
 80049c6:	9000      	str	r0, [sp, #0]
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d139      	bne.n	8004a40 <_dtoa_r+0x320>
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <_dtoa_r+0x308>)
 80049ce:	4602      	mov	r2, r0
 80049d0:	f240 11af 	movw	r1, #431	; 0x1af
 80049d4:	e6bd      	b.n	8004752 <_dtoa_r+0x32>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e7e1      	b.n	800499e <_dtoa_r+0x27e>
 80049da:	2501      	movs	r5, #1
 80049dc:	2300      	movs	r3, #0
 80049de:	9307      	str	r3, [sp, #28]
 80049e0:	9509      	str	r5, [sp, #36]	; 0x24
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	9304      	str	r3, [sp, #16]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2312      	movs	r3, #18
 80049ee:	e7d1      	b.n	8004994 <_dtoa_r+0x274>
 80049f0:	636f4361 	.word	0x636f4361
 80049f4:	3fd287a7 	.word	0x3fd287a7
 80049f8:	8b60c8b3 	.word	0x8b60c8b3
 80049fc:	3fc68a28 	.word	0x3fc68a28
 8004a00:	509f79fb 	.word	0x509f79fb
 8004a04:	3fd34413 	.word	0x3fd34413
 8004a08:	08006565 	.word	0x08006565
 8004a0c:	0800657c 	.word	0x0800657c
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	08006561 	.word	0x08006561
 8004a18:	08006558 	.word	0x08006558
 8004a1c:	08006535 	.word	0x08006535
 8004a20:	3ff80000 	.word	0x3ff80000
 8004a24:	08006668 	.word	0x08006668
 8004a28:	080065d4 	.word	0x080065d4
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a30:	e7d7      	b.n	80049e2 <_dtoa_r+0x2c2>
 8004a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	9304      	str	r3, [sp, #16]
 8004a38:	e7ba      	b.n	80049b0 <_dtoa_r+0x290>
 8004a3a:	3101      	adds	r1, #1
 8004a3c:	0052      	lsls	r2, r2, #1
 8004a3e:	e7ba      	b.n	80049b6 <_dtoa_r+0x296>
 8004a40:	69e3      	ldr	r3, [r4, #28]
 8004a42:	9a00      	ldr	r2, [sp, #0]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	9b04      	ldr	r3, [sp, #16]
 8004a48:	2b0e      	cmp	r3, #14
 8004a4a:	f200 80a8 	bhi.w	8004b9e <_dtoa_r+0x47e>
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	f000 80a5 	beq.w	8004b9e <_dtoa_r+0x47e>
 8004a54:	f1bb 0f00 	cmp.w	fp, #0
 8004a58:	dd38      	ble.n	8004acc <_dtoa_r+0x3ac>
 8004a5a:	4bc0      	ldr	r3, [pc, #768]	; (8004d5c <_dtoa_r+0x63c>)
 8004a5c:	f00b 020f 	and.w	r2, fp, #15
 8004a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004a68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004a6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004a70:	d019      	beq.n	8004aa6 <_dtoa_r+0x386>
 8004a72:	4bbb      	ldr	r3, [pc, #748]	; (8004d60 <_dtoa_r+0x640>)
 8004a74:	ec51 0b18 	vmov	r0, r1, d8
 8004a78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a7c:	f7fb feee 	bl	800085c <__aeabi_ddiv>
 8004a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a84:	f008 080f 	and.w	r8, r8, #15
 8004a88:	2503      	movs	r5, #3
 8004a8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004d60 <_dtoa_r+0x640>
 8004a8e:	f1b8 0f00 	cmp.w	r8, #0
 8004a92:	d10a      	bne.n	8004aaa <_dtoa_r+0x38a>
 8004a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a98:	4632      	mov	r2, r6
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	f7fb fede 	bl	800085c <__aeabi_ddiv>
 8004aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa4:	e02b      	b.n	8004afe <_dtoa_r+0x3de>
 8004aa6:	2502      	movs	r5, #2
 8004aa8:	e7ef      	b.n	8004a8a <_dtoa_r+0x36a>
 8004aaa:	f018 0f01 	tst.w	r8, #1
 8004aae:	d008      	beq.n	8004ac2 <_dtoa_r+0x3a2>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004ab8:	f7fb fda6 	bl	8000608 <__aeabi_dmul>
 8004abc:	3501      	adds	r5, #1
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460f      	mov	r7, r1
 8004ac2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004ac6:	f109 0908 	add.w	r9, r9, #8
 8004aca:	e7e0      	b.n	8004a8e <_dtoa_r+0x36e>
 8004acc:	f000 809f 	beq.w	8004c0e <_dtoa_r+0x4ee>
 8004ad0:	f1cb 0600 	rsb	r6, fp, #0
 8004ad4:	4ba1      	ldr	r3, [pc, #644]	; (8004d5c <_dtoa_r+0x63c>)
 8004ad6:	4fa2      	ldr	r7, [pc, #648]	; (8004d60 <_dtoa_r+0x640>)
 8004ad8:	f006 020f 	and.w	r2, r6, #15
 8004adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	ec51 0b18 	vmov	r0, r1, d8
 8004ae8:	f7fb fd8e 	bl	8000608 <__aeabi_dmul>
 8004aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af0:	1136      	asrs	r6, r6, #4
 8004af2:	2300      	movs	r3, #0
 8004af4:	2502      	movs	r5, #2
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	d17e      	bne.n	8004bf8 <_dtoa_r+0x4d8>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1d0      	bne.n	8004aa0 <_dtoa_r+0x380>
 8004afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8084 	beq.w	8004c12 <_dtoa_r+0x4f2>
 8004b0a:	4b96      	ldr	r3, [pc, #600]	; (8004d64 <_dtoa_r+0x644>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4640      	mov	r0, r8
 8004b10:	4649      	mov	r1, r9
 8004b12:	f7fb ffeb 	bl	8000aec <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d07b      	beq.n	8004c12 <_dtoa_r+0x4f2>
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d078      	beq.n	8004c12 <_dtoa_r+0x4f2>
 8004b20:	9b01      	ldr	r3, [sp, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dd39      	ble.n	8004b9a <_dtoa_r+0x47a>
 8004b26:	4b90      	ldr	r3, [pc, #576]	; (8004d68 <_dtoa_r+0x648>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	f7fb fd6b 	bl	8000608 <__aeabi_dmul>
 8004b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b36:	9e01      	ldr	r6, [sp, #4]
 8004b38:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7fb fcf6 	bl	8000534 <__aeabi_i2d>
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	f7fb fd5c 	bl	8000608 <__aeabi_dmul>
 8004b50:	4b86      	ldr	r3, [pc, #536]	; (8004d6c <_dtoa_r+0x64c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	f7fb fba2 	bl	800029c <__adddf3>
 8004b58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b60:	9303      	str	r3, [sp, #12]
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	d158      	bne.n	8004c18 <_dtoa_r+0x4f8>
 8004b66:	4b82      	ldr	r3, [pc, #520]	; (8004d70 <_dtoa_r+0x650>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb fb93 	bl	8000298 <__aeabi_dsub>
 8004b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b76:	4680      	mov	r8, r0
 8004b78:	4689      	mov	r9, r1
 8004b7a:	f7fb ffd5 	bl	8000b28 <__aeabi_dcmpgt>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	f040 8296 	bne.w	80050b0 <_dtoa_r+0x990>
 8004b84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004b88:	4640      	mov	r0, r8
 8004b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f7fb ffac 	bl	8000aec <__aeabi_dcmplt>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f040 8289 	bne.w	80050ac <_dtoa_r+0x98c>
 8004b9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f2c0 814e 	blt.w	8004e42 <_dtoa_r+0x722>
 8004ba6:	f1bb 0f0e 	cmp.w	fp, #14
 8004baa:	f300 814a 	bgt.w	8004e42 <_dtoa_r+0x722>
 8004bae:	4b6b      	ldr	r3, [pc, #428]	; (8004d5c <_dtoa_r+0x63c>)
 8004bb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004bb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f280 80dc 	bge.w	8004d78 <_dtoa_r+0x658>
 8004bc0:	9b04      	ldr	r3, [sp, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f300 80d8 	bgt.w	8004d78 <_dtoa_r+0x658>
 8004bc8:	f040 826f 	bne.w	80050aa <_dtoa_r+0x98a>
 8004bcc:	4b68      	ldr	r3, [pc, #416]	; (8004d70 <_dtoa_r+0x650>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	f7fb fd18 	bl	8000608 <__aeabi_dmul>
 8004bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bdc:	f7fb ff9a 	bl	8000b14 <__aeabi_dcmpge>
 8004be0:	9e04      	ldr	r6, [sp, #16]
 8004be2:	4637      	mov	r7, r6
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f040 8245 	bne.w	8005074 <_dtoa_r+0x954>
 8004bea:	9d00      	ldr	r5, [sp, #0]
 8004bec:	2331      	movs	r3, #49	; 0x31
 8004bee:	f805 3b01 	strb.w	r3, [r5], #1
 8004bf2:	f10b 0b01 	add.w	fp, fp, #1
 8004bf6:	e241      	b.n	800507c <_dtoa_r+0x95c>
 8004bf8:	07f2      	lsls	r2, r6, #31
 8004bfa:	d505      	bpl.n	8004c08 <_dtoa_r+0x4e8>
 8004bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c00:	f7fb fd02 	bl	8000608 <__aeabi_dmul>
 8004c04:	3501      	adds	r5, #1
 8004c06:	2301      	movs	r3, #1
 8004c08:	1076      	asrs	r6, r6, #1
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	e773      	b.n	8004af6 <_dtoa_r+0x3d6>
 8004c0e:	2502      	movs	r5, #2
 8004c10:	e775      	b.n	8004afe <_dtoa_r+0x3de>
 8004c12:	9e04      	ldr	r6, [sp, #16]
 8004c14:	465f      	mov	r7, fp
 8004c16:	e792      	b.n	8004b3e <_dtoa_r+0x41e>
 8004c18:	9900      	ldr	r1, [sp, #0]
 8004c1a:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <_dtoa_r+0x63c>)
 8004c1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c20:	4431      	add	r1, r6
 8004c22:	9102      	str	r1, [sp, #8]
 8004c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c26:	eeb0 9a47 	vmov.f32	s18, s14
 8004c2a:	eef0 9a67 	vmov.f32	s19, s15
 8004c2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c36:	2900      	cmp	r1, #0
 8004c38:	d044      	beq.n	8004cc4 <_dtoa_r+0x5a4>
 8004c3a:	494e      	ldr	r1, [pc, #312]	; (8004d74 <_dtoa_r+0x654>)
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fb fe0d 	bl	800085c <__aeabi_ddiv>
 8004c42:	ec53 2b19 	vmov	r2, r3, d9
 8004c46:	f7fb fb27 	bl	8000298 <__aeabi_dsub>
 8004c4a:	9d00      	ldr	r5, [sp, #0]
 8004c4c:	ec41 0b19 	vmov	d9, r0, r1
 8004c50:	4649      	mov	r1, r9
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7fb ff88 	bl	8000b68 <__aeabi_d2iz>
 8004c58:	4606      	mov	r6, r0
 8004c5a:	f7fb fc6b 	bl	8000534 <__aeabi_i2d>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4640      	mov	r0, r8
 8004c64:	4649      	mov	r1, r9
 8004c66:	f7fb fb17 	bl	8000298 <__aeabi_dsub>
 8004c6a:	3630      	adds	r6, #48	; 0x30
 8004c6c:	f805 6b01 	strb.w	r6, [r5], #1
 8004c70:	ec53 2b19 	vmov	r2, r3, d9
 8004c74:	4680      	mov	r8, r0
 8004c76:	4689      	mov	r9, r1
 8004c78:	f7fb ff38 	bl	8000aec <__aeabi_dcmplt>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d164      	bne.n	8004d4a <_dtoa_r+0x62a>
 8004c80:	4642      	mov	r2, r8
 8004c82:	464b      	mov	r3, r9
 8004c84:	4937      	ldr	r1, [pc, #220]	; (8004d64 <_dtoa_r+0x644>)
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7fb fb06 	bl	8000298 <__aeabi_dsub>
 8004c8c:	ec53 2b19 	vmov	r2, r3, d9
 8004c90:	f7fb ff2c 	bl	8000aec <__aeabi_dcmplt>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f040 80b6 	bne.w	8004e06 <_dtoa_r+0x6e6>
 8004c9a:	9b02      	ldr	r3, [sp, #8]
 8004c9c:	429d      	cmp	r5, r3
 8004c9e:	f43f af7c 	beq.w	8004b9a <_dtoa_r+0x47a>
 8004ca2:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <_dtoa_r+0x648>)
 8004ca4:	ec51 0b19 	vmov	r0, r1, d9
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f7fb fcad 	bl	8000608 <__aeabi_dmul>
 8004cae:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <_dtoa_r+0x648>)
 8004cb0:	ec41 0b19 	vmov	d9, r0, r1
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	4649      	mov	r1, r9
 8004cba:	f7fb fca5 	bl	8000608 <__aeabi_dmul>
 8004cbe:	4680      	mov	r8, r0
 8004cc0:	4689      	mov	r9, r1
 8004cc2:	e7c5      	b.n	8004c50 <_dtoa_r+0x530>
 8004cc4:	ec51 0b17 	vmov	r0, r1, d7
 8004cc8:	f7fb fc9e 	bl	8000608 <__aeabi_dmul>
 8004ccc:	9b02      	ldr	r3, [sp, #8]
 8004cce:	9d00      	ldr	r5, [sp, #0]
 8004cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cd2:	ec41 0b19 	vmov	d9, r0, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	f7fb ff45 	bl	8000b68 <__aeabi_d2iz>
 8004cde:	4606      	mov	r6, r0
 8004ce0:	f7fb fc28 	bl	8000534 <__aeabi_i2d>
 8004ce4:	3630      	adds	r6, #48	; 0x30
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb fad3 	bl	8000298 <__aeabi_dsub>
 8004cf2:	f805 6b01 	strb.w	r6, [r5], #1
 8004cf6:	9b02      	ldr	r3, [sp, #8]
 8004cf8:	429d      	cmp	r5, r3
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	4689      	mov	r9, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	d124      	bne.n	8004d4e <_dtoa_r+0x62e>
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <_dtoa_r+0x654>)
 8004d06:	ec51 0b19 	vmov	r0, r1, d9
 8004d0a:	f7fb fac7 	bl	800029c <__adddf3>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4640      	mov	r0, r8
 8004d14:	4649      	mov	r1, r9
 8004d16:	f7fb ff07 	bl	8000b28 <__aeabi_dcmpgt>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d173      	bne.n	8004e06 <_dtoa_r+0x6e6>
 8004d1e:	ec53 2b19 	vmov	r2, r3, d9
 8004d22:	4914      	ldr	r1, [pc, #80]	; (8004d74 <_dtoa_r+0x654>)
 8004d24:	2000      	movs	r0, #0
 8004d26:	f7fb fab7 	bl	8000298 <__aeabi_dsub>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4649      	mov	r1, r9
 8004d32:	f7fb fedb 	bl	8000aec <__aeabi_dcmplt>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f43f af2f 	beq.w	8004b9a <_dtoa_r+0x47a>
 8004d3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004d3e:	1e6b      	subs	r3, r5, #1
 8004d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d46:	2b30      	cmp	r3, #48	; 0x30
 8004d48:	d0f8      	beq.n	8004d3c <_dtoa_r+0x61c>
 8004d4a:	46bb      	mov	fp, r7
 8004d4c:	e04a      	b.n	8004de4 <_dtoa_r+0x6c4>
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <_dtoa_r+0x648>)
 8004d50:	f7fb fc5a 	bl	8000608 <__aeabi_dmul>
 8004d54:	4680      	mov	r8, r0
 8004d56:	4689      	mov	r9, r1
 8004d58:	e7bd      	b.n	8004cd6 <_dtoa_r+0x5b6>
 8004d5a:	bf00      	nop
 8004d5c:	08006668 	.word	0x08006668
 8004d60:	08006640 	.word	0x08006640
 8004d64:	3ff00000 	.word	0x3ff00000
 8004d68:	40240000 	.word	0x40240000
 8004d6c:	401c0000 	.word	0x401c0000
 8004d70:	40140000 	.word	0x40140000
 8004d74:	3fe00000 	.word	0x3fe00000
 8004d78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d7c:	9d00      	ldr	r5, [sp, #0]
 8004d7e:	4642      	mov	r2, r8
 8004d80:	464b      	mov	r3, r9
 8004d82:	4630      	mov	r0, r6
 8004d84:	4639      	mov	r1, r7
 8004d86:	f7fb fd69 	bl	800085c <__aeabi_ddiv>
 8004d8a:	f7fb feed 	bl	8000b68 <__aeabi_d2iz>
 8004d8e:	9001      	str	r0, [sp, #4]
 8004d90:	f7fb fbd0 	bl	8000534 <__aeabi_i2d>
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	f7fb fc36 	bl	8000608 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4630      	mov	r0, r6
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fa78 	bl	8000298 <__aeabi_dsub>
 8004da8:	9e01      	ldr	r6, [sp, #4]
 8004daa:	9f04      	ldr	r7, [sp, #16]
 8004dac:	3630      	adds	r6, #48	; 0x30
 8004dae:	f805 6b01 	strb.w	r6, [r5], #1
 8004db2:	9e00      	ldr	r6, [sp, #0]
 8004db4:	1bae      	subs	r6, r5, r6
 8004db6:	42b7      	cmp	r7, r6
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	d134      	bne.n	8004e28 <_dtoa_r+0x708>
 8004dbe:	f7fb fa6d 	bl	800029c <__adddf3>
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	460f      	mov	r7, r1
 8004dca:	f7fb fead 	bl	8000b28 <__aeabi_dcmpgt>
 8004dce:	b9c8      	cbnz	r0, 8004e04 <_dtoa_r+0x6e4>
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	f7fb fe7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ddc:	b110      	cbz	r0, 8004de4 <_dtoa_r+0x6c4>
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	07db      	lsls	r3, r3, #31
 8004de2:	d40f      	bmi.n	8004e04 <_dtoa_r+0x6e4>
 8004de4:	4651      	mov	r1, sl
 8004de6:	4620      	mov	r0, r4
 8004de8:	f000 fc2e 	bl	8005648 <_Bfree>
 8004dec:	2300      	movs	r3, #0
 8004dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004df0:	702b      	strb	r3, [r5, #0]
 8004df2:	f10b 0301 	add.w	r3, fp, #1
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f43f ace2 	beq.w	80047c4 <_dtoa_r+0xa4>
 8004e00:	601d      	str	r5, [r3, #0]
 8004e02:	e4df      	b.n	80047c4 <_dtoa_r+0xa4>
 8004e04:	465f      	mov	r7, fp
 8004e06:	462b      	mov	r3, r5
 8004e08:	461d      	mov	r5, r3
 8004e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e0e:	2a39      	cmp	r2, #57	; 0x39
 8004e10:	d106      	bne.n	8004e20 <_dtoa_r+0x700>
 8004e12:	9a00      	ldr	r2, [sp, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1f7      	bne.n	8004e08 <_dtoa_r+0x6e8>
 8004e18:	9900      	ldr	r1, [sp, #0]
 8004e1a:	2230      	movs	r2, #48	; 0x30
 8004e1c:	3701      	adds	r7, #1
 8004e1e:	700a      	strb	r2, [r1, #0]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	3201      	adds	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	e790      	b.n	8004d4a <_dtoa_r+0x62a>
 8004e28:	4ba3      	ldr	r3, [pc, #652]	; (80050b8 <_dtoa_r+0x998>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f7fb fbec 	bl	8000608 <__aeabi_dmul>
 8004e30:	2200      	movs	r2, #0
 8004e32:	2300      	movs	r3, #0
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	f7fb fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d09e      	beq.n	8004d7e <_dtoa_r+0x65e>
 8004e40:	e7d0      	b.n	8004de4 <_dtoa_r+0x6c4>
 8004e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e44:	2a00      	cmp	r2, #0
 8004e46:	f000 80ca 	beq.w	8004fde <_dtoa_r+0x8be>
 8004e4a:	9a07      	ldr	r2, [sp, #28]
 8004e4c:	2a01      	cmp	r2, #1
 8004e4e:	f300 80ad 	bgt.w	8004fac <_dtoa_r+0x88c>
 8004e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	f000 80a5 	beq.w	8004fa4 <_dtoa_r+0x884>
 8004e5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e5e:	9e08      	ldr	r6, [sp, #32]
 8004e60:	9d05      	ldr	r5, [sp, #20]
 8004e62:	9a05      	ldr	r2, [sp, #20]
 8004e64:	441a      	add	r2, r3
 8004e66:	9205      	str	r2, [sp, #20]
 8004e68:	9a06      	ldr	r2, [sp, #24]
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	441a      	add	r2, r3
 8004e6e:	4620      	mov	r0, r4
 8004e70:	9206      	str	r2, [sp, #24]
 8004e72:	f000 fc9f 	bl	80057b4 <__i2b>
 8004e76:	4607      	mov	r7, r0
 8004e78:	b165      	cbz	r5, 8004e94 <_dtoa_r+0x774>
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dd09      	ble.n	8004e94 <_dtoa_r+0x774>
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	9a05      	ldr	r2, [sp, #20]
 8004e84:	bfa8      	it	ge
 8004e86:	462b      	movge	r3, r5
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	9205      	str	r2, [sp, #20]
 8004e8c:	9a06      	ldr	r2, [sp, #24]
 8004e8e:	1aed      	subs	r5, r5, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	9306      	str	r3, [sp, #24]
 8004e94:	9b08      	ldr	r3, [sp, #32]
 8004e96:	b1f3      	cbz	r3, 8004ed6 <_dtoa_r+0x7b6>
 8004e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80a3 	beq.w	8004fe6 <_dtoa_r+0x8c6>
 8004ea0:	2e00      	cmp	r6, #0
 8004ea2:	dd10      	ble.n	8004ec6 <_dtoa_r+0x7a6>
 8004ea4:	4639      	mov	r1, r7
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f000 fd43 	bl	8005934 <__pow5mult>
 8004eae:	4652      	mov	r2, sl
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f000 fc93 	bl	80057e0 <__multiply>
 8004eba:	4651      	mov	r1, sl
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 fbc2 	bl	8005648 <_Bfree>
 8004ec4:	46c2      	mov	sl, r8
 8004ec6:	9b08      	ldr	r3, [sp, #32]
 8004ec8:	1b9a      	subs	r2, r3, r6
 8004eca:	d004      	beq.n	8004ed6 <_dtoa_r+0x7b6>
 8004ecc:	4651      	mov	r1, sl
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 fd30 	bl	8005934 <__pow5mult>
 8004ed4:	4682      	mov	sl, r0
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 fc6b 	bl	80057b4 <__i2b>
 8004ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	f340 8081 	ble.w	8004fea <_dtoa_r+0x8ca>
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4601      	mov	r1, r0
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 fd21 	bl	8005934 <__pow5mult>
 8004ef2:	9b07      	ldr	r3, [sp, #28]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	dd7a      	ble.n	8004ff0 <_dtoa_r+0x8d0>
 8004efa:	f04f 0800 	mov.w	r8, #0
 8004efe:	6933      	ldr	r3, [r6, #16]
 8004f00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f04:	6918      	ldr	r0, [r3, #16]
 8004f06:	f000 fc07 	bl	8005718 <__hi0bits>
 8004f0a:	f1c0 0020 	rsb	r0, r0, #32
 8004f0e:	9b06      	ldr	r3, [sp, #24]
 8004f10:	4418      	add	r0, r3
 8004f12:	f010 001f 	ands.w	r0, r0, #31
 8004f16:	f000 8094 	beq.w	8005042 <_dtoa_r+0x922>
 8004f1a:	f1c0 0320 	rsb	r3, r0, #32
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	f340 8085 	ble.w	800502e <_dtoa_r+0x90e>
 8004f24:	9b05      	ldr	r3, [sp, #20]
 8004f26:	f1c0 001c 	rsb	r0, r0, #28
 8004f2a:	4403      	add	r3, r0
 8004f2c:	9305      	str	r3, [sp, #20]
 8004f2e:	9b06      	ldr	r3, [sp, #24]
 8004f30:	4403      	add	r3, r0
 8004f32:	4405      	add	r5, r0
 8004f34:	9306      	str	r3, [sp, #24]
 8004f36:	9b05      	ldr	r3, [sp, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dd05      	ble.n	8004f48 <_dtoa_r+0x828>
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fd51 	bl	80059e8 <__lshift>
 8004f46:	4682      	mov	sl, r0
 8004f48:	9b06      	ldr	r3, [sp, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dd05      	ble.n	8004f5a <_dtoa_r+0x83a>
 8004f4e:	4631      	mov	r1, r6
 8004f50:	461a      	mov	r2, r3
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 fd48 	bl	80059e8 <__lshift>
 8004f58:	4606      	mov	r6, r0
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d072      	beq.n	8005046 <_dtoa_r+0x926>
 8004f60:	4631      	mov	r1, r6
 8004f62:	4650      	mov	r0, sl
 8004f64:	f000 fdac 	bl	8005ac0 <__mcmp>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	da6c      	bge.n	8005046 <_dtoa_r+0x926>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4651      	mov	r1, sl
 8004f70:	220a      	movs	r2, #10
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 fb8a 	bl	800568c <__multadd>
 8004f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004f7e:	4682      	mov	sl, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 81b0 	beq.w	80052e6 <_dtoa_r+0xbc6>
 8004f86:	2300      	movs	r3, #0
 8004f88:	4639      	mov	r1, r7
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f000 fb7d 	bl	800568c <__multadd>
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	4607      	mov	r7, r0
 8004f98:	f300 8096 	bgt.w	80050c8 <_dtoa_r+0x9a8>
 8004f9c:	9b07      	ldr	r3, [sp, #28]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	dc59      	bgt.n	8005056 <_dtoa_r+0x936>
 8004fa2:	e091      	b.n	80050c8 <_dtoa_r+0x9a8>
 8004fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004faa:	e758      	b.n	8004e5e <_dtoa_r+0x73e>
 8004fac:	9b04      	ldr	r3, [sp, #16]
 8004fae:	1e5e      	subs	r6, r3, #1
 8004fb0:	9b08      	ldr	r3, [sp, #32]
 8004fb2:	42b3      	cmp	r3, r6
 8004fb4:	bfbf      	itttt	lt
 8004fb6:	9b08      	ldrlt	r3, [sp, #32]
 8004fb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004fba:	9608      	strlt	r6, [sp, #32]
 8004fbc:	1af3      	sublt	r3, r6, r3
 8004fbe:	bfb4      	ite	lt
 8004fc0:	18d2      	addlt	r2, r2, r3
 8004fc2:	1b9e      	subge	r6, r3, r6
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	bfbc      	itt	lt
 8004fc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004fca:	2600      	movlt	r6, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bfb7      	itett	lt
 8004fd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004fd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004fd8:	1a9d      	sublt	r5, r3, r2
 8004fda:	2300      	movlt	r3, #0
 8004fdc:	e741      	b.n	8004e62 <_dtoa_r+0x742>
 8004fde:	9e08      	ldr	r6, [sp, #32]
 8004fe0:	9d05      	ldr	r5, [sp, #20]
 8004fe2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004fe4:	e748      	b.n	8004e78 <_dtoa_r+0x758>
 8004fe6:	9a08      	ldr	r2, [sp, #32]
 8004fe8:	e770      	b.n	8004ecc <_dtoa_r+0x7ac>
 8004fea:	9b07      	ldr	r3, [sp, #28]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	dc19      	bgt.n	8005024 <_dtoa_r+0x904>
 8004ff0:	9b02      	ldr	r3, [sp, #8]
 8004ff2:	b9bb      	cbnz	r3, 8005024 <_dtoa_r+0x904>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ffa:	b99b      	cbnz	r3, 8005024 <_dtoa_r+0x904>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005002:	0d1b      	lsrs	r3, r3, #20
 8005004:	051b      	lsls	r3, r3, #20
 8005006:	b183      	cbz	r3, 800502a <_dtoa_r+0x90a>
 8005008:	9b05      	ldr	r3, [sp, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	9305      	str	r3, [sp, #20]
 800500e:	9b06      	ldr	r3, [sp, #24]
 8005010:	3301      	adds	r3, #1
 8005012:	9306      	str	r3, [sp, #24]
 8005014:	f04f 0801 	mov.w	r8, #1
 8005018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501a:	2b00      	cmp	r3, #0
 800501c:	f47f af6f 	bne.w	8004efe <_dtoa_r+0x7de>
 8005020:	2001      	movs	r0, #1
 8005022:	e774      	b.n	8004f0e <_dtoa_r+0x7ee>
 8005024:	f04f 0800 	mov.w	r8, #0
 8005028:	e7f6      	b.n	8005018 <_dtoa_r+0x8f8>
 800502a:	4698      	mov	r8, r3
 800502c:	e7f4      	b.n	8005018 <_dtoa_r+0x8f8>
 800502e:	d082      	beq.n	8004f36 <_dtoa_r+0x816>
 8005030:	9a05      	ldr	r2, [sp, #20]
 8005032:	331c      	adds	r3, #28
 8005034:	441a      	add	r2, r3
 8005036:	9205      	str	r2, [sp, #20]
 8005038:	9a06      	ldr	r2, [sp, #24]
 800503a:	441a      	add	r2, r3
 800503c:	441d      	add	r5, r3
 800503e:	9206      	str	r2, [sp, #24]
 8005040:	e779      	b.n	8004f36 <_dtoa_r+0x816>
 8005042:	4603      	mov	r3, r0
 8005044:	e7f4      	b.n	8005030 <_dtoa_r+0x910>
 8005046:	9b04      	ldr	r3, [sp, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	dc37      	bgt.n	80050bc <_dtoa_r+0x99c>
 800504c:	9b07      	ldr	r3, [sp, #28]
 800504e:	2b02      	cmp	r3, #2
 8005050:	dd34      	ble.n	80050bc <_dtoa_r+0x99c>
 8005052:	9b04      	ldr	r3, [sp, #16]
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	9b01      	ldr	r3, [sp, #4]
 8005058:	b963      	cbnz	r3, 8005074 <_dtoa_r+0x954>
 800505a:	4631      	mov	r1, r6
 800505c:	2205      	movs	r2, #5
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fb14 	bl	800568c <__multadd>
 8005064:	4601      	mov	r1, r0
 8005066:	4606      	mov	r6, r0
 8005068:	4650      	mov	r0, sl
 800506a:	f000 fd29 	bl	8005ac0 <__mcmp>
 800506e:	2800      	cmp	r0, #0
 8005070:	f73f adbb 	bgt.w	8004bea <_dtoa_r+0x4ca>
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	9d00      	ldr	r5, [sp, #0]
 8005078:	ea6f 0b03 	mvn.w	fp, r3
 800507c:	f04f 0800 	mov.w	r8, #0
 8005080:	4631      	mov	r1, r6
 8005082:	4620      	mov	r0, r4
 8005084:	f000 fae0 	bl	8005648 <_Bfree>
 8005088:	2f00      	cmp	r7, #0
 800508a:	f43f aeab 	beq.w	8004de4 <_dtoa_r+0x6c4>
 800508e:	f1b8 0f00 	cmp.w	r8, #0
 8005092:	d005      	beq.n	80050a0 <_dtoa_r+0x980>
 8005094:	45b8      	cmp	r8, r7
 8005096:	d003      	beq.n	80050a0 <_dtoa_r+0x980>
 8005098:	4641      	mov	r1, r8
 800509a:	4620      	mov	r0, r4
 800509c:	f000 fad4 	bl	8005648 <_Bfree>
 80050a0:	4639      	mov	r1, r7
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 fad0 	bl	8005648 <_Bfree>
 80050a8:	e69c      	b.n	8004de4 <_dtoa_r+0x6c4>
 80050aa:	2600      	movs	r6, #0
 80050ac:	4637      	mov	r7, r6
 80050ae:	e7e1      	b.n	8005074 <_dtoa_r+0x954>
 80050b0:	46bb      	mov	fp, r7
 80050b2:	4637      	mov	r7, r6
 80050b4:	e599      	b.n	8004bea <_dtoa_r+0x4ca>
 80050b6:	bf00      	nop
 80050b8:	40240000 	.word	0x40240000
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80c8 	beq.w	8005254 <_dtoa_r+0xb34>
 80050c4:	9b04      	ldr	r3, [sp, #16]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	dd05      	ble.n	80050d8 <_dtoa_r+0x9b8>
 80050cc:	4639      	mov	r1, r7
 80050ce:	462a      	mov	r2, r5
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 fc89 	bl	80059e8 <__lshift>
 80050d6:	4607      	mov	r7, r0
 80050d8:	f1b8 0f00 	cmp.w	r8, #0
 80050dc:	d05b      	beq.n	8005196 <_dtoa_r+0xa76>
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 fa71 	bl	80055c8 <_Balloc>
 80050e6:	4605      	mov	r5, r0
 80050e8:	b928      	cbnz	r0, 80050f6 <_dtoa_r+0x9d6>
 80050ea:	4b83      	ldr	r3, [pc, #524]	; (80052f8 <_dtoa_r+0xbd8>)
 80050ec:	4602      	mov	r2, r0
 80050ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80050f2:	f7ff bb2e 	b.w	8004752 <_dtoa_r+0x32>
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	3202      	adds	r2, #2
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	f107 010c 	add.w	r1, r7, #12
 8005100:	300c      	adds	r0, #12
 8005102:	f000 fe77 	bl	8005df4 <memcpy>
 8005106:	2201      	movs	r2, #1
 8005108:	4629      	mov	r1, r5
 800510a:	4620      	mov	r0, r4
 800510c:	f000 fc6c 	bl	80059e8 <__lshift>
 8005110:	9b00      	ldr	r3, [sp, #0]
 8005112:	3301      	adds	r3, #1
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800511a:	4413      	add	r3, r2
 800511c:	9308      	str	r3, [sp, #32]
 800511e:	9b02      	ldr	r3, [sp, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	46b8      	mov	r8, r7
 8005126:	9306      	str	r3, [sp, #24]
 8005128:	4607      	mov	r7, r0
 800512a:	9b04      	ldr	r3, [sp, #16]
 800512c:	4631      	mov	r1, r6
 800512e:	3b01      	subs	r3, #1
 8005130:	4650      	mov	r0, sl
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	f7ff fa69 	bl	800460a <quorem>
 8005138:	4641      	mov	r1, r8
 800513a:	9002      	str	r0, [sp, #8]
 800513c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005140:	4650      	mov	r0, sl
 8005142:	f000 fcbd 	bl	8005ac0 <__mcmp>
 8005146:	463a      	mov	r2, r7
 8005148:	9005      	str	r0, [sp, #20]
 800514a:	4631      	mov	r1, r6
 800514c:	4620      	mov	r0, r4
 800514e:	f000 fcd3 	bl	8005af8 <__mdiff>
 8005152:	68c2      	ldr	r2, [r0, #12]
 8005154:	4605      	mov	r5, r0
 8005156:	bb02      	cbnz	r2, 800519a <_dtoa_r+0xa7a>
 8005158:	4601      	mov	r1, r0
 800515a:	4650      	mov	r0, sl
 800515c:	f000 fcb0 	bl	8005ac0 <__mcmp>
 8005160:	4602      	mov	r2, r0
 8005162:	4629      	mov	r1, r5
 8005164:	4620      	mov	r0, r4
 8005166:	9209      	str	r2, [sp, #36]	; 0x24
 8005168:	f000 fa6e 	bl	8005648 <_Bfree>
 800516c:	9b07      	ldr	r3, [sp, #28]
 800516e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005170:	9d04      	ldr	r5, [sp, #16]
 8005172:	ea43 0102 	orr.w	r1, r3, r2
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	4319      	orrs	r1, r3
 800517a:	d110      	bne.n	800519e <_dtoa_r+0xa7e>
 800517c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005180:	d029      	beq.n	80051d6 <_dtoa_r+0xab6>
 8005182:	9b05      	ldr	r3, [sp, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	dd02      	ble.n	800518e <_dtoa_r+0xa6e>
 8005188:	9b02      	ldr	r3, [sp, #8]
 800518a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800518e:	9b01      	ldr	r3, [sp, #4]
 8005190:	f883 9000 	strb.w	r9, [r3]
 8005194:	e774      	b.n	8005080 <_dtoa_r+0x960>
 8005196:	4638      	mov	r0, r7
 8005198:	e7ba      	b.n	8005110 <_dtoa_r+0x9f0>
 800519a:	2201      	movs	r2, #1
 800519c:	e7e1      	b.n	8005162 <_dtoa_r+0xa42>
 800519e:	9b05      	ldr	r3, [sp, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db04      	blt.n	80051ae <_dtoa_r+0xa8e>
 80051a4:	9907      	ldr	r1, [sp, #28]
 80051a6:	430b      	orrs	r3, r1
 80051a8:	9906      	ldr	r1, [sp, #24]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	d120      	bne.n	80051f0 <_dtoa_r+0xad0>
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	dded      	ble.n	800518e <_dtoa_r+0xa6e>
 80051b2:	4651      	mov	r1, sl
 80051b4:	2201      	movs	r2, #1
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fc16 	bl	80059e8 <__lshift>
 80051bc:	4631      	mov	r1, r6
 80051be:	4682      	mov	sl, r0
 80051c0:	f000 fc7e 	bl	8005ac0 <__mcmp>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	dc03      	bgt.n	80051d0 <_dtoa_r+0xab0>
 80051c8:	d1e1      	bne.n	800518e <_dtoa_r+0xa6e>
 80051ca:	f019 0f01 	tst.w	r9, #1
 80051ce:	d0de      	beq.n	800518e <_dtoa_r+0xa6e>
 80051d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80051d4:	d1d8      	bne.n	8005188 <_dtoa_r+0xa68>
 80051d6:	9a01      	ldr	r2, [sp, #4]
 80051d8:	2339      	movs	r3, #57	; 0x39
 80051da:	7013      	strb	r3, [r2, #0]
 80051dc:	462b      	mov	r3, r5
 80051de:	461d      	mov	r5, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051e6:	2a39      	cmp	r2, #57	; 0x39
 80051e8:	d06c      	beq.n	80052c4 <_dtoa_r+0xba4>
 80051ea:	3201      	adds	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e747      	b.n	8005080 <_dtoa_r+0x960>
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	dd07      	ble.n	8005204 <_dtoa_r+0xae4>
 80051f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80051f8:	d0ed      	beq.n	80051d6 <_dtoa_r+0xab6>
 80051fa:	9a01      	ldr	r2, [sp, #4]
 80051fc:	f109 0301 	add.w	r3, r9, #1
 8005200:	7013      	strb	r3, [r2, #0]
 8005202:	e73d      	b.n	8005080 <_dtoa_r+0x960>
 8005204:	9b04      	ldr	r3, [sp, #16]
 8005206:	9a08      	ldr	r2, [sp, #32]
 8005208:	f803 9c01 	strb.w	r9, [r3, #-1]
 800520c:	4293      	cmp	r3, r2
 800520e:	d043      	beq.n	8005298 <_dtoa_r+0xb78>
 8005210:	4651      	mov	r1, sl
 8005212:	2300      	movs	r3, #0
 8005214:	220a      	movs	r2, #10
 8005216:	4620      	mov	r0, r4
 8005218:	f000 fa38 	bl	800568c <__multadd>
 800521c:	45b8      	cmp	r8, r7
 800521e:	4682      	mov	sl, r0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	f04f 020a 	mov.w	r2, #10
 8005228:	4641      	mov	r1, r8
 800522a:	4620      	mov	r0, r4
 800522c:	d107      	bne.n	800523e <_dtoa_r+0xb1e>
 800522e:	f000 fa2d 	bl	800568c <__multadd>
 8005232:	4680      	mov	r8, r0
 8005234:	4607      	mov	r7, r0
 8005236:	9b04      	ldr	r3, [sp, #16]
 8005238:	3301      	adds	r3, #1
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	e775      	b.n	800512a <_dtoa_r+0xa0a>
 800523e:	f000 fa25 	bl	800568c <__multadd>
 8005242:	4639      	mov	r1, r7
 8005244:	4680      	mov	r8, r0
 8005246:	2300      	movs	r3, #0
 8005248:	220a      	movs	r2, #10
 800524a:	4620      	mov	r0, r4
 800524c:	f000 fa1e 	bl	800568c <__multadd>
 8005250:	4607      	mov	r7, r0
 8005252:	e7f0      	b.n	8005236 <_dtoa_r+0xb16>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	9d00      	ldr	r5, [sp, #0]
 800525a:	4631      	mov	r1, r6
 800525c:	4650      	mov	r0, sl
 800525e:	f7ff f9d4 	bl	800460a <quorem>
 8005262:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	f805 9b01 	strb.w	r9, [r5], #1
 800526c:	1aea      	subs	r2, r5, r3
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	4293      	cmp	r3, r2
 8005272:	dd07      	ble.n	8005284 <_dtoa_r+0xb64>
 8005274:	4651      	mov	r1, sl
 8005276:	2300      	movs	r3, #0
 8005278:	220a      	movs	r2, #10
 800527a:	4620      	mov	r0, r4
 800527c:	f000 fa06 	bl	800568c <__multadd>
 8005280:	4682      	mov	sl, r0
 8005282:	e7ea      	b.n	800525a <_dtoa_r+0xb3a>
 8005284:	9b01      	ldr	r3, [sp, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfc8      	it	gt
 800528a:	461d      	movgt	r5, r3
 800528c:	9b00      	ldr	r3, [sp, #0]
 800528e:	bfd8      	it	le
 8005290:	2501      	movle	r5, #1
 8005292:	441d      	add	r5, r3
 8005294:	f04f 0800 	mov.w	r8, #0
 8005298:	4651      	mov	r1, sl
 800529a:	2201      	movs	r2, #1
 800529c:	4620      	mov	r0, r4
 800529e:	f000 fba3 	bl	80059e8 <__lshift>
 80052a2:	4631      	mov	r1, r6
 80052a4:	4682      	mov	sl, r0
 80052a6:	f000 fc0b 	bl	8005ac0 <__mcmp>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	dc96      	bgt.n	80051dc <_dtoa_r+0xabc>
 80052ae:	d102      	bne.n	80052b6 <_dtoa_r+0xb96>
 80052b0:	f019 0f01 	tst.w	r9, #1
 80052b4:	d192      	bne.n	80051dc <_dtoa_r+0xabc>
 80052b6:	462b      	mov	r3, r5
 80052b8:	461d      	mov	r5, r3
 80052ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052be:	2a30      	cmp	r2, #48	; 0x30
 80052c0:	d0fa      	beq.n	80052b8 <_dtoa_r+0xb98>
 80052c2:	e6dd      	b.n	8005080 <_dtoa_r+0x960>
 80052c4:	9a00      	ldr	r2, [sp, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d189      	bne.n	80051de <_dtoa_r+0xabe>
 80052ca:	f10b 0b01 	add.w	fp, fp, #1
 80052ce:	2331      	movs	r3, #49	; 0x31
 80052d0:	e796      	b.n	8005200 <_dtoa_r+0xae0>
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <_dtoa_r+0xbdc>)
 80052d4:	f7ff ba99 	b.w	800480a <_dtoa_r+0xea>
 80052d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f47f aa6d 	bne.w	80047ba <_dtoa_r+0x9a>
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <_dtoa_r+0xbe0>)
 80052e2:	f7ff ba92 	b.w	800480a <_dtoa_r+0xea>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	dcb5      	bgt.n	8005258 <_dtoa_r+0xb38>
 80052ec:	9b07      	ldr	r3, [sp, #28]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	f73f aeb1 	bgt.w	8005056 <_dtoa_r+0x936>
 80052f4:	e7b0      	b.n	8005258 <_dtoa_r+0xb38>
 80052f6:	bf00      	nop
 80052f8:	080065d4 	.word	0x080065d4
 80052fc:	08006534 	.word	0x08006534
 8005300:	08006558 	.word	0x08006558

08005304 <malloc>:
 8005304:	4b02      	ldr	r3, [pc, #8]	; (8005310 <malloc+0xc>)
 8005306:	4601      	mov	r1, r0
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f000 b823 	b.w	8005354 <_malloc_r>
 800530e:	bf00      	nop
 8005310:	2000007c 	.word	0x2000007c

08005314 <sbrk_aligned>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4e0e      	ldr	r6, [pc, #56]	; (8005350 <sbrk_aligned+0x3c>)
 8005318:	460c      	mov	r4, r1
 800531a:	6831      	ldr	r1, [r6, #0]
 800531c:	4605      	mov	r5, r0
 800531e:	b911      	cbnz	r1, 8005326 <sbrk_aligned+0x12>
 8005320:	f000 fd46 	bl	8005db0 <_sbrk_r>
 8005324:	6030      	str	r0, [r6, #0]
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 fd41 	bl	8005db0 <_sbrk_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d00a      	beq.n	8005348 <sbrk_aligned+0x34>
 8005332:	1cc4      	adds	r4, r0, #3
 8005334:	f024 0403 	bic.w	r4, r4, #3
 8005338:	42a0      	cmp	r0, r4
 800533a:	d007      	beq.n	800534c <sbrk_aligned+0x38>
 800533c:	1a21      	subs	r1, r4, r0
 800533e:	4628      	mov	r0, r5
 8005340:	f000 fd36 	bl	8005db0 <_sbrk_r>
 8005344:	3001      	adds	r0, #1
 8005346:	d101      	bne.n	800534c <sbrk_aligned+0x38>
 8005348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800534c:	4620      	mov	r0, r4
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	20000474 	.word	0x20000474

08005354 <_malloc_r>:
 8005354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005358:	1ccd      	adds	r5, r1, #3
 800535a:	f025 0503 	bic.w	r5, r5, #3
 800535e:	3508      	adds	r5, #8
 8005360:	2d0c      	cmp	r5, #12
 8005362:	bf38      	it	cc
 8005364:	250c      	movcc	r5, #12
 8005366:	2d00      	cmp	r5, #0
 8005368:	4607      	mov	r7, r0
 800536a:	db01      	blt.n	8005370 <_malloc_r+0x1c>
 800536c:	42a9      	cmp	r1, r5
 800536e:	d905      	bls.n	800537c <_malloc_r+0x28>
 8005370:	230c      	movs	r3, #12
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	2600      	movs	r6, #0
 8005376:	4630      	mov	r0, r6
 8005378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005450 <_malloc_r+0xfc>
 8005380:	f000 f916 	bl	80055b0 <__malloc_lock>
 8005384:	f8d8 3000 	ldr.w	r3, [r8]
 8005388:	461c      	mov	r4, r3
 800538a:	bb5c      	cbnz	r4, 80053e4 <_malloc_r+0x90>
 800538c:	4629      	mov	r1, r5
 800538e:	4638      	mov	r0, r7
 8005390:	f7ff ffc0 	bl	8005314 <sbrk_aligned>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	4604      	mov	r4, r0
 8005398:	d155      	bne.n	8005446 <_malloc_r+0xf2>
 800539a:	f8d8 4000 	ldr.w	r4, [r8]
 800539e:	4626      	mov	r6, r4
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	d145      	bne.n	8005430 <_malloc_r+0xdc>
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	d048      	beq.n	800543a <_malloc_r+0xe6>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	4631      	mov	r1, r6
 80053ac:	4638      	mov	r0, r7
 80053ae:	eb04 0903 	add.w	r9, r4, r3
 80053b2:	f000 fcfd 	bl	8005db0 <_sbrk_r>
 80053b6:	4581      	cmp	r9, r0
 80053b8:	d13f      	bne.n	800543a <_malloc_r+0xe6>
 80053ba:	6821      	ldr	r1, [r4, #0]
 80053bc:	1a6d      	subs	r5, r5, r1
 80053be:	4629      	mov	r1, r5
 80053c0:	4638      	mov	r0, r7
 80053c2:	f7ff ffa7 	bl	8005314 <sbrk_aligned>
 80053c6:	3001      	adds	r0, #1
 80053c8:	d037      	beq.n	800543a <_malloc_r+0xe6>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	442b      	add	r3, r5
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	f8d8 3000 	ldr.w	r3, [r8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d038      	beq.n	800544a <_malloc_r+0xf6>
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	42a2      	cmp	r2, r4
 80053dc:	d12b      	bne.n	8005436 <_malloc_r+0xe2>
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	e00f      	b.n	8005404 <_malloc_r+0xb0>
 80053e4:	6822      	ldr	r2, [r4, #0]
 80053e6:	1b52      	subs	r2, r2, r5
 80053e8:	d41f      	bmi.n	800542a <_malloc_r+0xd6>
 80053ea:	2a0b      	cmp	r2, #11
 80053ec:	d917      	bls.n	800541e <_malloc_r+0xca>
 80053ee:	1961      	adds	r1, r4, r5
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	6025      	str	r5, [r4, #0]
 80053f4:	bf18      	it	ne
 80053f6:	6059      	strne	r1, [r3, #4]
 80053f8:	6863      	ldr	r3, [r4, #4]
 80053fa:	bf08      	it	eq
 80053fc:	f8c8 1000 	streq.w	r1, [r8]
 8005400:	5162      	str	r2, [r4, r5]
 8005402:	604b      	str	r3, [r1, #4]
 8005404:	4638      	mov	r0, r7
 8005406:	f104 060b 	add.w	r6, r4, #11
 800540a:	f000 f8d7 	bl	80055bc <__malloc_unlock>
 800540e:	f026 0607 	bic.w	r6, r6, #7
 8005412:	1d23      	adds	r3, r4, #4
 8005414:	1af2      	subs	r2, r6, r3
 8005416:	d0ae      	beq.n	8005376 <_malloc_r+0x22>
 8005418:	1b9b      	subs	r3, r3, r6
 800541a:	50a3      	str	r3, [r4, r2]
 800541c:	e7ab      	b.n	8005376 <_malloc_r+0x22>
 800541e:	42a3      	cmp	r3, r4
 8005420:	6862      	ldr	r2, [r4, #4]
 8005422:	d1dd      	bne.n	80053e0 <_malloc_r+0x8c>
 8005424:	f8c8 2000 	str.w	r2, [r8]
 8005428:	e7ec      	b.n	8005404 <_malloc_r+0xb0>
 800542a:	4623      	mov	r3, r4
 800542c:	6864      	ldr	r4, [r4, #4]
 800542e:	e7ac      	b.n	800538a <_malloc_r+0x36>
 8005430:	4634      	mov	r4, r6
 8005432:	6876      	ldr	r6, [r6, #4]
 8005434:	e7b4      	b.n	80053a0 <_malloc_r+0x4c>
 8005436:	4613      	mov	r3, r2
 8005438:	e7cc      	b.n	80053d4 <_malloc_r+0x80>
 800543a:	230c      	movs	r3, #12
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	4638      	mov	r0, r7
 8005440:	f000 f8bc 	bl	80055bc <__malloc_unlock>
 8005444:	e797      	b.n	8005376 <_malloc_r+0x22>
 8005446:	6025      	str	r5, [r4, #0]
 8005448:	e7dc      	b.n	8005404 <_malloc_r+0xb0>
 800544a:	605b      	str	r3, [r3, #4]
 800544c:	deff      	udf	#255	; 0xff
 800544e:	bf00      	nop
 8005450:	20000470 	.word	0x20000470

08005454 <__sflush_r>:
 8005454:	898a      	ldrh	r2, [r1, #12]
 8005456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	4605      	mov	r5, r0
 800545c:	0710      	lsls	r0, r2, #28
 800545e:	460c      	mov	r4, r1
 8005460:	d458      	bmi.n	8005514 <__sflush_r+0xc0>
 8005462:	684b      	ldr	r3, [r1, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	dc05      	bgt.n	8005474 <__sflush_r+0x20>
 8005468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	dc02      	bgt.n	8005474 <__sflush_r+0x20>
 800546e:	2000      	movs	r0, #0
 8005470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005476:	2e00      	cmp	r6, #0
 8005478:	d0f9      	beq.n	800546e <__sflush_r+0x1a>
 800547a:	2300      	movs	r3, #0
 800547c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005480:	682f      	ldr	r7, [r5, #0]
 8005482:	6a21      	ldr	r1, [r4, #32]
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	d032      	beq.n	80054ee <__sflush_r+0x9a>
 8005488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	075a      	lsls	r2, r3, #29
 800548e:	d505      	bpl.n	800549c <__sflush_r+0x48>
 8005490:	6863      	ldr	r3, [r4, #4]
 8005492:	1ac0      	subs	r0, r0, r3
 8005494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005496:	b10b      	cbz	r3, 800549c <__sflush_r+0x48>
 8005498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800549a:	1ac0      	subs	r0, r0, r3
 800549c:	2300      	movs	r3, #0
 800549e:	4602      	mov	r2, r0
 80054a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a2:	6a21      	ldr	r1, [r4, #32]
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b0      	blx	r6
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	d106      	bne.n	80054bc <__sflush_r+0x68>
 80054ae:	6829      	ldr	r1, [r5, #0]
 80054b0:	291d      	cmp	r1, #29
 80054b2:	d82b      	bhi.n	800550c <__sflush_r+0xb8>
 80054b4:	4a29      	ldr	r2, [pc, #164]	; (800555c <__sflush_r+0x108>)
 80054b6:	410a      	asrs	r2, r1
 80054b8:	07d6      	lsls	r6, r2, #31
 80054ba:	d427      	bmi.n	800550c <__sflush_r+0xb8>
 80054bc:	2200      	movs	r2, #0
 80054be:	6062      	str	r2, [r4, #4]
 80054c0:	04d9      	lsls	r1, r3, #19
 80054c2:	6922      	ldr	r2, [r4, #16]
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	d504      	bpl.n	80054d2 <__sflush_r+0x7e>
 80054c8:	1c42      	adds	r2, r0, #1
 80054ca:	d101      	bne.n	80054d0 <__sflush_r+0x7c>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b903      	cbnz	r3, 80054d2 <__sflush_r+0x7e>
 80054d0:	6560      	str	r0, [r4, #84]	; 0x54
 80054d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d4:	602f      	str	r7, [r5, #0]
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d0c9      	beq.n	800546e <__sflush_r+0x1a>
 80054da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054de:	4299      	cmp	r1, r3
 80054e0:	d002      	beq.n	80054e8 <__sflush_r+0x94>
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fcc8 	bl	8005e78 <_free_r>
 80054e8:	2000      	movs	r0, #0
 80054ea:	6360      	str	r0, [r4, #52]	; 0x34
 80054ec:	e7c0      	b.n	8005470 <__sflush_r+0x1c>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b0      	blx	r6
 80054f4:	1c41      	adds	r1, r0, #1
 80054f6:	d1c8      	bne.n	800548a <__sflush_r+0x36>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0c5      	beq.n	800548a <__sflush_r+0x36>
 80054fe:	2b1d      	cmp	r3, #29
 8005500:	d001      	beq.n	8005506 <__sflush_r+0xb2>
 8005502:	2b16      	cmp	r3, #22
 8005504:	d101      	bne.n	800550a <__sflush_r+0xb6>
 8005506:	602f      	str	r7, [r5, #0]
 8005508:	e7b1      	b.n	800546e <__sflush_r+0x1a>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e7ad      	b.n	8005470 <__sflush_r+0x1c>
 8005514:	690f      	ldr	r7, [r1, #16]
 8005516:	2f00      	cmp	r7, #0
 8005518:	d0a9      	beq.n	800546e <__sflush_r+0x1a>
 800551a:	0793      	lsls	r3, r2, #30
 800551c:	680e      	ldr	r6, [r1, #0]
 800551e:	bf08      	it	eq
 8005520:	694b      	ldreq	r3, [r1, #20]
 8005522:	600f      	str	r7, [r1, #0]
 8005524:	bf18      	it	ne
 8005526:	2300      	movne	r3, #0
 8005528:	eba6 0807 	sub.w	r8, r6, r7
 800552c:	608b      	str	r3, [r1, #8]
 800552e:	f1b8 0f00 	cmp.w	r8, #0
 8005532:	dd9c      	ble.n	800546e <__sflush_r+0x1a>
 8005534:	6a21      	ldr	r1, [r4, #32]
 8005536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005538:	4643      	mov	r3, r8
 800553a:	463a      	mov	r2, r7
 800553c:	4628      	mov	r0, r5
 800553e:	47b0      	blx	r6
 8005540:	2800      	cmp	r0, #0
 8005542:	dc06      	bgt.n	8005552 <__sflush_r+0xfe>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	e78e      	b.n	8005470 <__sflush_r+0x1c>
 8005552:	4407      	add	r7, r0
 8005554:	eba8 0800 	sub.w	r8, r8, r0
 8005558:	e7e9      	b.n	800552e <__sflush_r+0xda>
 800555a:	bf00      	nop
 800555c:	dfbffffe 	.word	0xdfbffffe

08005560 <_fflush_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	b913      	cbnz	r3, 8005570 <_fflush_r+0x10>
 800556a:	2500      	movs	r5, #0
 800556c:	4628      	mov	r0, r5
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	b118      	cbz	r0, 800557a <_fflush_r+0x1a>
 8005572:	6a03      	ldr	r3, [r0, #32]
 8005574:	b90b      	cbnz	r3, 800557a <_fflush_r+0x1a>
 8005576:	f7fe ffd9 	bl	800452c <__sinit>
 800557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f3      	beq.n	800556a <_fflush_r+0xa>
 8005582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005584:	07d0      	lsls	r0, r2, #31
 8005586:	d404      	bmi.n	8005592 <_fflush_r+0x32>
 8005588:	0599      	lsls	r1, r3, #22
 800558a:	d402      	bmi.n	8005592 <_fflush_r+0x32>
 800558c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558e:	f7ff f83a 	bl	8004606 <__retarget_lock_acquire_recursive>
 8005592:	4628      	mov	r0, r5
 8005594:	4621      	mov	r1, r4
 8005596:	f7ff ff5d 	bl	8005454 <__sflush_r>
 800559a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800559c:	07da      	lsls	r2, r3, #31
 800559e:	4605      	mov	r5, r0
 80055a0:	d4e4      	bmi.n	800556c <_fflush_r+0xc>
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	059b      	lsls	r3, r3, #22
 80055a6:	d4e1      	bmi.n	800556c <_fflush_r+0xc>
 80055a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055aa:	f7ff f82d 	bl	8004608 <__retarget_lock_release_recursive>
 80055ae:	e7dd      	b.n	800556c <_fflush_r+0xc>

080055b0 <__malloc_lock>:
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <__malloc_lock+0x8>)
 80055b2:	f7ff b828 	b.w	8004606 <__retarget_lock_acquire_recursive>
 80055b6:	bf00      	nop
 80055b8:	2000046c 	.word	0x2000046c

080055bc <__malloc_unlock>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__malloc_unlock+0x8>)
 80055be:	f7ff b823 	b.w	8004608 <__retarget_lock_release_recursive>
 80055c2:	bf00      	nop
 80055c4:	2000046c 	.word	0x2000046c

080055c8 <_Balloc>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	69c6      	ldr	r6, [r0, #28]
 80055cc:	4604      	mov	r4, r0
 80055ce:	460d      	mov	r5, r1
 80055d0:	b976      	cbnz	r6, 80055f0 <_Balloc+0x28>
 80055d2:	2010      	movs	r0, #16
 80055d4:	f7ff fe96 	bl	8005304 <malloc>
 80055d8:	4602      	mov	r2, r0
 80055da:	61e0      	str	r0, [r4, #28]
 80055dc:	b920      	cbnz	r0, 80055e8 <_Balloc+0x20>
 80055de:	4b18      	ldr	r3, [pc, #96]	; (8005640 <_Balloc+0x78>)
 80055e0:	4818      	ldr	r0, [pc, #96]	; (8005644 <_Balloc+0x7c>)
 80055e2:	216b      	movs	r1, #107	; 0x6b
 80055e4:	f000 fc14 	bl	8005e10 <__assert_func>
 80055e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055ec:	6006      	str	r6, [r0, #0]
 80055ee:	60c6      	str	r6, [r0, #12]
 80055f0:	69e6      	ldr	r6, [r4, #28]
 80055f2:	68f3      	ldr	r3, [r6, #12]
 80055f4:	b183      	cbz	r3, 8005618 <_Balloc+0x50>
 80055f6:	69e3      	ldr	r3, [r4, #28]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055fe:	b9b8      	cbnz	r0, 8005630 <_Balloc+0x68>
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f605 	lsl.w	r6, r1, r5
 8005606:	1d72      	adds	r2, r6, #5
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fc1e 	bl	8005e4c <_calloc_r>
 8005610:	b160      	cbz	r0, 800562c <_Balloc+0x64>
 8005612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005616:	e00e      	b.n	8005636 <_Balloc+0x6e>
 8005618:	2221      	movs	r2, #33	; 0x21
 800561a:	2104      	movs	r1, #4
 800561c:	4620      	mov	r0, r4
 800561e:	f000 fc15 	bl	8005e4c <_calloc_r>
 8005622:	69e3      	ldr	r3, [r4, #28]
 8005624:	60f0      	str	r0, [r6, #12]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e4      	bne.n	80055f6 <_Balloc+0x2e>
 800562c:	2000      	movs	r0, #0
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	6802      	ldr	r2, [r0, #0]
 8005632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005636:	2300      	movs	r3, #0
 8005638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800563c:	e7f7      	b.n	800562e <_Balloc+0x66>
 800563e:	bf00      	nop
 8005640:	08006565 	.word	0x08006565
 8005644:	080065e5 	.word	0x080065e5

08005648 <_Bfree>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	69c6      	ldr	r6, [r0, #28]
 800564c:	4605      	mov	r5, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b976      	cbnz	r6, 8005670 <_Bfree+0x28>
 8005652:	2010      	movs	r0, #16
 8005654:	f7ff fe56 	bl	8005304 <malloc>
 8005658:	4602      	mov	r2, r0
 800565a:	61e8      	str	r0, [r5, #28]
 800565c:	b920      	cbnz	r0, 8005668 <_Bfree+0x20>
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <_Bfree+0x3c>)
 8005660:	4809      	ldr	r0, [pc, #36]	; (8005688 <_Bfree+0x40>)
 8005662:	218f      	movs	r1, #143	; 0x8f
 8005664:	f000 fbd4 	bl	8005e10 <__assert_func>
 8005668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800566c:	6006      	str	r6, [r0, #0]
 800566e:	60c6      	str	r6, [r0, #12]
 8005670:	b13c      	cbz	r4, 8005682 <_Bfree+0x3a>
 8005672:	69eb      	ldr	r3, [r5, #28]
 8005674:	6862      	ldr	r2, [r4, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800567c:	6021      	str	r1, [r4, #0]
 800567e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	08006565 	.word	0x08006565
 8005688:	080065e5 	.word	0x080065e5

0800568c <__multadd>:
 800568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	690d      	ldr	r5, [r1, #16]
 8005692:	4607      	mov	r7, r0
 8005694:	460c      	mov	r4, r1
 8005696:	461e      	mov	r6, r3
 8005698:	f101 0c14 	add.w	ip, r1, #20
 800569c:	2000      	movs	r0, #0
 800569e:	f8dc 3000 	ldr.w	r3, [ip]
 80056a2:	b299      	uxth	r1, r3
 80056a4:	fb02 6101 	mla	r1, r2, r1, r6
 80056a8:	0c1e      	lsrs	r6, r3, #16
 80056aa:	0c0b      	lsrs	r3, r1, #16
 80056ac:	fb02 3306 	mla	r3, r2, r6, r3
 80056b0:	b289      	uxth	r1, r1
 80056b2:	3001      	adds	r0, #1
 80056b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056b8:	4285      	cmp	r5, r0
 80056ba:	f84c 1b04 	str.w	r1, [ip], #4
 80056be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056c2:	dcec      	bgt.n	800569e <__multadd+0x12>
 80056c4:	b30e      	cbz	r6, 800570a <__multadd+0x7e>
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	42ab      	cmp	r3, r5
 80056ca:	dc19      	bgt.n	8005700 <__multadd+0x74>
 80056cc:	6861      	ldr	r1, [r4, #4]
 80056ce:	4638      	mov	r0, r7
 80056d0:	3101      	adds	r1, #1
 80056d2:	f7ff ff79 	bl	80055c8 <_Balloc>
 80056d6:	4680      	mov	r8, r0
 80056d8:	b928      	cbnz	r0, 80056e6 <__multadd+0x5a>
 80056da:	4602      	mov	r2, r0
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <__multadd+0x84>)
 80056de:	480d      	ldr	r0, [pc, #52]	; (8005714 <__multadd+0x88>)
 80056e0:	21ba      	movs	r1, #186	; 0xba
 80056e2:	f000 fb95 	bl	8005e10 <__assert_func>
 80056e6:	6922      	ldr	r2, [r4, #16]
 80056e8:	3202      	adds	r2, #2
 80056ea:	f104 010c 	add.w	r1, r4, #12
 80056ee:	0092      	lsls	r2, r2, #2
 80056f0:	300c      	adds	r0, #12
 80056f2:	f000 fb7f 	bl	8005df4 <memcpy>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ffa5 	bl	8005648 <_Bfree>
 80056fe:	4644      	mov	r4, r8
 8005700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005704:	3501      	adds	r5, #1
 8005706:	615e      	str	r6, [r3, #20]
 8005708:	6125      	str	r5, [r4, #16]
 800570a:	4620      	mov	r0, r4
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	080065d4 	.word	0x080065d4
 8005714:	080065e5 	.word	0x080065e5

08005718 <__hi0bits>:
 8005718:	0c03      	lsrs	r3, r0, #16
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	b9d3      	cbnz	r3, 8005754 <__hi0bits+0x3c>
 800571e:	0400      	lsls	r0, r0, #16
 8005720:	2310      	movs	r3, #16
 8005722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005726:	bf04      	itt	eq
 8005728:	0200      	lsleq	r0, r0, #8
 800572a:	3308      	addeq	r3, #8
 800572c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005730:	bf04      	itt	eq
 8005732:	0100      	lsleq	r0, r0, #4
 8005734:	3304      	addeq	r3, #4
 8005736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800573a:	bf04      	itt	eq
 800573c:	0080      	lsleq	r0, r0, #2
 800573e:	3302      	addeq	r3, #2
 8005740:	2800      	cmp	r0, #0
 8005742:	db05      	blt.n	8005750 <__hi0bits+0x38>
 8005744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005748:	f103 0301 	add.w	r3, r3, #1
 800574c:	bf08      	it	eq
 800574e:	2320      	moveq	r3, #32
 8005750:	4618      	mov	r0, r3
 8005752:	4770      	bx	lr
 8005754:	2300      	movs	r3, #0
 8005756:	e7e4      	b.n	8005722 <__hi0bits+0xa>

08005758 <__lo0bits>:
 8005758:	6803      	ldr	r3, [r0, #0]
 800575a:	f013 0207 	ands.w	r2, r3, #7
 800575e:	d00c      	beq.n	800577a <__lo0bits+0x22>
 8005760:	07d9      	lsls	r1, r3, #31
 8005762:	d422      	bmi.n	80057aa <__lo0bits+0x52>
 8005764:	079a      	lsls	r2, r3, #30
 8005766:	bf49      	itett	mi
 8005768:	085b      	lsrmi	r3, r3, #1
 800576a:	089b      	lsrpl	r3, r3, #2
 800576c:	6003      	strmi	r3, [r0, #0]
 800576e:	2201      	movmi	r2, #1
 8005770:	bf5c      	itt	pl
 8005772:	6003      	strpl	r3, [r0, #0]
 8005774:	2202      	movpl	r2, #2
 8005776:	4610      	mov	r0, r2
 8005778:	4770      	bx	lr
 800577a:	b299      	uxth	r1, r3
 800577c:	b909      	cbnz	r1, 8005782 <__lo0bits+0x2a>
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	2210      	movs	r2, #16
 8005782:	b2d9      	uxtb	r1, r3
 8005784:	b909      	cbnz	r1, 800578a <__lo0bits+0x32>
 8005786:	3208      	adds	r2, #8
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	0719      	lsls	r1, r3, #28
 800578c:	bf04      	itt	eq
 800578e:	091b      	lsreq	r3, r3, #4
 8005790:	3204      	addeq	r2, #4
 8005792:	0799      	lsls	r1, r3, #30
 8005794:	bf04      	itt	eq
 8005796:	089b      	lsreq	r3, r3, #2
 8005798:	3202      	addeq	r2, #2
 800579a:	07d9      	lsls	r1, r3, #31
 800579c:	d403      	bmi.n	80057a6 <__lo0bits+0x4e>
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	f102 0201 	add.w	r2, r2, #1
 80057a4:	d003      	beq.n	80057ae <__lo0bits+0x56>
 80057a6:	6003      	str	r3, [r0, #0]
 80057a8:	e7e5      	b.n	8005776 <__lo0bits+0x1e>
 80057aa:	2200      	movs	r2, #0
 80057ac:	e7e3      	b.n	8005776 <__lo0bits+0x1e>
 80057ae:	2220      	movs	r2, #32
 80057b0:	e7e1      	b.n	8005776 <__lo0bits+0x1e>
	...

080057b4 <__i2b>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	2101      	movs	r1, #1
 80057ba:	f7ff ff05 	bl	80055c8 <_Balloc>
 80057be:	4602      	mov	r2, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__i2b+0x1a>
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <__i2b+0x24>)
 80057c4:	4805      	ldr	r0, [pc, #20]	; (80057dc <__i2b+0x28>)
 80057c6:	f240 1145 	movw	r1, #325	; 0x145
 80057ca:	f000 fb21 	bl	8005e10 <__assert_func>
 80057ce:	2301      	movs	r3, #1
 80057d0:	6144      	str	r4, [r0, #20]
 80057d2:	6103      	str	r3, [r0, #16]
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	bf00      	nop
 80057d8:	080065d4 	.word	0x080065d4
 80057dc:	080065e5 	.word	0x080065e5

080057e0 <__multiply>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	4691      	mov	r9, r2
 80057e6:	690a      	ldr	r2, [r1, #16]
 80057e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	bfb8      	it	lt
 80057f0:	460b      	movlt	r3, r1
 80057f2:	460c      	mov	r4, r1
 80057f4:	bfbc      	itt	lt
 80057f6:	464c      	movlt	r4, r9
 80057f8:	4699      	movlt	r9, r3
 80057fa:	6927      	ldr	r7, [r4, #16]
 80057fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	6861      	ldr	r1, [r4, #4]
 8005804:	eb07 060a 	add.w	r6, r7, sl
 8005808:	42b3      	cmp	r3, r6
 800580a:	b085      	sub	sp, #20
 800580c:	bfb8      	it	lt
 800580e:	3101      	addlt	r1, #1
 8005810:	f7ff feda 	bl	80055c8 <_Balloc>
 8005814:	b930      	cbnz	r0, 8005824 <__multiply+0x44>
 8005816:	4602      	mov	r2, r0
 8005818:	4b44      	ldr	r3, [pc, #272]	; (800592c <__multiply+0x14c>)
 800581a:	4845      	ldr	r0, [pc, #276]	; (8005930 <__multiply+0x150>)
 800581c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005820:	f000 faf6 	bl	8005e10 <__assert_func>
 8005824:	f100 0514 	add.w	r5, r0, #20
 8005828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800582c:	462b      	mov	r3, r5
 800582e:	2200      	movs	r2, #0
 8005830:	4543      	cmp	r3, r8
 8005832:	d321      	bcc.n	8005878 <__multiply+0x98>
 8005834:	f104 0314 	add.w	r3, r4, #20
 8005838:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800583c:	f109 0314 	add.w	r3, r9, #20
 8005840:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	1b3a      	subs	r2, r7, r4
 8005848:	3a15      	subs	r2, #21
 800584a:	f022 0203 	bic.w	r2, r2, #3
 800584e:	3204      	adds	r2, #4
 8005850:	f104 0115 	add.w	r1, r4, #21
 8005854:	428f      	cmp	r7, r1
 8005856:	bf38      	it	cc
 8005858:	2204      	movcc	r2, #4
 800585a:	9201      	str	r2, [sp, #4]
 800585c:	9a02      	ldr	r2, [sp, #8]
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	429a      	cmp	r2, r3
 8005862:	d80c      	bhi.n	800587e <__multiply+0x9e>
 8005864:	2e00      	cmp	r6, #0
 8005866:	dd03      	ble.n	8005870 <__multiply+0x90>
 8005868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800586c:	2b00      	cmp	r3, #0
 800586e:	d05b      	beq.n	8005928 <__multiply+0x148>
 8005870:	6106      	str	r6, [r0, #16]
 8005872:	b005      	add	sp, #20
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	f843 2b04 	str.w	r2, [r3], #4
 800587c:	e7d8      	b.n	8005830 <__multiply+0x50>
 800587e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005882:	f1ba 0f00 	cmp.w	sl, #0
 8005886:	d024      	beq.n	80058d2 <__multiply+0xf2>
 8005888:	f104 0e14 	add.w	lr, r4, #20
 800588c:	46a9      	mov	r9, r5
 800588e:	f04f 0c00 	mov.w	ip, #0
 8005892:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005896:	f8d9 1000 	ldr.w	r1, [r9]
 800589a:	fa1f fb82 	uxth.w	fp, r2
 800589e:	b289      	uxth	r1, r1
 80058a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80058a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80058a8:	f8d9 2000 	ldr.w	r2, [r9]
 80058ac:	4461      	add	r1, ip
 80058ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80058b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058ba:	b289      	uxth	r1, r1
 80058bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058c0:	4577      	cmp	r7, lr
 80058c2:	f849 1b04 	str.w	r1, [r9], #4
 80058c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058ca:	d8e2      	bhi.n	8005892 <__multiply+0xb2>
 80058cc:	9a01      	ldr	r2, [sp, #4]
 80058ce:	f845 c002 	str.w	ip, [r5, r2]
 80058d2:	9a03      	ldr	r2, [sp, #12]
 80058d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058d8:	3304      	adds	r3, #4
 80058da:	f1b9 0f00 	cmp.w	r9, #0
 80058de:	d021      	beq.n	8005924 <__multiply+0x144>
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	f104 0c14 	add.w	ip, r4, #20
 80058e6:	46ae      	mov	lr, r5
 80058e8:	f04f 0a00 	mov.w	sl, #0
 80058ec:	f8bc b000 	ldrh.w	fp, [ip]
 80058f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058f4:	fb09 220b 	mla	r2, r9, fp, r2
 80058f8:	4452      	add	r2, sl
 80058fa:	b289      	uxth	r1, r1
 80058fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005900:	f84e 1b04 	str.w	r1, [lr], #4
 8005904:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800590c:	f8be 1000 	ldrh.w	r1, [lr]
 8005910:	fb09 110a 	mla	r1, r9, sl, r1
 8005914:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005918:	4567      	cmp	r7, ip
 800591a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800591e:	d8e5      	bhi.n	80058ec <__multiply+0x10c>
 8005920:	9a01      	ldr	r2, [sp, #4]
 8005922:	50a9      	str	r1, [r5, r2]
 8005924:	3504      	adds	r5, #4
 8005926:	e799      	b.n	800585c <__multiply+0x7c>
 8005928:	3e01      	subs	r6, #1
 800592a:	e79b      	b.n	8005864 <__multiply+0x84>
 800592c:	080065d4 	.word	0x080065d4
 8005930:	080065e5 	.word	0x080065e5

08005934 <__pow5mult>:
 8005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005938:	4615      	mov	r5, r2
 800593a:	f012 0203 	ands.w	r2, r2, #3
 800593e:	4606      	mov	r6, r0
 8005940:	460f      	mov	r7, r1
 8005942:	d007      	beq.n	8005954 <__pow5mult+0x20>
 8005944:	4c25      	ldr	r4, [pc, #148]	; (80059dc <__pow5mult+0xa8>)
 8005946:	3a01      	subs	r2, #1
 8005948:	2300      	movs	r3, #0
 800594a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800594e:	f7ff fe9d 	bl	800568c <__multadd>
 8005952:	4607      	mov	r7, r0
 8005954:	10ad      	asrs	r5, r5, #2
 8005956:	d03d      	beq.n	80059d4 <__pow5mult+0xa0>
 8005958:	69f4      	ldr	r4, [r6, #28]
 800595a:	b97c      	cbnz	r4, 800597c <__pow5mult+0x48>
 800595c:	2010      	movs	r0, #16
 800595e:	f7ff fcd1 	bl	8005304 <malloc>
 8005962:	4602      	mov	r2, r0
 8005964:	61f0      	str	r0, [r6, #28]
 8005966:	b928      	cbnz	r0, 8005974 <__pow5mult+0x40>
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <__pow5mult+0xac>)
 800596a:	481e      	ldr	r0, [pc, #120]	; (80059e4 <__pow5mult+0xb0>)
 800596c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005970:	f000 fa4e 	bl	8005e10 <__assert_func>
 8005974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005978:	6004      	str	r4, [r0, #0]
 800597a:	60c4      	str	r4, [r0, #12]
 800597c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005984:	b94c      	cbnz	r4, 800599a <__pow5mult+0x66>
 8005986:	f240 2171 	movw	r1, #625	; 0x271
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ff12 	bl	80057b4 <__i2b>
 8005990:	2300      	movs	r3, #0
 8005992:	f8c8 0008 	str.w	r0, [r8, #8]
 8005996:	4604      	mov	r4, r0
 8005998:	6003      	str	r3, [r0, #0]
 800599a:	f04f 0900 	mov.w	r9, #0
 800599e:	07eb      	lsls	r3, r5, #31
 80059a0:	d50a      	bpl.n	80059b8 <__pow5mult+0x84>
 80059a2:	4639      	mov	r1, r7
 80059a4:	4622      	mov	r2, r4
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ff1a 	bl	80057e0 <__multiply>
 80059ac:	4639      	mov	r1, r7
 80059ae:	4680      	mov	r8, r0
 80059b0:	4630      	mov	r0, r6
 80059b2:	f7ff fe49 	bl	8005648 <_Bfree>
 80059b6:	4647      	mov	r7, r8
 80059b8:	106d      	asrs	r5, r5, #1
 80059ba:	d00b      	beq.n	80059d4 <__pow5mult+0xa0>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	b938      	cbnz	r0, 80059d0 <__pow5mult+0x9c>
 80059c0:	4622      	mov	r2, r4
 80059c2:	4621      	mov	r1, r4
 80059c4:	4630      	mov	r0, r6
 80059c6:	f7ff ff0b 	bl	80057e0 <__multiply>
 80059ca:	6020      	str	r0, [r4, #0]
 80059cc:	f8c0 9000 	str.w	r9, [r0]
 80059d0:	4604      	mov	r4, r0
 80059d2:	e7e4      	b.n	800599e <__pow5mult+0x6a>
 80059d4:	4638      	mov	r0, r7
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	bf00      	nop
 80059dc:	08006730 	.word	0x08006730
 80059e0:	08006565 	.word	0x08006565
 80059e4:	080065e5 	.word	0x080065e5

080059e8 <__lshift>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	460c      	mov	r4, r1
 80059ee:	6849      	ldr	r1, [r1, #4]
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059f6:	68a3      	ldr	r3, [r4, #8]
 80059f8:	4607      	mov	r7, r0
 80059fa:	4691      	mov	r9, r2
 80059fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a00:	f108 0601 	add.w	r6, r8, #1
 8005a04:	42b3      	cmp	r3, r6
 8005a06:	db0b      	blt.n	8005a20 <__lshift+0x38>
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff fddd 	bl	80055c8 <_Balloc>
 8005a0e:	4605      	mov	r5, r0
 8005a10:	b948      	cbnz	r0, 8005a26 <__lshift+0x3e>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <__lshift+0xd0>)
 8005a16:	4829      	ldr	r0, [pc, #164]	; (8005abc <__lshift+0xd4>)
 8005a18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005a1c:	f000 f9f8 	bl	8005e10 <__assert_func>
 8005a20:	3101      	adds	r1, #1
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	e7ee      	b.n	8005a04 <__lshift+0x1c>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f100 0114 	add.w	r1, r0, #20
 8005a2c:	f100 0210 	add.w	r2, r0, #16
 8005a30:	4618      	mov	r0, r3
 8005a32:	4553      	cmp	r3, sl
 8005a34:	db33      	blt.n	8005a9e <__lshift+0xb6>
 8005a36:	6920      	ldr	r0, [r4, #16]
 8005a38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a3c:	f104 0314 	add.w	r3, r4, #20
 8005a40:	f019 091f 	ands.w	r9, r9, #31
 8005a44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a4c:	d02b      	beq.n	8005aa6 <__lshift+0xbe>
 8005a4e:	f1c9 0e20 	rsb	lr, r9, #32
 8005a52:	468a      	mov	sl, r1
 8005a54:	2200      	movs	r2, #0
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	fa00 f009 	lsl.w	r0, r0, r9
 8005a5c:	4310      	orrs	r0, r2
 8005a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8005a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a66:	459c      	cmp	ip, r3
 8005a68:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a6c:	d8f3      	bhi.n	8005a56 <__lshift+0x6e>
 8005a6e:	ebac 0304 	sub.w	r3, ip, r4
 8005a72:	3b15      	subs	r3, #21
 8005a74:	f023 0303 	bic.w	r3, r3, #3
 8005a78:	3304      	adds	r3, #4
 8005a7a:	f104 0015 	add.w	r0, r4, #21
 8005a7e:	4584      	cmp	ip, r0
 8005a80:	bf38      	it	cc
 8005a82:	2304      	movcc	r3, #4
 8005a84:	50ca      	str	r2, [r1, r3]
 8005a86:	b10a      	cbz	r2, 8005a8c <__lshift+0xa4>
 8005a88:	f108 0602 	add.w	r6, r8, #2
 8005a8c:	3e01      	subs	r6, #1
 8005a8e:	4638      	mov	r0, r7
 8005a90:	612e      	str	r6, [r5, #16]
 8005a92:	4621      	mov	r1, r4
 8005a94:	f7ff fdd8 	bl	8005648 <_Bfree>
 8005a98:	4628      	mov	r0, r5
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	e7c5      	b.n	8005a32 <__lshift+0x4a>
 8005aa6:	3904      	subs	r1, #4
 8005aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aac:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ab0:	459c      	cmp	ip, r3
 8005ab2:	d8f9      	bhi.n	8005aa8 <__lshift+0xc0>
 8005ab4:	e7ea      	b.n	8005a8c <__lshift+0xa4>
 8005ab6:	bf00      	nop
 8005ab8:	080065d4 	.word	0x080065d4
 8005abc:	080065e5 	.word	0x080065e5

08005ac0 <__mcmp>:
 8005ac0:	b530      	push	{r4, r5, lr}
 8005ac2:	6902      	ldr	r2, [r0, #16]
 8005ac4:	690c      	ldr	r4, [r1, #16]
 8005ac6:	1b12      	subs	r2, r2, r4
 8005ac8:	d10e      	bne.n	8005ae8 <__mcmp+0x28>
 8005aca:	f100 0314 	add.w	r3, r0, #20
 8005ace:	3114      	adds	r1, #20
 8005ad0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ad4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ad8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005adc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ae0:	42a5      	cmp	r5, r4
 8005ae2:	d003      	beq.n	8005aec <__mcmp+0x2c>
 8005ae4:	d305      	bcc.n	8005af2 <__mcmp+0x32>
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4610      	mov	r0, r2
 8005aea:	bd30      	pop	{r4, r5, pc}
 8005aec:	4283      	cmp	r3, r0
 8005aee:	d3f3      	bcc.n	8005ad8 <__mcmp+0x18>
 8005af0:	e7fa      	b.n	8005ae8 <__mcmp+0x28>
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af6:	e7f7      	b.n	8005ae8 <__mcmp+0x28>

08005af8 <__mdiff>:
 8005af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	460c      	mov	r4, r1
 8005afe:	4606      	mov	r6, r0
 8005b00:	4611      	mov	r1, r2
 8005b02:	4620      	mov	r0, r4
 8005b04:	4690      	mov	r8, r2
 8005b06:	f7ff ffdb 	bl	8005ac0 <__mcmp>
 8005b0a:	1e05      	subs	r5, r0, #0
 8005b0c:	d110      	bne.n	8005b30 <__mdiff+0x38>
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff fd59 	bl	80055c8 <_Balloc>
 8005b16:	b930      	cbnz	r0, 8005b26 <__mdiff+0x2e>
 8005b18:	4b3a      	ldr	r3, [pc, #232]	; (8005c04 <__mdiff+0x10c>)
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	f240 2137 	movw	r1, #567	; 0x237
 8005b20:	4839      	ldr	r0, [pc, #228]	; (8005c08 <__mdiff+0x110>)
 8005b22:	f000 f975 	bl	8005e10 <__assert_func>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b30:	bfa4      	itt	ge
 8005b32:	4643      	movge	r3, r8
 8005b34:	46a0      	movge	r8, r4
 8005b36:	4630      	mov	r0, r6
 8005b38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b3c:	bfa6      	itte	ge
 8005b3e:	461c      	movge	r4, r3
 8005b40:	2500      	movge	r5, #0
 8005b42:	2501      	movlt	r5, #1
 8005b44:	f7ff fd40 	bl	80055c8 <_Balloc>
 8005b48:	b920      	cbnz	r0, 8005b54 <__mdiff+0x5c>
 8005b4a:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <__mdiff+0x10c>)
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	f240 2145 	movw	r1, #581	; 0x245
 8005b52:	e7e5      	b.n	8005b20 <__mdiff+0x28>
 8005b54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b58:	6926      	ldr	r6, [r4, #16]
 8005b5a:	60c5      	str	r5, [r0, #12]
 8005b5c:	f104 0914 	add.w	r9, r4, #20
 8005b60:	f108 0514 	add.w	r5, r8, #20
 8005b64:	f100 0e14 	add.w	lr, r0, #20
 8005b68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b70:	f108 0210 	add.w	r2, r8, #16
 8005b74:	46f2      	mov	sl, lr
 8005b76:	2100      	movs	r1, #0
 8005b78:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b80:	fa11 f88b 	uxtah	r8, r1, fp
 8005b84:	b299      	uxth	r1, r3
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	eba8 0801 	sub.w	r8, r8, r1
 8005b8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b94:	fa1f f888 	uxth.w	r8, r8
 8005b98:	1419      	asrs	r1, r3, #16
 8005b9a:	454e      	cmp	r6, r9
 8005b9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ba0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ba4:	d8e8      	bhi.n	8005b78 <__mdiff+0x80>
 8005ba6:	1b33      	subs	r3, r6, r4
 8005ba8:	3b15      	subs	r3, #21
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	3304      	adds	r3, #4
 8005bb0:	3415      	adds	r4, #21
 8005bb2:	42a6      	cmp	r6, r4
 8005bb4:	bf38      	it	cc
 8005bb6:	2304      	movcc	r3, #4
 8005bb8:	441d      	add	r5, r3
 8005bba:	4473      	add	r3, lr
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	462e      	mov	r6, r5
 8005bc0:	4566      	cmp	r6, ip
 8005bc2:	d30e      	bcc.n	8005be2 <__mdiff+0xea>
 8005bc4:	f10c 0203 	add.w	r2, ip, #3
 8005bc8:	1b52      	subs	r2, r2, r5
 8005bca:	f022 0203 	bic.w	r2, r2, #3
 8005bce:	3d03      	subs	r5, #3
 8005bd0:	45ac      	cmp	ip, r5
 8005bd2:	bf38      	it	cc
 8005bd4:	2200      	movcc	r2, #0
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005bdc:	b17a      	cbz	r2, 8005bfe <__mdiff+0x106>
 8005bde:	6107      	str	r7, [r0, #16]
 8005be0:	e7a4      	b.n	8005b2c <__mdiff+0x34>
 8005be2:	f856 8b04 	ldr.w	r8, [r6], #4
 8005be6:	fa11 f288 	uxtah	r2, r1, r8
 8005bea:	1414      	asrs	r4, r2, #16
 8005bec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bf6:	f84e 2b04 	str.w	r2, [lr], #4
 8005bfa:	1421      	asrs	r1, r4, #16
 8005bfc:	e7e0      	b.n	8005bc0 <__mdiff+0xc8>
 8005bfe:	3f01      	subs	r7, #1
 8005c00:	e7ea      	b.n	8005bd8 <__mdiff+0xe0>
 8005c02:	bf00      	nop
 8005c04:	080065d4 	.word	0x080065d4
 8005c08:	080065e5 	.word	0x080065e5

08005c0c <__d2b>:
 8005c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	460f      	mov	r7, r1
 8005c12:	2101      	movs	r1, #1
 8005c14:	ec59 8b10 	vmov	r8, r9, d0
 8005c18:	4616      	mov	r6, r2
 8005c1a:	f7ff fcd5 	bl	80055c8 <_Balloc>
 8005c1e:	4604      	mov	r4, r0
 8005c20:	b930      	cbnz	r0, 8005c30 <__d2b+0x24>
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <__d2b+0xac>)
 8005c26:	4825      	ldr	r0, [pc, #148]	; (8005cbc <__d2b+0xb0>)
 8005c28:	f240 310f 	movw	r1, #783	; 0x30f
 8005c2c:	f000 f8f0 	bl	8005e10 <__assert_func>
 8005c30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c38:	bb2d      	cbnz	r5, 8005c86 <__d2b+0x7a>
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	f1b8 0300 	subs.w	r3, r8, #0
 8005c40:	d026      	beq.n	8005c90 <__d2b+0x84>
 8005c42:	4668      	mov	r0, sp
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	f7ff fd87 	bl	8005758 <__lo0bits>
 8005c4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c4e:	b1e8      	cbz	r0, 8005c8c <__d2b+0x80>
 8005c50:	f1c0 0320 	rsb	r3, r0, #32
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	40c2      	lsrs	r2, r0
 8005c5c:	6163      	str	r3, [r4, #20]
 8005c5e:	9201      	str	r2, [sp, #4]
 8005c60:	9b01      	ldr	r3, [sp, #4]
 8005c62:	61a3      	str	r3, [r4, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2202      	movne	r2, #2
 8005c6a:	2201      	moveq	r2, #1
 8005c6c:	6122      	str	r2, [r4, #16]
 8005c6e:	b1bd      	cbz	r5, 8005ca0 <__d2b+0x94>
 8005c70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c74:	4405      	add	r5, r0
 8005c76:	603d      	str	r5, [r7, #0]
 8005c78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c7c:	6030      	str	r0, [r6, #0]
 8005c7e:	4620      	mov	r0, r4
 8005c80:	b003      	add	sp, #12
 8005c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c8a:	e7d6      	b.n	8005c3a <__d2b+0x2e>
 8005c8c:	6161      	str	r1, [r4, #20]
 8005c8e:	e7e7      	b.n	8005c60 <__d2b+0x54>
 8005c90:	a801      	add	r0, sp, #4
 8005c92:	f7ff fd61 	bl	8005758 <__lo0bits>
 8005c96:	9b01      	ldr	r3, [sp, #4]
 8005c98:	6163      	str	r3, [r4, #20]
 8005c9a:	3020      	adds	r0, #32
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	e7e5      	b.n	8005c6c <__d2b+0x60>
 8005ca0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ca8:	6038      	str	r0, [r7, #0]
 8005caa:	6918      	ldr	r0, [r3, #16]
 8005cac:	f7ff fd34 	bl	8005718 <__hi0bits>
 8005cb0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cb4:	e7e2      	b.n	8005c7c <__d2b+0x70>
 8005cb6:	bf00      	nop
 8005cb8:	080065d4 	.word	0x080065d4
 8005cbc:	080065e5 	.word	0x080065e5

08005cc0 <__sread>:
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc8:	f000 f860 	bl	8005d8c <_read_r>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	bfab      	itete	ge
 8005cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cd4:	181b      	addge	r3, r3, r0
 8005cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cda:	bfac      	ite	ge
 8005cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cde:	81a3      	strhlt	r3, [r4, #12]
 8005ce0:	bd10      	pop	{r4, pc}

08005ce2 <__swrite>:
 8005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	461f      	mov	r7, r3
 8005ce8:	898b      	ldrh	r3, [r1, #12]
 8005cea:	05db      	lsls	r3, r3, #23
 8005cec:	4605      	mov	r5, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	4616      	mov	r6, r2
 8005cf2:	d505      	bpl.n	8005d00 <__swrite+0x1e>
 8005cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f000 f834 	bl	8005d68 <_lseek_r>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	463b      	mov	r3, r7
 8005d10:	4628      	mov	r0, r5
 8005d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	f000 b85b 	b.w	8005dd0 <_write_r>

08005d1a <__sseek>:
 8005d1a:	b510      	push	{r4, lr}
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d22:	f000 f821 	bl	8005d68 <_lseek_r>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	bf15      	itete	ne
 8005d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d36:	81a3      	strheq	r3, [r4, #12]
 8005d38:	bf18      	it	ne
 8005d3a:	81a3      	strhne	r3, [r4, #12]
 8005d3c:	bd10      	pop	{r4, pc}

08005d3e <__sclose>:
 8005d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d42:	f000 b801 	b.w	8005d48 <_close_r>
	...

08005d48 <_close_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d06      	ldr	r5, [pc, #24]	; (8005d64 <_close_r+0x1c>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f7fc f8b9 	bl	8001eca <_close>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_close_r+0x1a>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_close_r+0x1a>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000478 	.word	0x20000478

08005d68 <_lseek_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d07      	ldr	r5, [pc, #28]	; (8005d88 <_lseek_r+0x20>)
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fc f8ce 	bl	8001f18 <_lseek>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_lseek_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_lseek_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000478 	.word	0x20000478

08005d8c <_read_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d07      	ldr	r5, [pc, #28]	; (8005dac <_read_r+0x20>)
 8005d90:	4604      	mov	r4, r0
 8005d92:	4608      	mov	r0, r1
 8005d94:	4611      	mov	r1, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f7fc f85c 	bl	8001e58 <_read>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_read_r+0x1e>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_read_r+0x1e>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	20000478 	.word	0x20000478

08005db0 <_sbrk_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d06      	ldr	r5, [pc, #24]	; (8005dcc <_sbrk_r+0x1c>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fc f8ba 	bl	8001f34 <_sbrk>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_sbrk_r+0x1a>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_sbrk_r+0x1a>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000478 	.word	0x20000478

08005dd0 <_write_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4d07      	ldr	r5, [pc, #28]	; (8005df0 <_write_r+0x20>)
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	4608      	mov	r0, r1
 8005dd8:	4611      	mov	r1, r2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	602a      	str	r2, [r5, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f7fc f857 	bl	8001e92 <_write>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_write_r+0x1e>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_write_r+0x1e>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20000478 	.word	0x20000478

08005df4 <memcpy>:
 8005df4:	440a      	add	r2, r1
 8005df6:	4291      	cmp	r1, r2
 8005df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dfc:	d100      	bne.n	8005e00 <memcpy+0xc>
 8005dfe:	4770      	bx	lr
 8005e00:	b510      	push	{r4, lr}
 8005e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e0a:	4291      	cmp	r1, r2
 8005e0c:	d1f9      	bne.n	8005e02 <memcpy+0xe>
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <__assert_func>:
 8005e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e12:	4614      	mov	r4, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <__assert_func+0x2c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	68d8      	ldr	r0, [r3, #12]
 8005e1e:	b14c      	cbz	r4, 8005e34 <__assert_func+0x24>
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <__assert_func+0x30>)
 8005e22:	9100      	str	r1, [sp, #0]
 8005e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e28:	4906      	ldr	r1, [pc, #24]	; (8005e44 <__assert_func+0x34>)
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	f000 f882 	bl	8005f34 <fiprintf>
 8005e30:	f000 f89f 	bl	8005f72 <abort>
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <__assert_func+0x38>)
 8005e36:	461c      	mov	r4, r3
 8005e38:	e7f3      	b.n	8005e22 <__assert_func+0x12>
 8005e3a:	bf00      	nop
 8005e3c:	2000007c 	.word	0x2000007c
 8005e40:	08006847 	.word	0x08006847
 8005e44:	08006854 	.word	0x08006854
 8005e48:	08006882 	.word	0x08006882

08005e4c <_calloc_r>:
 8005e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e4e:	fba1 2402 	umull	r2, r4, r1, r2
 8005e52:	b94c      	cbnz	r4, 8005e68 <_calloc_r+0x1c>
 8005e54:	4611      	mov	r1, r2
 8005e56:	9201      	str	r2, [sp, #4]
 8005e58:	f7ff fa7c 	bl	8005354 <_malloc_r>
 8005e5c:	9a01      	ldr	r2, [sp, #4]
 8005e5e:	4605      	mov	r5, r0
 8005e60:	b930      	cbnz	r0, 8005e70 <_calloc_r+0x24>
 8005e62:	4628      	mov	r0, r5
 8005e64:	b003      	add	sp, #12
 8005e66:	bd30      	pop	{r4, r5, pc}
 8005e68:	220c      	movs	r2, #12
 8005e6a:	6002      	str	r2, [r0, #0]
 8005e6c:	2500      	movs	r5, #0
 8005e6e:	e7f8      	b.n	8005e62 <_calloc_r+0x16>
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7fe fb91 	bl	8004598 <memset>
 8005e76:	e7f4      	b.n	8005e62 <_calloc_r+0x16>

08005e78 <_free_r>:
 8005e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	d044      	beq.n	8005f08 <_free_r+0x90>
 8005e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e82:	9001      	str	r0, [sp, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f1a1 0404 	sub.w	r4, r1, #4
 8005e8a:	bfb8      	it	lt
 8005e8c:	18e4      	addlt	r4, r4, r3
 8005e8e:	f7ff fb8f 	bl	80055b0 <__malloc_lock>
 8005e92:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <_free_r+0x94>)
 8005e94:	9801      	ldr	r0, [sp, #4]
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	b933      	cbnz	r3, 8005ea8 <_free_r+0x30>
 8005e9a:	6063      	str	r3, [r4, #4]
 8005e9c:	6014      	str	r4, [r2, #0]
 8005e9e:	b003      	add	sp, #12
 8005ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea4:	f7ff bb8a 	b.w	80055bc <__malloc_unlock>
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	d908      	bls.n	8005ebe <_free_r+0x46>
 8005eac:	6825      	ldr	r5, [r4, #0]
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf01      	itttt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	1949      	addeq	r1, r1, r5
 8005eba:	6021      	streq	r1, [r4, #0]
 8005ebc:	e7ed      	b.n	8005e9a <_free_r+0x22>
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	b10b      	cbz	r3, 8005ec8 <_free_r+0x50>
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d9fa      	bls.n	8005ebe <_free_r+0x46>
 8005ec8:	6811      	ldr	r1, [r2, #0]
 8005eca:	1855      	adds	r5, r2, r1
 8005ecc:	42a5      	cmp	r5, r4
 8005ece:	d10b      	bne.n	8005ee8 <_free_r+0x70>
 8005ed0:	6824      	ldr	r4, [r4, #0]
 8005ed2:	4421      	add	r1, r4
 8005ed4:	1854      	adds	r4, r2, r1
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	6011      	str	r1, [r2, #0]
 8005eda:	d1e0      	bne.n	8005e9e <_free_r+0x26>
 8005edc:	681c      	ldr	r4, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	6053      	str	r3, [r2, #4]
 8005ee2:	440c      	add	r4, r1
 8005ee4:	6014      	str	r4, [r2, #0]
 8005ee6:	e7da      	b.n	8005e9e <_free_r+0x26>
 8005ee8:	d902      	bls.n	8005ef0 <_free_r+0x78>
 8005eea:	230c      	movs	r3, #12
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	e7d6      	b.n	8005e9e <_free_r+0x26>
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	1961      	adds	r1, r4, r5
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	bf04      	itt	eq
 8005ef8:	6819      	ldreq	r1, [r3, #0]
 8005efa:	685b      	ldreq	r3, [r3, #4]
 8005efc:	6063      	str	r3, [r4, #4]
 8005efe:	bf04      	itt	eq
 8005f00:	1949      	addeq	r1, r1, r5
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	6054      	str	r4, [r2, #4]
 8005f06:	e7ca      	b.n	8005e9e <_free_r+0x26>
 8005f08:	b003      	add	sp, #12
 8005f0a:	bd30      	pop	{r4, r5, pc}
 8005f0c:	20000470 	.word	0x20000470

08005f10 <__ascii_mbtowc>:
 8005f10:	b082      	sub	sp, #8
 8005f12:	b901      	cbnz	r1, 8005f16 <__ascii_mbtowc+0x6>
 8005f14:	a901      	add	r1, sp, #4
 8005f16:	b142      	cbz	r2, 8005f2a <__ascii_mbtowc+0x1a>
 8005f18:	b14b      	cbz	r3, 8005f2e <__ascii_mbtowc+0x1e>
 8005f1a:	7813      	ldrb	r3, [r2, #0]
 8005f1c:	600b      	str	r3, [r1, #0]
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	1e10      	subs	r0, r2, #0
 8005f22:	bf18      	it	ne
 8005f24:	2001      	movne	r0, #1
 8005f26:	b002      	add	sp, #8
 8005f28:	4770      	bx	lr
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	e7fb      	b.n	8005f26 <__ascii_mbtowc+0x16>
 8005f2e:	f06f 0001 	mvn.w	r0, #1
 8005f32:	e7f8      	b.n	8005f26 <__ascii_mbtowc+0x16>

08005f34 <fiprintf>:
 8005f34:	b40e      	push	{r1, r2, r3}
 8005f36:	b503      	push	{r0, r1, lr}
 8005f38:	4601      	mov	r1, r0
 8005f3a:	ab03      	add	r3, sp, #12
 8005f3c:	4805      	ldr	r0, [pc, #20]	; (8005f54 <fiprintf+0x20>)
 8005f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f42:	6800      	ldr	r0, [r0, #0]
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	f000 f845 	bl	8005fd4 <_vfiprintf_r>
 8005f4a:	b002      	add	sp, #8
 8005f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f50:	b003      	add	sp, #12
 8005f52:	4770      	bx	lr
 8005f54:	2000007c 	.word	0x2000007c

08005f58 <__ascii_wctomb>:
 8005f58:	b149      	cbz	r1, 8005f6e <__ascii_wctomb+0x16>
 8005f5a:	2aff      	cmp	r2, #255	; 0xff
 8005f5c:	bf85      	ittet	hi
 8005f5e:	238a      	movhi	r3, #138	; 0x8a
 8005f60:	6003      	strhi	r3, [r0, #0]
 8005f62:	700a      	strbls	r2, [r1, #0]
 8005f64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f68:	bf98      	it	ls
 8005f6a:	2001      	movls	r0, #1
 8005f6c:	4770      	bx	lr
 8005f6e:	4608      	mov	r0, r1
 8005f70:	4770      	bx	lr

08005f72 <abort>:
 8005f72:	b508      	push	{r3, lr}
 8005f74:	2006      	movs	r0, #6
 8005f76:	f000 fa89 	bl	800648c <raise>
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fb ff62 	bl	8001e44 <_exit>

08005f80 <__sfputc_r>:
 8005f80:	6893      	ldr	r3, [r2, #8]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	b410      	push	{r4}
 8005f88:	6093      	str	r3, [r2, #8]
 8005f8a:	da08      	bge.n	8005f9e <__sfputc_r+0x1e>
 8005f8c:	6994      	ldr	r4, [r2, #24]
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	db01      	blt.n	8005f96 <__sfputc_r+0x16>
 8005f92:	290a      	cmp	r1, #10
 8005f94:	d103      	bne.n	8005f9e <__sfputc_r+0x1e>
 8005f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f9a:	f000 b935 	b.w	8006208 <__swbuf_r>
 8005f9e:	6813      	ldr	r3, [r2, #0]
 8005fa0:	1c58      	adds	r0, r3, #1
 8005fa2:	6010      	str	r0, [r2, #0]
 8005fa4:	7019      	strb	r1, [r3, #0]
 8005fa6:	4608      	mov	r0, r1
 8005fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <__sfputs_r>:
 8005fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	460f      	mov	r7, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	18d5      	adds	r5, r2, r3
 8005fb8:	42ac      	cmp	r4, r5
 8005fba:	d101      	bne.n	8005fc0 <__sfputs_r+0x12>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e007      	b.n	8005fd0 <__sfputs_r+0x22>
 8005fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc4:	463a      	mov	r2, r7
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7ff ffda 	bl	8005f80 <__sfputc_r>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d1f3      	bne.n	8005fb8 <__sfputs_r+0xa>
 8005fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fd4 <_vfiprintf_r>:
 8005fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	460d      	mov	r5, r1
 8005fda:	b09d      	sub	sp, #116	; 0x74
 8005fdc:	4614      	mov	r4, r2
 8005fde:	4698      	mov	r8, r3
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	b118      	cbz	r0, 8005fec <_vfiprintf_r+0x18>
 8005fe4:	6a03      	ldr	r3, [r0, #32]
 8005fe6:	b90b      	cbnz	r3, 8005fec <_vfiprintf_r+0x18>
 8005fe8:	f7fe faa0 	bl	800452c <__sinit>
 8005fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fee:	07d9      	lsls	r1, r3, #31
 8005ff0:	d405      	bmi.n	8005ffe <_vfiprintf_r+0x2a>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	059a      	lsls	r2, r3, #22
 8005ff6:	d402      	bmi.n	8005ffe <_vfiprintf_r+0x2a>
 8005ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ffa:	f7fe fb04 	bl	8004606 <__retarget_lock_acquire_recursive>
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	071b      	lsls	r3, r3, #28
 8006002:	d501      	bpl.n	8006008 <_vfiprintf_r+0x34>
 8006004:	692b      	ldr	r3, [r5, #16]
 8006006:	b99b      	cbnz	r3, 8006030 <_vfiprintf_r+0x5c>
 8006008:	4629      	mov	r1, r5
 800600a:	4630      	mov	r0, r6
 800600c:	f000 f93a 	bl	8006284 <__swsetup_r>
 8006010:	b170      	cbz	r0, 8006030 <_vfiprintf_r+0x5c>
 8006012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006014:	07dc      	lsls	r4, r3, #31
 8006016:	d504      	bpl.n	8006022 <_vfiprintf_r+0x4e>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800601c:	b01d      	add	sp, #116	; 0x74
 800601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006022:	89ab      	ldrh	r3, [r5, #12]
 8006024:	0598      	lsls	r0, r3, #22
 8006026:	d4f7      	bmi.n	8006018 <_vfiprintf_r+0x44>
 8006028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800602a:	f7fe faed 	bl	8004608 <__retarget_lock_release_recursive>
 800602e:	e7f3      	b.n	8006018 <_vfiprintf_r+0x44>
 8006030:	2300      	movs	r3, #0
 8006032:	9309      	str	r3, [sp, #36]	; 0x24
 8006034:	2320      	movs	r3, #32
 8006036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800603a:	f8cd 800c 	str.w	r8, [sp, #12]
 800603e:	2330      	movs	r3, #48	; 0x30
 8006040:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061f4 <_vfiprintf_r+0x220>
 8006044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006048:	f04f 0901 	mov.w	r9, #1
 800604c:	4623      	mov	r3, r4
 800604e:	469a      	mov	sl, r3
 8006050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006054:	b10a      	cbz	r2, 800605a <_vfiprintf_r+0x86>
 8006056:	2a25      	cmp	r2, #37	; 0x25
 8006058:	d1f9      	bne.n	800604e <_vfiprintf_r+0x7a>
 800605a:	ebba 0b04 	subs.w	fp, sl, r4
 800605e:	d00b      	beq.n	8006078 <_vfiprintf_r+0xa4>
 8006060:	465b      	mov	r3, fp
 8006062:	4622      	mov	r2, r4
 8006064:	4629      	mov	r1, r5
 8006066:	4630      	mov	r0, r6
 8006068:	f7ff ffa1 	bl	8005fae <__sfputs_r>
 800606c:	3001      	adds	r0, #1
 800606e:	f000 80a9 	beq.w	80061c4 <_vfiprintf_r+0x1f0>
 8006072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006074:	445a      	add	r2, fp
 8006076:	9209      	str	r2, [sp, #36]	; 0x24
 8006078:	f89a 3000 	ldrb.w	r3, [sl]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80a1 	beq.w	80061c4 <_vfiprintf_r+0x1f0>
 8006082:	2300      	movs	r3, #0
 8006084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800608c:	f10a 0a01 	add.w	sl, sl, #1
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	9307      	str	r3, [sp, #28]
 8006094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006098:	931a      	str	r3, [sp, #104]	; 0x68
 800609a:	4654      	mov	r4, sl
 800609c:	2205      	movs	r2, #5
 800609e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a2:	4854      	ldr	r0, [pc, #336]	; (80061f4 <_vfiprintf_r+0x220>)
 80060a4:	f7fa f89c 	bl	80001e0 <memchr>
 80060a8:	9a04      	ldr	r2, [sp, #16]
 80060aa:	b9d8      	cbnz	r0, 80060e4 <_vfiprintf_r+0x110>
 80060ac:	06d1      	lsls	r1, r2, #27
 80060ae:	bf44      	itt	mi
 80060b0:	2320      	movmi	r3, #32
 80060b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b6:	0713      	lsls	r3, r2, #28
 80060b8:	bf44      	itt	mi
 80060ba:	232b      	movmi	r3, #43	; 0x2b
 80060bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060c0:	f89a 3000 	ldrb.w	r3, [sl]
 80060c4:	2b2a      	cmp	r3, #42	; 0x2a
 80060c6:	d015      	beq.n	80060f4 <_vfiprintf_r+0x120>
 80060c8:	9a07      	ldr	r2, [sp, #28]
 80060ca:	4654      	mov	r4, sl
 80060cc:	2000      	movs	r0, #0
 80060ce:	f04f 0c0a 	mov.w	ip, #10
 80060d2:	4621      	mov	r1, r4
 80060d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d8:	3b30      	subs	r3, #48	; 0x30
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d94d      	bls.n	800617a <_vfiprintf_r+0x1a6>
 80060de:	b1b0      	cbz	r0, 800610e <_vfiprintf_r+0x13a>
 80060e0:	9207      	str	r2, [sp, #28]
 80060e2:	e014      	b.n	800610e <_vfiprintf_r+0x13a>
 80060e4:	eba0 0308 	sub.w	r3, r0, r8
 80060e8:	fa09 f303 	lsl.w	r3, r9, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	46a2      	mov	sl, r4
 80060f2:	e7d2      	b.n	800609a <_vfiprintf_r+0xc6>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	1d19      	adds	r1, r3, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	9103      	str	r1, [sp, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bfbb      	ittet	lt
 8006100:	425b      	neglt	r3, r3
 8006102:	f042 0202 	orrlt.w	r2, r2, #2
 8006106:	9307      	strge	r3, [sp, #28]
 8006108:	9307      	strlt	r3, [sp, #28]
 800610a:	bfb8      	it	lt
 800610c:	9204      	strlt	r2, [sp, #16]
 800610e:	7823      	ldrb	r3, [r4, #0]
 8006110:	2b2e      	cmp	r3, #46	; 0x2e
 8006112:	d10c      	bne.n	800612e <_vfiprintf_r+0x15a>
 8006114:	7863      	ldrb	r3, [r4, #1]
 8006116:	2b2a      	cmp	r3, #42	; 0x2a
 8006118:	d134      	bne.n	8006184 <_vfiprintf_r+0x1b0>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	9203      	str	r2, [sp, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfb8      	it	lt
 8006126:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800612a:	3402      	adds	r4, #2
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006204 <_vfiprintf_r+0x230>
 8006132:	7821      	ldrb	r1, [r4, #0]
 8006134:	2203      	movs	r2, #3
 8006136:	4650      	mov	r0, sl
 8006138:	f7fa f852 	bl	80001e0 <memchr>
 800613c:	b138      	cbz	r0, 800614e <_vfiprintf_r+0x17a>
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	eba0 000a 	sub.w	r0, r0, sl
 8006144:	2240      	movs	r2, #64	; 0x40
 8006146:	4082      	lsls	r2, r0
 8006148:	4313      	orrs	r3, r2
 800614a:	3401      	adds	r4, #1
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006152:	4829      	ldr	r0, [pc, #164]	; (80061f8 <_vfiprintf_r+0x224>)
 8006154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006158:	2206      	movs	r2, #6
 800615a:	f7fa f841 	bl	80001e0 <memchr>
 800615e:	2800      	cmp	r0, #0
 8006160:	d03f      	beq.n	80061e2 <_vfiprintf_r+0x20e>
 8006162:	4b26      	ldr	r3, [pc, #152]	; (80061fc <_vfiprintf_r+0x228>)
 8006164:	bb1b      	cbnz	r3, 80061ae <_vfiprintf_r+0x1da>
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	3307      	adds	r3, #7
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	3308      	adds	r3, #8
 8006170:	9303      	str	r3, [sp, #12]
 8006172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006174:	443b      	add	r3, r7
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	e768      	b.n	800604c <_vfiprintf_r+0x78>
 800617a:	fb0c 3202 	mla	r2, ip, r2, r3
 800617e:	460c      	mov	r4, r1
 8006180:	2001      	movs	r0, #1
 8006182:	e7a6      	b.n	80060d2 <_vfiprintf_r+0xfe>
 8006184:	2300      	movs	r3, #0
 8006186:	3401      	adds	r4, #1
 8006188:	9305      	str	r3, [sp, #20]
 800618a:	4619      	mov	r1, r3
 800618c:	f04f 0c0a 	mov.w	ip, #10
 8006190:	4620      	mov	r0, r4
 8006192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006196:	3a30      	subs	r2, #48	; 0x30
 8006198:	2a09      	cmp	r2, #9
 800619a:	d903      	bls.n	80061a4 <_vfiprintf_r+0x1d0>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0c6      	beq.n	800612e <_vfiprintf_r+0x15a>
 80061a0:	9105      	str	r1, [sp, #20]
 80061a2:	e7c4      	b.n	800612e <_vfiprintf_r+0x15a>
 80061a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a8:	4604      	mov	r4, r0
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7f0      	b.n	8006190 <_vfiprintf_r+0x1bc>
 80061ae:	ab03      	add	r3, sp, #12
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	462a      	mov	r2, r5
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <_vfiprintf_r+0x22c>)
 80061b6:	a904      	add	r1, sp, #16
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7fd fd65 	bl	8003c88 <_printf_float>
 80061be:	4607      	mov	r7, r0
 80061c0:	1c78      	adds	r0, r7, #1
 80061c2:	d1d6      	bne.n	8006172 <_vfiprintf_r+0x19e>
 80061c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c6:	07d9      	lsls	r1, r3, #31
 80061c8:	d405      	bmi.n	80061d6 <_vfiprintf_r+0x202>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	059a      	lsls	r2, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_vfiprintf_r+0x202>
 80061d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d2:	f7fe fa19 	bl	8004608 <__retarget_lock_release_recursive>
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	065b      	lsls	r3, r3, #25
 80061da:	f53f af1d 	bmi.w	8006018 <_vfiprintf_r+0x44>
 80061de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061e0:	e71c      	b.n	800601c <_vfiprintf_r+0x48>
 80061e2:	ab03      	add	r3, sp, #12
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	462a      	mov	r2, r5
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <_vfiprintf_r+0x22c>)
 80061ea:	a904      	add	r1, sp, #16
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7fd ffef 	bl	80041d0 <_printf_i>
 80061f2:	e7e4      	b.n	80061be <_vfiprintf_r+0x1ea>
 80061f4:	08006883 	.word	0x08006883
 80061f8:	0800688d 	.word	0x0800688d
 80061fc:	08003c89 	.word	0x08003c89
 8006200:	08005faf 	.word	0x08005faf
 8006204:	08006889 	.word	0x08006889

08006208 <__swbuf_r>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	460e      	mov	r6, r1
 800620c:	4614      	mov	r4, r2
 800620e:	4605      	mov	r5, r0
 8006210:	b118      	cbz	r0, 800621a <__swbuf_r+0x12>
 8006212:	6a03      	ldr	r3, [r0, #32]
 8006214:	b90b      	cbnz	r3, 800621a <__swbuf_r+0x12>
 8006216:	f7fe f989 	bl	800452c <__sinit>
 800621a:	69a3      	ldr	r3, [r4, #24]
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	071a      	lsls	r2, r3, #28
 8006222:	d525      	bpl.n	8006270 <__swbuf_r+0x68>
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	b31b      	cbz	r3, 8006270 <__swbuf_r+0x68>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	1a98      	subs	r0, r3, r2
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	b2f6      	uxtb	r6, r6
 8006232:	4283      	cmp	r3, r0
 8006234:	4637      	mov	r7, r6
 8006236:	dc04      	bgt.n	8006242 <__swbuf_r+0x3a>
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f7ff f990 	bl	8005560 <_fflush_r>
 8006240:	b9e0      	cbnz	r0, 800627c <__swbuf_r+0x74>
 8006242:	68a3      	ldr	r3, [r4, #8]
 8006244:	3b01      	subs	r3, #1
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	6022      	str	r2, [r4, #0]
 800624e:	701e      	strb	r6, [r3, #0]
 8006250:	6962      	ldr	r2, [r4, #20]
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d004      	beq.n	8006262 <__swbuf_r+0x5a>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	07db      	lsls	r3, r3, #31
 800625c:	d506      	bpl.n	800626c <__swbuf_r+0x64>
 800625e:	2e0a      	cmp	r6, #10
 8006260:	d104      	bne.n	800626c <__swbuf_r+0x64>
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f7ff f97b 	bl	8005560 <_fflush_r>
 800626a:	b938      	cbnz	r0, 800627c <__swbuf_r+0x74>
 800626c:	4638      	mov	r0, r7
 800626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006270:	4621      	mov	r1, r4
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f806 	bl	8006284 <__swsetup_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	d0d5      	beq.n	8006228 <__swbuf_r+0x20>
 800627c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006280:	e7f4      	b.n	800626c <__swbuf_r+0x64>
	...

08006284 <__swsetup_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <__swsetup_r+0xac>)
 8006288:	4605      	mov	r5, r0
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	460c      	mov	r4, r1
 800628e:	b118      	cbz	r0, 8006298 <__swsetup_r+0x14>
 8006290:	6a03      	ldr	r3, [r0, #32]
 8006292:	b90b      	cbnz	r3, 8006298 <__swsetup_r+0x14>
 8006294:	f7fe f94a 	bl	800452c <__sinit>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800629e:	0718      	lsls	r0, r3, #28
 80062a0:	d422      	bmi.n	80062e8 <__swsetup_r+0x64>
 80062a2:	06d9      	lsls	r1, r3, #27
 80062a4:	d407      	bmi.n	80062b6 <__swsetup_r+0x32>
 80062a6:	2309      	movs	r3, #9
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b4:	e034      	b.n	8006320 <__swsetup_r+0x9c>
 80062b6:	0758      	lsls	r0, r3, #29
 80062b8:	d512      	bpl.n	80062e0 <__swsetup_r+0x5c>
 80062ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062bc:	b141      	cbz	r1, 80062d0 <__swsetup_r+0x4c>
 80062be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d002      	beq.n	80062cc <__swsetup_r+0x48>
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff fdd6 	bl	8005e78 <_free_r>
 80062cc:	2300      	movs	r3, #0
 80062ce:	6363      	str	r3, [r4, #52]	; 0x34
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	2300      	movs	r3, #0
 80062da:	6063      	str	r3, [r4, #4]
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f043 0308 	orr.w	r3, r3, #8
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	b94b      	cbnz	r3, 8006300 <__swsetup_r+0x7c>
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f6:	d003      	beq.n	8006300 <__swsetup_r+0x7c>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f840 	bl	8006380 <__smakebuf_r>
 8006300:	89a0      	ldrh	r0, [r4, #12]
 8006302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006306:	f010 0301 	ands.w	r3, r0, #1
 800630a:	d00a      	beq.n	8006322 <__swsetup_r+0x9e>
 800630c:	2300      	movs	r3, #0
 800630e:	60a3      	str	r3, [r4, #8]
 8006310:	6963      	ldr	r3, [r4, #20]
 8006312:	425b      	negs	r3, r3
 8006314:	61a3      	str	r3, [r4, #24]
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	b943      	cbnz	r3, 800632c <__swsetup_r+0xa8>
 800631a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800631e:	d1c4      	bne.n	80062aa <__swsetup_r+0x26>
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	0781      	lsls	r1, r0, #30
 8006324:	bf58      	it	pl
 8006326:	6963      	ldrpl	r3, [r4, #20]
 8006328:	60a3      	str	r3, [r4, #8]
 800632a:	e7f4      	b.n	8006316 <__swsetup_r+0x92>
 800632c:	2000      	movs	r0, #0
 800632e:	e7f7      	b.n	8006320 <__swsetup_r+0x9c>
 8006330:	2000007c 	.word	0x2000007c

08006334 <__swhatbuf_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	460c      	mov	r4, r1
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	2900      	cmp	r1, #0
 800633e:	b096      	sub	sp, #88	; 0x58
 8006340:	4615      	mov	r5, r2
 8006342:	461e      	mov	r6, r3
 8006344:	da0d      	bge.n	8006362 <__swhatbuf_r+0x2e>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f013 0f80 	tst.w	r3, #128	; 0x80
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	bf0c      	ite	eq
 8006352:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006356:	2340      	movne	r3, #64	; 0x40
 8006358:	2000      	movs	r0, #0
 800635a:	6031      	str	r1, [r6, #0]
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	b016      	add	sp, #88	; 0x58
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	466a      	mov	r2, sp
 8006364:	f000 f848 	bl	80063f8 <_fstat_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	dbec      	blt.n	8006346 <__swhatbuf_r+0x12>
 800636c:	9901      	ldr	r1, [sp, #4]
 800636e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006372:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006376:	4259      	negs	r1, r3
 8006378:	4159      	adcs	r1, r3
 800637a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800637e:	e7eb      	b.n	8006358 <__swhatbuf_r+0x24>

08006380 <__smakebuf_r>:
 8006380:	898b      	ldrh	r3, [r1, #12]
 8006382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006384:	079d      	lsls	r5, r3, #30
 8006386:	4606      	mov	r6, r0
 8006388:	460c      	mov	r4, r1
 800638a:	d507      	bpl.n	800639c <__smakebuf_r+0x1c>
 800638c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	2301      	movs	r3, #1
 8006396:	6163      	str	r3, [r4, #20]
 8006398:	b002      	add	sp, #8
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	ab01      	add	r3, sp, #4
 800639e:	466a      	mov	r2, sp
 80063a0:	f7ff ffc8 	bl	8006334 <__swhatbuf_r>
 80063a4:	9900      	ldr	r1, [sp, #0]
 80063a6:	4605      	mov	r5, r0
 80063a8:	4630      	mov	r0, r6
 80063aa:	f7fe ffd3 	bl	8005354 <_malloc_r>
 80063ae:	b948      	cbnz	r0, 80063c4 <__smakebuf_r+0x44>
 80063b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b4:	059a      	lsls	r2, r3, #22
 80063b6:	d4ef      	bmi.n	8006398 <__smakebuf_r+0x18>
 80063b8:	f023 0303 	bic.w	r3, r3, #3
 80063bc:	f043 0302 	orr.w	r3, r3, #2
 80063c0:	81a3      	strh	r3, [r4, #12]
 80063c2:	e7e3      	b.n	800638c <__smakebuf_r+0xc>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	6020      	str	r0, [r4, #0]
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	9b00      	ldr	r3, [sp, #0]
 80063d0:	6163      	str	r3, [r4, #20]
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	6120      	str	r0, [r4, #16]
 80063d6:	b15b      	cbz	r3, 80063f0 <__smakebuf_r+0x70>
 80063d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f81d 	bl	800641c <_isatty_r>
 80063e2:	b128      	cbz	r0, 80063f0 <__smakebuf_r+0x70>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	431d      	orrs	r5, r3
 80063f4:	81a5      	strh	r5, [r4, #12]
 80063f6:	e7cf      	b.n	8006398 <__smakebuf_r+0x18>

080063f8 <_fstat_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	; (8006418 <_fstat_r+0x20>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	f7fb fd6c 	bl	8001ee2 <_fstat>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d102      	bne.n	8006414 <_fstat_r+0x1c>
 800640e:	682b      	ldr	r3, [r5, #0]
 8006410:	b103      	cbz	r3, 8006414 <_fstat_r+0x1c>
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	bf00      	nop
 8006418:	20000478 	.word	0x20000478

0800641c <_isatty_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d06      	ldr	r5, [pc, #24]	; (8006438 <_isatty_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f7fb fd6b 	bl	8001f02 <_isatty>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_isatty_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_isatty_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20000478 	.word	0x20000478

0800643c <_raise_r>:
 800643c:	291f      	cmp	r1, #31
 800643e:	b538      	push	{r3, r4, r5, lr}
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	d904      	bls.n	8006450 <_raise_r+0x14>
 8006446:	2316      	movs	r3, #22
 8006448:	6003      	str	r3, [r0, #0]
 800644a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006452:	b112      	cbz	r2, 800645a <_raise_r+0x1e>
 8006454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006458:	b94b      	cbnz	r3, 800646e <_raise_r+0x32>
 800645a:	4620      	mov	r0, r4
 800645c:	f000 f830 	bl	80064c0 <_getpid_r>
 8006460:	462a      	mov	r2, r5
 8006462:	4601      	mov	r1, r0
 8006464:	4620      	mov	r0, r4
 8006466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800646a:	f000 b817 	b.w	800649c <_kill_r>
 800646e:	2b01      	cmp	r3, #1
 8006470:	d00a      	beq.n	8006488 <_raise_r+0x4c>
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	d103      	bne.n	800647e <_raise_r+0x42>
 8006476:	2316      	movs	r3, #22
 8006478:	6003      	str	r3, [r0, #0]
 800647a:	2001      	movs	r0, #1
 800647c:	e7e7      	b.n	800644e <_raise_r+0x12>
 800647e:	2400      	movs	r4, #0
 8006480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006484:	4628      	mov	r0, r5
 8006486:	4798      	blx	r3
 8006488:	2000      	movs	r0, #0
 800648a:	e7e0      	b.n	800644e <_raise_r+0x12>

0800648c <raise>:
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <raise+0xc>)
 800648e:	4601      	mov	r1, r0
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f7ff bfd3 	b.w	800643c <_raise_r>
 8006496:	bf00      	nop
 8006498:	2000007c 	.word	0x2000007c

0800649c <_kill_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_kill_r+0x20>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	f7fb fcbb 	bl	8001e24 <_kill>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d102      	bne.n	80064b8 <_kill_r+0x1c>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	b103      	cbz	r3, 80064b8 <_kill_r+0x1c>
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	20000478 	.word	0x20000478

080064c0 <_getpid_r>:
 80064c0:	f7fb bca8 	b.w	8001e14 <_getpid>

080064c4 <_init>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr

080064d0 <_fini>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	bf00      	nop
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr
